// Package pim provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package pim

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for AttributeDefinitionFilterDtoType.
const (
	AttributeDefinitionFilterDtoTypeIDIN     AttributeDefinitionFilterDtoType = "ID_IN"
	AttributeDefinitionFilterDtoTypeNUMBERIN AttributeDefinitionFilterDtoType = "NUMBER_IN"
)

// Defines values for AttributeDefinitionResponseDataType.
const (
	AttributeDefinitionResponseDataTypeBoolean       AttributeDefinitionResponseDataType = "boolean"
	AttributeDefinitionResponseDataTypeColumn        AttributeDefinitionResponseDataType = "column"
	AttributeDefinitionResponseDataTypeDate          AttributeDefinitionResponseDataType = "date"
	AttributeDefinitionResponseDataTypeDateTime      AttributeDefinitionResponseDataType = "date_time"
	AttributeDefinitionResponseDataTypeDecimal       AttributeDefinitionResponseDataType = "decimal"
	AttributeDefinitionResponseDataTypeDictionary    AttributeDefinitionResponseDataType = "dictionary"
	AttributeDefinitionResponseDataTypeFormattedText AttributeDefinitionResponseDataType = "formatted_text"
	AttributeDefinitionResponseDataTypeInteger       AttributeDefinitionResponseDataType = "integer"
	AttributeDefinitionResponseDataTypeLocation      AttributeDefinitionResponseDataType = "location"
	AttributeDefinitionResponseDataTypeMatrix        AttributeDefinitionResponseDataType = "matrix"
	AttributeDefinitionResponseDataTypeMultiSelect   AttributeDefinitionResponseDataType = "multi_select"
	AttributeDefinitionResponseDataTypeMultiline     AttributeDefinitionResponseDataType = "multiline"
	AttributeDefinitionResponseDataTypePattern       AttributeDefinitionResponseDataType = "pattern"
	AttributeDefinitionResponseDataTypeSingleSelect  AttributeDefinitionResponseDataType = "single_select"
	AttributeDefinitionResponseDataTypeText          AttributeDefinitionResponseDataType = "text"
	AttributeDefinitionResponseDataTypeTime          AttributeDefinitionResponseDataType = "time"
)

// Defines values for AttributeValidationDataStatus.
const (
	AttributeValidationDataStatusFAILED     AttributeValidationDataStatus = "FAILED"
	AttributeValidationDataStatusSUCCESSFUL AttributeValidationDataStatus = "SUCCESSFUL"
)

// Defines values for AttributeValidationIssueCode.
const (
	DUPLICATEDSELECTVALUE AttributeValidationIssueCode = "DUPLICATED_SELECT_VALUE"
	NOTFOUND              AttributeValidationIssueCode = "NOT_FOUND"
)

// Defines values for CategoryFilterType.
const (
	CategoryFilterTypeIDIN     CategoryFilterType = "ID_IN"
	CategoryFilterTypeNUMBERIN CategoryFilterType = "NUMBER_IN"
)

// Defines values for CategoryFullResponseState.
const (
	CategoryFullResponseStateACTIVE   CategoryFullResponseState = "ACTIVE"
	CategoryFullResponseStateARCHIVED CategoryFullResponseState = "ARCHIVED"
)

// Defines values for DictionaryAttributeFilterDtoType.
const (
	DictionaryAttributeFilterDtoTypeIDIN     DictionaryAttributeFilterDtoType = "ID_IN"
	DictionaryAttributeFilterDtoTypeNUMBERIN DictionaryAttributeFilterDtoType = "NUMBER_IN"
)

// Defines values for DictionaryValueFilterDtoType.
const (
	CHILDVALUEIDIN  DictionaryValueFilterDtoType = "CHILD_VALUE_ID_IN"
	PARENTVALUEIDIN DictionaryValueFilterDtoType = "PARENT_VALUE_ID_IN"
)

// Defines values for GridAssetFilterDtoType.
const (
	ASSIGNEDTOALL GridAssetFilterDtoType = "ASSIGNED_TO_ALL"
	ASSIGNEDTOANY GridAssetFilterDtoType = "ASSIGNED_TO_ANY"
	HAVEANY       GridAssetFilterDtoType = "HAVE_ANY"
	HAVELABEL     GridAssetFilterDtoType = "HAVE_LABEL"
	HAVELESSTHAN  GridAssetFilterDtoType = "HAVE_LESS_THAN"
	HAVEMORETHAN  GridAssetFilterDtoType = "HAVE_MORE_THAN"
	HAVENONE      GridAssetFilterDtoType = "HAVE_NONE"
	NOTHAVELABEL  GridAssetFilterDtoType = "NOT_HAVE_LABEL"
)

// Defines values for GridAttributeFilterDtoType.
const (
	GridAttributeFilterDtoTypeASSOCIATED    GridAttributeFilterDtoType = "ASSOCIATED"
	GridAttributeFilterDtoTypeCONTAINS      GridAttributeFilterDtoType = "CONTAINS"
	GridAttributeFilterDtoTypeDOESHAVEALL   GridAttributeFilterDtoType = "DOES_HAVE_ALL"
	GridAttributeFilterDtoTypeDOESHAVESOME  GridAttributeFilterDtoType = "DOES_HAVE_SOME"
	GridAttributeFilterDtoTypeDOESNTHAVEALL GridAttributeFilterDtoType = "DOESNT_HAVE_ALL"
	GridAttributeFilterDtoTypeDOESNTHAVEANY GridAttributeFilterDtoType = "DOESNT_HAVE_ANY"
	GridAttributeFilterDtoTypeEMPTY         GridAttributeFilterDtoType = "EMPTY"
	GridAttributeFilterDtoTypeEQUALS        GridAttributeFilterDtoType = "EQUALS"
	GridAttributeFilterDtoTypeNOTASSOCIATED GridAttributeFilterDtoType = "NOT_ASSOCIATED"
	GridAttributeFilterDtoTypeNOTCONTAINS   GridAttributeFilterDtoType = "NOT_CONTAINS"
	GridAttributeFilterDtoTypeNOTEMPTY      GridAttributeFilterDtoType = "NOT_EMPTY"
	GridAttributeFilterDtoTypeNOTEQUALS     GridAttributeFilterDtoType = "NOT_EQUALS"
)

// Defines values for GridCategoryFilterDtoType.
const (
	INANYCHILD      GridCategoryFilterDtoType = "IN_ANY_CHILD"
	INCATEGORY      GridCategoryFilterDtoType = "IN_CATEGORY"
	WITHOUTCATEGORY GridCategoryFilterDtoType = "WITHOUT_CATEGORY"
)

// Defines values for GridLabelFilterDtoType.
const (
	GridLabelFilterDtoTypeALL   GridLabelFilterDtoType = "ALL"
	GridLabelFilterDtoTypeEMPTY GridLabelFilterDtoType = "EMPTY"
	GridLabelFilterDtoTypeNOT   GridLabelFilterDtoType = "NOT"
	GridLabelFilterDtoTypeSOME  GridLabelFilterDtoType = "SOME"
)

// Defines values for GridProductBaseFilterDtoType.
const (
	GridProductBaseFilterDtoTypeDESCRIPTIONCONTAINS    GridProductBaseFilterDtoType = "DESCRIPTION_CONTAINS"
	GridProductBaseFilterDtoTypeDESCRIPTIONENDSWITH    GridProductBaseFilterDtoType = "DESCRIPTION_ENDS_WITH"
	GridProductBaseFilterDtoTypeDESCRIPTIONIS          GridProductBaseFilterDtoType = "DESCRIPTION_IS"
	GridProductBaseFilterDtoTypeDESCRIPTIONNOTCONTAINS GridProductBaseFilterDtoType = "DESCRIPTION_NOT_CONTAINS"
	GridProductBaseFilterDtoTypeDESCRIPTIONSTARTSWITH  GridProductBaseFilterDtoType = "DESCRIPTION_STARTS_WITH"
	GridProductBaseFilterDtoTypeIDIN                   GridProductBaseFilterDtoType = "ID_IN"
	GridProductBaseFilterDtoTypeNAMECONTAINS           GridProductBaseFilterDtoType = "NAME_CONTAINS"
	GridProductBaseFilterDtoTypeNAMEENDSWITH           GridProductBaseFilterDtoType = "NAME_ENDS_WITH"
	GridProductBaseFilterDtoTypeNAMEIS                 GridProductBaseFilterDtoType = "NAME_IS"
	GridProductBaseFilterDtoTypeNAMENOTCONTAINS        GridProductBaseFilterDtoType = "NAME_NOT_CONTAINS"
	GridProductBaseFilterDtoTypeNAMESTARTSWITH         GridProductBaseFilterDtoType = "NAME_STARTS_WITH"
	GridProductBaseFilterDtoTypeNUMBERCONTAINS         GridProductBaseFilterDtoType = "NUMBER_CONTAINS"
	GridProductBaseFilterDtoTypeNUMBERENDSWITH         GridProductBaseFilterDtoType = "NUMBER_ENDS_WITH"
	GridProductBaseFilterDtoTypeNUMBERIN               GridProductBaseFilterDtoType = "NUMBER_IN"
	GridProductBaseFilterDtoTypeNUMBERIS               GridProductBaseFilterDtoType = "NUMBER_IS"
	GridProductBaseFilterDtoTypeNUMBERNOTCONTAINS      GridProductBaseFilterDtoType = "NUMBER_NOT_CONTAINS"
	GridProductBaseFilterDtoTypeNUMBERSTARTSWITH       GridProductBaseFilterDtoType = "NUMBER_STARTS_WITH"
)

// Defines values for GridProductCreateDateFilterDtoType.
const (
	GridProductCreateDateFilterDtoTypeGREATEREQUAL GridProductCreateDateFilterDtoType = "GREATER_EQUAL"
	GridProductCreateDateFilterDtoTypeLESSEQUAL    GridProductCreateDateFilterDtoType = "LESS_EQUAL"
)

// Defines values for GridProductLastUpdateFilterDtoType.
const (
	GridProductLastUpdateFilterDtoTypeGREATEREQUAL GridProductLastUpdateFilterDtoType = "GREATER_EQUAL"
	GridProductLastUpdateFilterDtoTypeLESSEQUAL    GridProductLastUpdateFilterDtoType = "LESS_EQUAL"
)

// Defines values for GridProductTypeFilterDtoType.
const (
	GridProductTypeFilterDtoTypeBUNDLE  GridProductTypeFilterDtoType = "BUNDLE"
	GridProductTypeFilterDtoTypeGROUP   GridProductTypeFilterDtoType = "GROUP"
	GridProductTypeFilterDtoTypeSINGLE  GridProductTypeFilterDtoType = "SINGLE"
	GridProductTypeFilterDtoTypeVARIANT GridProductTypeFilterDtoType = "VARIANT"
)

// Defines values for GridPublishStateFilterDtoType.
const (
	IN GridPublishStateFilterDtoType = "IN"
)

// Defines values for GridRelationsFilterDtoType.
const (
	EMPTY GridRelationsFilterDtoType = "EMPTY"
	HAVE  GridRelationsFilterDtoType = "HAVE"
	NOT   GridRelationsFilterDtoType = "NOT"
)

// Defines values for GridScoreFilterDtoType.
const (
	BETWEEN GridScoreFilterDtoType = "BETWEEN"
)

// Defines values for GridScoreRequirementResultFilterDtoType.
const (
	NOTMEETALL GridScoreRequirementResultFilterDtoType = "NOT_MEET_ALL"
)

// Defines values for PolicyRequestReadOnly.
const (
	False PolicyRequestReadOnly = false
)

// Defines values for ProductAllContextStates.
const (
	ProductAllContextStatesARCHIVED        ProductAllContextStates = "ARCHIVED"
	ProductAllContextStatesCONNECTED       ProductAllContextStates = "CONNECTED"
	ProductAllContextStatesNOTCONNECTED    ProductAllContextStates = "NOT_CONNECTED"
	ProductAllContextStatesPLAYGROUNDONLY  ProductAllContextStates = "PLAYGROUND_ONLY"
	ProductAllContextStatesTOBEARCHIVED    ProductAllContextStates = "TO_BE_ARCHIVED"
	ProductAllContextStatesTOBEPUBLISHED   ProductAllContextStates = "TO_BE_PUBLISHED"
	ProductAllContextStatesTOBEUNPUBLISHED ProductAllContextStates = "TO_BE_UNPUBLISHED"
)

// Defines values for ProductAllRelatedProductsRelationSortingOrderSource.
const (
	ProductAllRelatedProductsRelationSortingOrderSourcePRODUCT            ProductAllRelatedProductsRelationSortingOrderSource = "PRODUCT"
	ProductAllRelatedProductsRelationSortingOrderSourceRELATIONDEFINITION ProductAllRelatedProductsRelationSortingOrderSource = "RELATION_DEFINITION"
)

// Defines values for ProductAllState.
const (
	ProductAllStateARCHIVED        ProductAllState = "ARCHIVED"
	ProductAllStateCONNECTED       ProductAllState = "CONNECTED"
	ProductAllStateNOTCONNECTED    ProductAllState = "NOT_CONNECTED"
	ProductAllStatePLAYGROUNDONLY  ProductAllState = "PLAYGROUND_ONLY"
	ProductAllStateTOBEARCHIVED    ProductAllState = "TO_BE_ARCHIVED"
	ProductAllStateTOBEPUBLISHED   ProductAllState = "TO_BE_PUBLISHED"
	ProductAllStateTOBEUNPUBLISHED ProductAllState = "TO_BE_UNPUBLISHED"
)

// Defines values for ProductAllType.
const (
	ProductAllTypeBUNDLE  ProductAllType = "BUNDLE"
	ProductAllTypeGROUP   ProductAllType = "GROUP"
	ProductAllTypeSINGLE  ProductAllType = "SINGLE"
	ProductAllTypeVARIANT ProductAllType = "VARIANT"
)

// Defines values for ProductConnectionInfoResponseDirections.
const (
	ProductConnectionInfoResponseDirectionsDIRECT  ProductConnectionInfoResponseDirections = "DIRECT"
	ProductConnectionInfoResponseDirectionsREVERSE ProductConnectionInfoResponseDirections = "REVERSE"
)

// Defines values for ProductConnectionMetadataContextStates.
const (
	ProductConnectionMetadataContextStatesARCHIVED        ProductConnectionMetadataContextStates = "ARCHIVED"
	ProductConnectionMetadataContextStatesCONNECTED       ProductConnectionMetadataContextStates = "CONNECTED"
	ProductConnectionMetadataContextStatesNOTCONNECTED    ProductConnectionMetadataContextStates = "NOT_CONNECTED"
	ProductConnectionMetadataContextStatesPLAYGROUNDONLY  ProductConnectionMetadataContextStates = "PLAYGROUND_ONLY"
	ProductConnectionMetadataContextStatesTOBEARCHIVED    ProductConnectionMetadataContextStates = "TO_BE_ARCHIVED"
	ProductConnectionMetadataContextStatesTOBEPUBLISHED   ProductConnectionMetadataContextStates = "TO_BE_PUBLISHED"
	ProductConnectionMetadataContextStatesTOBEUNPUBLISHED ProductConnectionMetadataContextStates = "TO_BE_UNPUBLISHED"
)

// Defines values for ProductConnectionMetadataState.
const (
	ProductConnectionMetadataStateARCHIVED        ProductConnectionMetadataState = "ARCHIVED"
	ProductConnectionMetadataStateCONNECTED       ProductConnectionMetadataState = "CONNECTED"
	ProductConnectionMetadataStateNOTCONNECTED    ProductConnectionMetadataState = "NOT_CONNECTED"
	ProductConnectionMetadataStatePLAYGROUNDONLY  ProductConnectionMetadataState = "PLAYGROUND_ONLY"
	ProductConnectionMetadataStateTOBEARCHIVED    ProductConnectionMetadataState = "TO_BE_ARCHIVED"
	ProductConnectionMetadataStateTOBEPUBLISHED   ProductConnectionMetadataState = "TO_BE_PUBLISHED"
	ProductConnectionMetadataStateTOBEUNPUBLISHED ProductConnectionMetadataState = "TO_BE_UNPUBLISHED"
)

// Defines values for ProductCreateRequestRelatedProductsRelationSortingOrderSource.
const (
	ProductCreateRequestRelatedProductsRelationSortingOrderSourcePRODUCT            ProductCreateRequestRelatedProductsRelationSortingOrderSource = "PRODUCT"
	ProductCreateRequestRelatedProductsRelationSortingOrderSourceRELATIONDEFINITION ProductCreateRequestRelatedProductsRelationSortingOrderSource = "RELATION_DEFINITION"
)

// Defines values for ProductCreateRequestType.
const (
	ProductCreateRequestTypeBUNDLE  ProductCreateRequestType = "BUNDLE"
	ProductCreateRequestTypeGROUP   ProductCreateRequestType = "GROUP"
	ProductCreateRequestTypeSINGLE  ProductCreateRequestType = "SINGLE"
	ProductCreateRequestTypeVARIANT ProductCreateRequestType = "VARIANT"
)

// Defines values for ProductMetadataViewDtoContextStates.
const (
	ProductMetadataViewDtoContextStatesARCHIVED        ProductMetadataViewDtoContextStates = "ARCHIVED"
	ProductMetadataViewDtoContextStatesCONNECTED       ProductMetadataViewDtoContextStates = "CONNECTED"
	ProductMetadataViewDtoContextStatesNOTCONNECTED    ProductMetadataViewDtoContextStates = "NOT_CONNECTED"
	ProductMetadataViewDtoContextStatesPLAYGROUNDONLY  ProductMetadataViewDtoContextStates = "PLAYGROUND_ONLY"
	ProductMetadataViewDtoContextStatesTOBEARCHIVED    ProductMetadataViewDtoContextStates = "TO_BE_ARCHIVED"
	ProductMetadataViewDtoContextStatesTOBEPUBLISHED   ProductMetadataViewDtoContextStates = "TO_BE_PUBLISHED"
	ProductMetadataViewDtoContextStatesTOBEUNPUBLISHED ProductMetadataViewDtoContextStates = "TO_BE_UNPUBLISHED"
)

// Defines values for ProductMetadataViewDtoRelatedProductsRelationSortingOrderSource.
const (
	ProductMetadataViewDtoRelatedProductsRelationSortingOrderSourcePRODUCT            ProductMetadataViewDtoRelatedProductsRelationSortingOrderSource = "PRODUCT"
	ProductMetadataViewDtoRelatedProductsRelationSortingOrderSourceRELATIONDEFINITION ProductMetadataViewDtoRelatedProductsRelationSortingOrderSource = "RELATION_DEFINITION"
)

// Defines values for ProductMetadataViewDtoState.
const (
	ARCHIVED        ProductMetadataViewDtoState = "ARCHIVED"
	CONNECTED       ProductMetadataViewDtoState = "CONNECTED"
	NOTCONNECTED    ProductMetadataViewDtoState = "NOT_CONNECTED"
	PLAYGROUNDONLY  ProductMetadataViewDtoState = "PLAYGROUND_ONLY"
	TOBEARCHIVED    ProductMetadataViewDtoState = "TO_BE_ARCHIVED"
	TOBEPUBLISHED   ProductMetadataViewDtoState = "TO_BE_PUBLISHED"
	TOBEUNPUBLISHED ProductMetadataViewDtoState = "TO_BE_UNPUBLISHED"
)

// Defines values for ProductMetadataViewDtoType.
const (
	ProductMetadataViewDtoTypeBUNDLE  ProductMetadataViewDtoType = "BUNDLE"
	ProductMetadataViewDtoTypeGROUP   ProductMetadataViewDtoType = "GROUP"
	ProductMetadataViewDtoTypeSINGLE  ProductMetadataViewDtoType = "SINGLE"
	ProductMetadataViewDtoTypeVARIANT ProductMetadataViewDtoType = "VARIANT"
)

// Defines values for ProductValidationIssueDtoStatusCode.
const (
	ProductValidationIssueDtoStatusCodeDICTIONARYVALUENOTEXISTINFILTER ProductValidationIssueDtoStatusCode = "DICTIONARY_VALUE_NOT_EXIST_IN_FILTER"
	ProductValidationIssueDtoStatusCodeINVALIDCATEGORYCONSTRAINT       ProductValidationIssueDtoStatusCode = "INVALID_CATEGORY_CONSTRAINT"
	ProductValidationIssueDtoStatusCodeINVALIDVALUE                    ProductValidationIssueDtoStatusCode = "INVALID_VALUE"
	ProductValidationIssueDtoStatusCodeINVALIDVARIANTVALUE             ProductValidationIssueDtoStatusCode = "INVALID_VARIANT_VALUE"
	ProductValidationIssueDtoStatusCodeMISSINGCATEGORYATTRIBUTE        ProductValidationIssueDtoStatusCode = "MISSING_CATEGORY_ATTRIBUTE"
	ProductValidationIssueDtoStatusCodeMISSINGCATEGORYVALUE            ProductValidationIssueDtoStatusCode = "MISSING_CATEGORY_VALUE"
	ProductValidationIssueDtoStatusCodeMISSINGCOMPOUNDATTRIBUTE        ProductValidationIssueDtoStatusCode = "MISSING_COMPOUND_ATTRIBUTE"
	ProductValidationIssueDtoStatusCodeMISSINGPRODUCT                  ProductValidationIssueDtoStatusCode = "MISSING_PRODUCT"
	ProductValidationIssueDtoStatusCodeMISSINGVARIANTATTRIBUTE         ProductValidationIssueDtoStatusCode = "MISSING_VARIANT_ATTRIBUTE"
	ProductValidationIssueDtoStatusCodeMISSINGVARIANTVALUE             ProductValidationIssueDtoStatusCode = "MISSING_VARIANT_VALUE"
)

// Defines values for ProductValidationIssueResponseStatus.
const (
	ProductValidationIssueResponseStatusFAILED     ProductValidationIssueResponseStatus = "FAILED"
	ProductValidationIssueResponseStatusSUCCESSFUL ProductValidationIssueResponseStatus = "SUCCESSFUL"
)

// Defines values for RelationFilterType.
const (
	IDIN     RelationFilterType = "ID_IN"
	NUMBERIN RelationFilterType = "NUMBER_IN"
)

// Defines values for SimpleAttributeDefinitionRequestDataType.
const (
	SimpleAttributeDefinitionRequestDataTypeBoolean       SimpleAttributeDefinitionRequestDataType = "boolean"
	SimpleAttributeDefinitionRequestDataTypeColumn        SimpleAttributeDefinitionRequestDataType = "column"
	SimpleAttributeDefinitionRequestDataTypeDate          SimpleAttributeDefinitionRequestDataType = "date"
	SimpleAttributeDefinitionRequestDataTypeDateTime      SimpleAttributeDefinitionRequestDataType = "date_time"
	SimpleAttributeDefinitionRequestDataTypeDecimal       SimpleAttributeDefinitionRequestDataType = "decimal"
	SimpleAttributeDefinitionRequestDataTypeDictionary    SimpleAttributeDefinitionRequestDataType = "dictionary"
	SimpleAttributeDefinitionRequestDataTypeFormattedText SimpleAttributeDefinitionRequestDataType = "formatted_text"
	SimpleAttributeDefinitionRequestDataTypeInteger       SimpleAttributeDefinitionRequestDataType = "integer"
	SimpleAttributeDefinitionRequestDataTypeLocation      SimpleAttributeDefinitionRequestDataType = "location"
	SimpleAttributeDefinitionRequestDataTypeMatrix        SimpleAttributeDefinitionRequestDataType = "matrix"
	SimpleAttributeDefinitionRequestDataTypeMultiSelect   SimpleAttributeDefinitionRequestDataType = "multi_select"
	SimpleAttributeDefinitionRequestDataTypeMultiline     SimpleAttributeDefinitionRequestDataType = "multiline"
	SimpleAttributeDefinitionRequestDataTypePattern       SimpleAttributeDefinitionRequestDataType = "pattern"
	SimpleAttributeDefinitionRequestDataTypeSingleSelect  SimpleAttributeDefinitionRequestDataType = "single_select"
	SimpleAttributeDefinitionRequestDataTypeText          SimpleAttributeDefinitionRequestDataType = "text"
	SimpleAttributeDefinitionRequestDataTypeTime          SimpleAttributeDefinitionRequestDataType = "time"
)

// Defines values for UpdateProductStateRequestAction.
const (
	UpdateProductStateRequestActionARCHIVE    UpdateProductStateRequestAction = "ARCHIVE"
	UpdateProductStateRequestActionCONNECT    UpdateProductStateRequestAction = "CONNECT"
	UpdateProductStateRequestActionDISCONNECT UpdateProductStateRequestAction = "DISCONNECT"
	UpdateProductStateRequestActionPUBLISH    UpdateProductStateRequestAction = "PUBLISH"
	UpdateProductStateRequestActionSYNC       UpdateProductStateRequestAction = "SYNC"
	UpdateProductStateRequestActionUNARCHIVE  UpdateProductStateRequestAction = "UNARCHIVE"
	UpdateProductStateRequestActionUNPUBLISH  UpdateProductStateRequestAction = "UNPUBLISH"
)

// Defines values for ValueValidationIssueStatusCode.
const (
	ValueValidationIssueStatusCodeDICTIONARYVALUENOTEXISTINFILTER ValueValidationIssueStatusCode = "DICTIONARY_VALUE_NOT_EXIST_IN_FILTER"
	ValueValidationIssueStatusCodeINVALIDCATEGORYCONSTRAINT       ValueValidationIssueStatusCode = "INVALID_CATEGORY_CONSTRAINT"
	ValueValidationIssueStatusCodeINVALIDVALUE                    ValueValidationIssueStatusCode = "INVALID_VALUE"
	ValueValidationIssueStatusCodeINVALIDVARIANTVALUE             ValueValidationIssueStatusCode = "INVALID_VARIANT_VALUE"
	ValueValidationIssueStatusCodeMISSINGCATEGORYATTRIBUTE        ValueValidationIssueStatusCode = "MISSING_CATEGORY_ATTRIBUTE"
	ValueValidationIssueStatusCodeMISSINGCATEGORYVALUE            ValueValidationIssueStatusCode = "MISSING_CATEGORY_VALUE"
	ValueValidationIssueStatusCodeMISSINGCOMPOUNDATTRIBUTE        ValueValidationIssueStatusCode = "MISSING_COMPOUND_ATTRIBUTE"
	ValueValidationIssueStatusCodeMISSINGPRODUCT                  ValueValidationIssueStatusCode = "MISSING_PRODUCT"
	ValueValidationIssueStatusCodeMISSINGVARIANTATTRIBUTE         ValueValidationIssueStatusCode = "MISSING_VARIANT_ATTRIBUTE"
	ValueValidationIssueStatusCodeMISSINGVARIANTVALUE             ValueValidationIssueStatusCode = "MISSING_VARIANT_VALUE"
)

// Defines values for ValueValidationResponseStatus.
const (
	FAILED     ValueValidationResponseStatus = "FAILED"
	SUCCESSFUL ValueValidationResponseStatus = "SUCCESSFUL"
)

// Defines values for CreateCategoryParamsValidation.
const (
	CreateCategoryParamsValidationNAME CreateCategoryParamsValidation = "NAME"
)

// Defines values for DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType.
const (
	DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyTypeREAD  DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType = "READ"
	DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyTypeWRITE DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType = "WRITE"
)

// Defines values for DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType.
const (
	DeletePolicyFromProductsForCategoryNodeIdParamsPolicyTypeREAD  DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType = "READ"
	DeletePolicyFromProductsForCategoryNodeIdParamsPolicyTypeWRITE DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType = "WRITE"
)

// Defines values for DeletePolicyByCategoryAndPolicyIdParamsPolicyType.
const (
	DeletePolicyByCategoryAndPolicyIdParamsPolicyTypeREAD  DeletePolicyByCategoryAndPolicyIdParamsPolicyType = "READ"
	DeletePolicyByCategoryAndPolicyIdParamsPolicyTypeWRITE DeletePolicyByCategoryAndPolicyIdParamsPolicyType = "WRITE"
)

// Defines values for DeletePolicyFromProductsForCategoryIdParamsPolicyType.
const (
	DeletePolicyFromProductsForCategoryIdParamsPolicyTypeREAD  DeletePolicyFromProductsForCategoryIdParamsPolicyType = "READ"
	DeletePolicyFromProductsForCategoryIdParamsPolicyTypeWRITE DeletePolicyFromProductsForCategoryIdParamsPolicyType = "WRITE"
)

// Defines values for CreateCompoundDefinitionParamsValidation.
const (
	CreateCompoundDefinitionParamsValidationNAME CreateCompoundDefinitionParamsValidation = "NAME"
	CreateCompoundDefinitionParamsValidationNONE CreateCompoundDefinitionParamsValidation = "NONE"
)

// Defines values for UpdateCompoundDefinitionParamsValidation.
const (
	UpdateCompoundDefinitionParamsValidationNAME UpdateCompoundDefinitionParamsValidation = "NAME"
	UpdateCompoundDefinitionParamsValidationNONE UpdateCompoundDefinitionParamsValidation = "NONE"
)

// Defines values for CreateAttributeDefinitionParamsValidation.
const (
	CreateAttributeDefinitionParamsValidationNAME CreateAttributeDefinitionParamsValidation = "NAME"
	CreateAttributeDefinitionParamsValidationNONE CreateAttributeDefinitionParamsValidation = "NONE"
)

// Defines values for CreateColumnDefinitionParamsValidation.
const (
	CreateColumnDefinitionParamsValidationNAME CreateColumnDefinitionParamsValidation = "NAME"
	CreateColumnDefinitionParamsValidationNONE CreateColumnDefinitionParamsValidation = "NONE"
)

// Defines values for UpdateColumnDefinitionParamsValidation.
const (
	UpdateColumnDefinitionParamsValidationNAME UpdateColumnDefinitionParamsValidation = "NAME"
	UpdateColumnDefinitionParamsValidationNONE UpdateColumnDefinitionParamsValidation = "NONE"
)

// Defines values for UpdateColumnDefinitionDryRunParamsValidation.
const (
	UpdateColumnDefinitionDryRunParamsValidationNAME UpdateColumnDefinitionDryRunParamsValidation = "NAME"
	UpdateColumnDefinitionDryRunParamsValidationNONE UpdateColumnDefinitionDryRunParamsValidation = "NONE"
)

// Defines values for CreateDictionaryDefinitionParamsValidation.
const (
	CreateDictionaryDefinitionParamsValidationNAME CreateDictionaryDefinitionParamsValidation = "NAME"
	CreateDictionaryDefinitionParamsValidationNONE CreateDictionaryDefinitionParamsValidation = "NONE"
)

// Defines values for UpdateDictionaryDefinitionParamsValidation.
const (
	UpdateDictionaryDefinitionParamsValidationNAME UpdateDictionaryDefinitionParamsValidation = "NAME"
	UpdateDictionaryDefinitionParamsValidationNONE UpdateDictionaryDefinitionParamsValidation = "NONE"
)

// Defines values for CreateMatrixDefinitionParamsValidation.
const (
	CreateMatrixDefinitionParamsValidationNAME CreateMatrixDefinitionParamsValidation = "NAME"
	CreateMatrixDefinitionParamsValidationNONE CreateMatrixDefinitionParamsValidation = "NONE"
)

// Defines values for UpdateMatrixDefinitionParamsValidation.
const (
	UpdateMatrixDefinitionParamsValidationNAME UpdateMatrixDefinitionParamsValidation = "NAME"
	UpdateMatrixDefinitionParamsValidationNONE UpdateMatrixDefinitionParamsValidation = "NONE"
)

// Defines values for UpdateMatrixDefinitionDryRunParamsValidation.
const (
	UpdateMatrixDefinitionDryRunParamsValidationNAME UpdateMatrixDefinitionDryRunParamsValidation = "NAME"
	UpdateMatrixDefinitionDryRunParamsValidationNONE UpdateMatrixDefinitionDryRunParamsValidation = "NONE"
)

// Defines values for UpdateMetadataParamsValidation.
const (
	UpdateMetadataParamsValidationNAME UpdateMetadataParamsValidation = "NAME"
	UpdateMetadataParamsValidationNONE UpdateMetadataParamsValidation = "NONE"
)

// Defines values for UpdateAttributeDefinitionParamsValidation.
const (
	UpdateAttributeDefinitionParamsValidationNAME UpdateAttributeDefinitionParamsValidation = "NAME"
	UpdateAttributeDefinitionParamsValidationNONE UpdateAttributeDefinitionParamsValidation = "NONE"
)

// Defines values for UpdateAttributeDefinitionDryRunParamsValidation.
const (
	UpdateAttributeDefinitionDryRunParamsValidationNAME UpdateAttributeDefinitionDryRunParamsValidation = "NAME"
	UpdateAttributeDefinitionDryRunParamsValidationNONE UpdateAttributeDefinitionDryRunParamsValidation = "NONE"
)

// Defines values for DeletePolicyForAttributeDefinitionParamsPolicyType.
const (
	DeletePolicyForAttributeDefinitionParamsPolicyTypeREAD  DeletePolicyForAttributeDefinitionParamsPolicyType = "READ"
	DeletePolicyForAttributeDefinitionParamsPolicyTypeWRITE DeletePolicyForAttributeDefinitionParamsPolicyType = "WRITE"
)

// Defines values for CreateProductParamsValidation.
const (
	CreateProductParamsValidationNAME   CreateProductParamsValidation = "NAME"
	CreateProductParamsValidationNUMBER CreateProductParamsValidation = "NUMBER"
)

// Defines values for UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource.
const (
	UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSourcePRODUCT            UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource = "PRODUCT"
	UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSourceRELATIONDEFINITION UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource = "RELATION_DEFINITION"
)

// Defines values for GetProductForRelationParamsDirection.
const (
	GetProductForRelationParamsDirectionDIRECT  GetProductForRelationParamsDirection = "DIRECT"
	GetProductForRelationParamsDirectionREVERSE GetProductForRelationParamsDirection = "REVERSE"
)

// Defines values for UpdateOrderProductConnectionsParamsDirection.
const (
	DIRECT  UpdateOrderProductConnectionsParamsDirection = "DIRECT"
	REVERSE UpdateOrderProductConnectionsParamsDirection = "REVERSE"
)

// Defines values for ChangeStatusParamsAction.
const (
	ChangeStatusParamsActionARCHIVE    ChangeStatusParamsAction = "ARCHIVE"
	ChangeStatusParamsActionCONNECT    ChangeStatusParamsAction = "CONNECT"
	ChangeStatusParamsActionDISCONNECT ChangeStatusParamsAction = "DISCONNECT"
	ChangeStatusParamsActionPUBLISH    ChangeStatusParamsAction = "PUBLISH"
	ChangeStatusParamsActionSYNC       ChangeStatusParamsAction = "SYNC"
	ChangeStatusParamsActionUNARCHIVE  ChangeStatusParamsAction = "UNARCHIVE"
	ChangeStatusParamsActionUNPUBLISH  ChangeStatusParamsAction = "UNPUBLISH"
)

// Defines values for DeletePolicyForRelationParamsPolicyType.
const (
	DeletePolicyForRelationParamsPolicyTypeREAD  DeletePolicyForRelationParamsPolicyType = "READ"
	DeletePolicyForRelationParamsPolicyTypeWRITE DeletePolicyForRelationParamsPolicyType = "WRITE"
)

// AllProductMetadataUpdateRequest defines model for AllProductMetadataUpdateRequest.
type AllProductMetadataUpdateRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Number      *string `json:"number,omitempty"`
}

// AssetIdListViewsRequestDto defines model for AssetIdListViewsRequestDto.
type AssetIdListViewsRequestDto struct {
	AssetIds []string                                 `json:"assetIds"`
	Page     *int32                                   `json:"page,omitempty"`
	PageSize *int32                                   `json:"pageSize,omitempty"`
	Views    *[]AssetIdListViewsRequestDto_Views_Item `json:"views,omitempty"`
}

// AssetIdListViewsRequestDto_Views_Item defines model for AssetIdListViewsRequestDto.views.Item.
type AssetIdListViewsRequestDto_Views_Item struct {
	union json.RawMessage
}

// AssetsFilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type AssetsFilteringViewsDto = FilteringViewsDto

// AssignProductsToCategoryRequest defines model for AssignProductsToCategoryRequest.
type AssignProductsToCategoryRequest struct {
	CategoryId *string   `json:"categoryId,omitempty"`
	ProductIds *[]string `json:"productIds,omitempty"`
}

// AssociateProductAssetsRequest defines model for AssociateProductAssetsRequest.
type AssociateProductAssetsRequest struct {
	Assets *[]string `json:"assets,omitempty"`
}

// AttributeDefinitionDeleteResponse defines model for AttributeDefinitionDeleteResponse.
type AttributeDefinitionDeleteResponse struct {
	NumberOfAlteredCompoundAttributeDefinitions *int64 `json:"numberOfAlteredCompoundAttributeDefinitions,omitempty"`
	NumberOfDeletedCategoryLevelAttributes      *int64 `json:"numberOfDeletedCategoryLevelAttributes,omitempty"`
	NumberOfDeletedProductAttributes            *int64 `json:"numberOfDeletedProductAttributes,omitempty"`
}

// AttributeDefinitionFilterDto defines model for AttributeDefinitionFilterDto.
type AttributeDefinitionFilterDto struct {
	Type   *AttributeDefinitionFilterDtoType `json:"type,omitempty"`
	Values *[]string                         `json:"values,omitempty"`
}

// AttributeDefinitionFilterDtoType defines model for AttributeDefinitionFilterDto.Type.
type AttributeDefinitionFilterDtoType string

// AttributeDefinitionFilteringRequestDto defines model for AttributeDefinitionFilteringRequestDto.
type AttributeDefinitionFilteringRequestDto struct {
	Filters  *[]AttributeDefinitionFilterDto `json:"filters,omitempty"`
	Page     *int32                          `json:"page,omitempty"`
	PageSize *int32                          `json:"pageSize,omitempty"`
}

// AttributeDefinitionIdDto defines model for AttributeDefinitionIdDto.
type AttributeDefinitionIdDto struct {
	Id *string `json:"id,omitempty"`
}

// AttributeDefinitionMetadataUpdateRequest defines model for AttributeDefinitionMetadataUpdateRequest.
type AttributeDefinitionMetadataUpdateRequest struct {
	Description    *PropertyUpdateString `json:"description,omitempty"`
	ExternalSource *bool                 `json:"externalSource,omitempty"`
	Internal       *bool                 `json:"internal,omitempty"`
	Name           *PropertyUpdateString `json:"name,omitempty"`
	Number         *PropertyUpdateString `json:"number,omitempty"`
}

// AttributeDefinitionResponse defines model for AttributeDefinitionResponse.
type AttributeDefinitionResponse struct {
	Charset                  *string                              `json:"charset,omitempty"`
	ContentType              *string                              `json:"contentType,omitempty"`
	DataType                 *AttributeDefinitionResponseDataType `json:"dataType,omitempty"`
	Description              *string                              `json:"description,omitempty"`
	ExternalSource           *bool                                `json:"externalSource,omitempty"`
	FilterParentDefinitionId *string                              `json:"filterParentDefinitionId,omitempty"`
	Group                    *string                              `json:"group,omitempty"`
	GroupId                  *string                              `json:"groupId,omitempty"`
	Id                       *string                              `json:"id,omitempty"`
	Internal                 *bool                                `json:"internal,omitempty"`
	IsCompound               *bool                                `json:"isCompound,omitempty"`
	Name                     string                               `json:"name"`
	Number                   *string                              `json:"number,omitempty"`
	Restrictions             *RestrictionsDto                     `json:"restrictions,omitempty"`
	SelectedValuesLimit      *int32                               `json:"selectedValuesLimit,omitempty"`
	ToBeRemoved              *bool                                `json:"toBeRemoved,omitempty"`
	Unit                     *string                              `json:"unit,omitempty"`
}

// AttributeDefinitionResponseDataType defines model for AttributeDefinitionResponse.DataType.
type AttributeDefinitionResponseDataType string

// AttributeDefinitionUpdateResponse defines model for AttributeDefinitionUpdateResponse.
type AttributeDefinitionUpdateResponse struct {
	NumberOfAlteredCategoriesWithColumnAttributes *int64 `json:"numberOfAlteredCategoriesWithColumnAttributes,omitempty"`
	NumberOfAlteredCategoriesWithMatrixAttributes *int64 `json:"numberOfAlteredCategoriesWithMatrixAttributes,omitempty"`
	NumberOfAlteredCategoriesWithSelectAttributes *int64 `json:"numberOfAlteredCategoriesWithSelectAttributes,omitempty"`
	NumberOfAlteredProductWithColumnAttributes    *int64 `json:"numberOfAlteredProductWithColumnAttributes,omitempty"`
	NumberOfAlteredProductWithMatrixAttributes    *int64 `json:"numberOfAlteredProductWithMatrixAttributes,omitempty"`
	NumberOfAlteredProductWithSelectAttributes    *int64 `json:"numberOfAlteredProductWithSelectAttributes,omitempty"`
}

// AttributeGroupRequest defines model for AttributeGroupRequest.
type AttributeGroupRequest struct {
	Name   string  `json:"name"`
	Number *string `json:"number,omitempty"`
}

// AttributeGroupResponse defines model for AttributeGroupResponse.
type AttributeGroupResponse struct {
	Id          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Number      *string `json:"number,omitempty"`
	OrderByName *bool   `json:"orderByName,omitempty"`
}

// AttributeValidationData defines model for AttributeValidationData.
type AttributeValidationData struct {
	Id     *string                        `json:"id,omitempty"`
	Issues *[]AttributeValidationIssue    `json:"issues,omitempty"`
	Status *AttributeValidationDataStatus `json:"status,omitempty"`
}

// AttributeValidationDataStatus defines model for AttributeValidationData.Status.
type AttributeValidationDataStatus string

// AttributeValidationIssue defines model for AttributeValidationIssue.
type AttributeValidationIssue struct {
	Code    *AttributeValidationIssueCode    `json:"code,omitempty"`
	Details *AttributeValidationIssueDetails `json:"details,omitempty"`
	Message *string                          `json:"message,omitempty"`
}

// AttributeValidationIssueCode defines model for AttributeValidationIssue.Code.
type AttributeValidationIssueCode string

// AttributeValidationIssueDetails defines model for AttributeValidationIssueDetails.
type AttributeValidationIssueDetails struct {
	DuplicatedSelectValue *DuplicatedSelectValue `json:"duplicatedSelectValue,omitempty"`
}

// AttributeValidationRequest defines model for AttributeValidationRequest.
type AttributeValidationRequest struct {
	Definitions *[]AttributeDefinitionIdDto `json:"definitions,omitempty"`
}

// AttributeValidationResponse defines model for AttributeValidationResponse.
type AttributeValidationResponse struct {
	Data *[]AttributeValidationData `json:"data,omitempty"`
}

// AttributeValueAll defines model for AttributeValueAll.
type AttributeValueAll struct {
	Column       *map[string]string            `json:"column,omitempty"`
	DefinitionId *string                       `json:"definitionId,omitempty"`
	Dictionary   *[]string                     `json:"dictionary,omitempty"`
	Matrix       *map[string]map[string]string `json:"matrix,omitempty"`
	Values       *[]string                     `json:"values,omitempty"`
}

// AttributeValueFull defines model for AttributeValueFull.
type AttributeValueFull struct {
	Column             *map[string]string            `json:"column,omitempty"`
	Copy               *bool                         `json:"copy,omitempty"`
	DefiningAttributes *bool                         `json:"definingAttributes,omitempty"`
	DefinitionId       string                        `json:"definitionId"`
	Dictionary         *[]string                     `json:"dictionary,omitempty"`
	Locked             *bool                         `json:"locked,omitempty"`
	Mandatory          *bool                         `json:"mandatory,omitempty"`
	Matrix             *map[string]map[string]string `json:"matrix,omitempty"`
	ReadOnly           *bool                         `json:"readOnly,omitempty"`
	Values             *[]string                     `json:"values,omitempty"`
}

// AttributeValueValues defines model for AttributeValueValues.
type AttributeValueValues struct {
	Values *[]string `json:"values,omitempty"`
}

// AttributesFilteringViewsDto defines model for AttributesFilteringViewsDto.
type AttributesFilteringViewsDto struct {
	DefinitionIds *[]string `json:"definitionIds,omitempty"`
	Type          string    `json:"type"`
}

// BundlesFilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type BundlesFilteringViewsDto = FilteringViewsDto

// CategoriesFilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type CategoriesFilteringViewsDto = FilteringViewsDto

// CategoryAttributeBaseMetadataResponse defines model for CategoryAttributeBaseMetadataResponse.
type CategoryAttributeBaseMetadataResponse struct {
	AttributeDefinitionId *string                       `json:"attributeDefinitionId,omitempty"`
	AttributeValue        *string                       `json:"attributeValue,omitempty"`
	CategoryId            *string                       `json:"categoryId,omitempty"`
	Column                *map[string]string            `json:"column,omitempty"`
	Dictionary            *[]string                     `json:"dictionary,omitempty"`
	Matrix                *map[string]map[string]string `json:"matrix,omitempty"`
}

// CategoryAttributeDto defines model for CategoryAttributeDto.
type CategoryAttributeDto struct {
	Column          *map[string]string            `json:"column,omitempty"`
	DefinitionId    string                        `json:"definitionId"`
	Dictionary      *[]string                     `json:"dictionary,omitempty"`
	IsCopyAttribute *bool                         `json:"isCopyAttribute,omitempty"`
	IsLocked        *bool                         `json:"isLocked,omitempty"`
	IsMandatory     *bool                         `json:"isMandatory,omitempty"`
	Matrix          *map[string]map[string]string `json:"matrix,omitempty"`
	Select          *map[string][]string          `json:"select,omitempty"`
	Value           *string                       `json:"value,omitempty"`
}

// CategoryAttributeMetadataResponse defines model for CategoryAttributeMetadataResponse.
type CategoryAttributeMetadataResponse struct {
	AssignedOn              *string                       `json:"assignedOn,omitempty"`
	AttributeDefinitionId   *string                       `json:"attributeDefinitionId,omitempty"`
	AttributeDefinitionName *string                       `json:"attributeDefinitionName,omitempty"`
	AttributeValue          *string                       `json:"attributeValue,omitempty"`
	Column                  *map[string]string            `json:"column,omitempty"`
	CopySetOn               *string                       `json:"copySetOn,omitempty"`
	Dictionary              *[]string                     `json:"dictionary,omitempty"`
	LockedSetOn             *string                       `json:"lockedSetOn,omitempty"`
	MandatorySetOn          *string                       `json:"mandatorySetOn,omitempty"`
	Matrix                  *map[string]map[string]string `json:"matrix,omitempty"`
	ReadOnly                *bool                         `json:"readOnly,omitempty"`
}

// CategoryAttributeRequest defines model for CategoryAttributeRequest.
type CategoryAttributeRequest struct {
	Value *string `json:"value,omitempty"`
}

// CategoryBasicResponse defines model for CategoryBasicResponse.
type CategoryBasicResponse struct {
	Assets      *[]string `json:"assets,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Number      *string   `json:"number,omitempty"`
	ParentId    *string   `json:"parentId,omitempty"`
	ReadOnly    *bool     `json:"readOnly,omitempty"`
}

// CategoryColumnAttributeRequest defines model for CategoryColumnAttributeRequest.
type CategoryColumnAttributeRequest struct {
	Column *map[string]string `json:"column,omitempty"`
}

// CategoryConnectionResponse defines model for CategoryConnectionResponse.
type CategoryConnectionResponse struct {
	LeftProduct   *ProductConnectionMetadata `json:"leftProduct,omitempty"`
	Relation      *RelationResponse          `json:"relation,omitempty"`
	RightCategory *CategoryBasicResponse     `json:"rightCategory,omitempty"`
}

// CategoryFilter defines model for CategoryFilter.
type CategoryFilter struct {
	Type   *CategoryFilterType `json:"type,omitempty"`
	Values *[]string           `json:"values,omitempty"`
}

// CategoryFilterType defines model for CategoryFilter.Type.
type CategoryFilterType string

// CategoryFilteringRequest defines model for CategoryFilteringRequest.
type CategoryFilteringRequest struct {
	Filters  *[]CategoryFilter `json:"filters,omitempty"`
	Page     *int32            `json:"page,omitempty"`
	PageSize *int32            `json:"pageSize,omitempty"`
}

// CategoryFullResponse defines model for CategoryFullResponse.
type CategoryFullResponse struct {
	Assets      *[]string                  `json:"assets,omitempty"`
	Attributes  *[]CategoryAttributeDto    `json:"attributes,omitempty"`
	Description *string                    `json:"description,omitempty"`
	Id          *string                    `json:"id,omitempty"`
	Name        *string                    `json:"name,omitempty"`
	Number      *string                    `json:"number,omitempty"`
	ParentId    *string                    `json:"parentId,omitempty"`
	Path        *string                    `json:"path,omitempty"`
	PathIds     *[]string                  `json:"pathIds,omitempty"`
	ReadOnly    *bool                      `json:"readOnly,omitempty"`
	State       *CategoryFullResponseState `json:"state,omitempty"`
}

// CategoryFullResponseState defines model for CategoryFullResponse.State.
type CategoryFullResponseState string

// CategoryMatrixAttributeRequest defines model for CategoryMatrixAttributeRequest.
type CategoryMatrixAttributeRequest struct {
	Matrix *map[string]map[string]string `json:"matrix,omitempty"`
}

// CategoryProductRequest defines model for CategoryProductRequest.
type CategoryProductRequest struct {
	ProductId *string `json:"productId,omitempty"`
}

// CategoryProductResponse defines model for CategoryProductResponse.
type CategoryProductResponse struct {
	ProductId   *string `json:"productId,omitempty"`
	ProductName *string `json:"productName,omitempty"`
}

// CategoryReferenceRequest defines model for CategoryReferenceRequest.
type CategoryReferenceRequest struct {
	// CategoryIds A set of category ids.
	CategoryIds []string `json:"categoryIds"`
}

// CategoryWithChildrenResponse defines model for CategoryWithChildrenResponse.
type CategoryWithChildrenResponse struct {
	Assets      *[]string                       `json:"assets,omitempty"`
	Children    *[]CategoryWithChildrenResponse `json:"children,omitempty"`
	Description *string                         `json:"description,omitempty"`
	Id          *string                         `json:"id,omitempty"`
	Name        *string                         `json:"name,omitempty"`
	Number      *string                         `json:"number,omitempty"`
	ReadOnly    *bool                           `json:"readOnly,omitempty"`
}

// ColumnAttributeDefinitionDto defines model for ColumnAttributeDefinitionDto.
type ColumnAttributeDefinitionDto struct {
	ExternalSource *bool                 `json:"externalSource,omitempty"`
	GroupId        *string               `json:"groupId,omitempty"`
	Internal       *bool                 `json:"internal,omitempty"`
	Name           string                `json:"name"`
	Number         *string               `json:"number,omitempty"`
	Restrictions   *ColumnRestrictionDto `json:"restrictions,omitempty"`
}

// ColumnAttributeValueAddRequest defines model for ColumnAttributeValueAddRequest.
type ColumnAttributeValueAddRequest struct {
	Column       *map[string]string `json:"column,omitempty"`
	DefinitionId *string            `json:"definitionId,omitempty"`
}

// ColumnAttributeValueDto defines model for ColumnAttributeValueDto.
type ColumnAttributeValueDto struct {
	Column *map[string]string `json:"column,omitempty"`
}

// ColumnRestrictionDto defines model for ColumnRestrictionDto.
type ColumnRestrictionDto struct {
	Column *ColumnRestrictionsDto `json:"column,omitempty"`
}

// ColumnRestrictionsDto defines model for ColumnRestrictionsDto.
type ColumnRestrictionsDto struct {
	Columns *[]IdentifiableValueDto `json:"columns,omitempty"`
}

// CompoundAttributeDefinitionRequest defines model for CompoundAttributeDefinitionRequest.
type CompoundAttributeDefinitionRequest struct {
	ExternalSource *bool                                `json:"externalSource,omitempty"`
	Format         *[]string                            `json:"format,omitempty"`
	GroupId        *string                              `json:"groupId,omitempty"`
	Internal       *bool                                `json:"internal,omitempty"`
	Name           string                               `json:"name"`
	Number         *string                              `json:"number,omitempty"`
	SubDefinitions *[]CompoundAttributeSubDefinitionDto `json:"subDefinitions,omitempty"`
}

// CompoundAttributeDefinitionResponse defines model for CompoundAttributeDefinitionResponse.
type CompoundAttributeDefinitionResponse struct {
	Description    *string                              `json:"description,omitempty"`
	ExternalSource *bool                                `json:"externalSource,omitempty"`
	Format         *[]string                            `json:"format,omitempty"`
	GroupId        *string                              `json:"groupId,omitempty"`
	Id             *string                              `json:"id,omitempty"`
	Internal       *bool                                `json:"internal,omitempty"`
	Name           string                               `json:"name"`
	Number         *string                              `json:"number,omitempty"`
	SubDefinitions *[]CompoundAttributeSubDefinitionDto `json:"subDefinitions,omitempty"`
	ToBeRemoved    *bool                                `json:"toBeRemoved,omitempty"`
}

// CompoundAttributeSubDefinitionDto defines model for CompoundAttributeSubDefinitionDto.
type CompoundAttributeSubDefinitionDto struct {
	Compound *bool   `json:"compound,omitempty"`
	Id       *string `json:"id,omitempty"`
}

// ConnectionDto defines model for ConnectionDto.
type ConnectionDto struct {
	Quantity   *float32 `json:"quantity,omitempty"`
	RelatedId  *string  `json:"relatedId,omitempty"`
	RelationId *string  `json:"relationId,omitempty"`
	Reverse    *bool    `json:"reverse,omitempty"`
}

// CopyProductRequest defines model for CopyProductRequest.
type CopyProductRequest struct {
	Id     *string `json:"id,omitempty"`
	Name   string  `json:"name"`
	Number *string `json:"number,omitempty"`
}

// CountableLong defines model for CountableLong.
type CountableLong struct {
	Count *int64 `json:"count,omitempty"`
}

// CreateCategoryRequest defines model for CreateCategoryRequest.
type CreateCategoryRequest struct {
	Name     string  `json:"name"`
	Number   *string `json:"number,omitempty"`
	ParentId *string `json:"parentId,omitempty"`
}

// CreateSimpleAttributeRequest defines model for CreateSimpleAttributeRequest.
type CreateSimpleAttributeRequest struct {
	DefinitionId *string   `json:"definitionId,omitempty"`
	Values       *[]string `json:"values,omitempty"`
}

// CursorWithViewsRequestDto defines model for CursorWithViewsRequestDto.
type CursorWithViewsRequestDto struct {
	Count  *int32                                  `json:"count,omitempty"`
	Cursor *string                                 `json:"cursor,omitempty"`
	Views  *[]CursorWithViewsRequestDto_Views_Item `json:"views,omitempty"`
}

// CursorWithViewsRequestDto_Views_Item defines model for CursorWithViewsRequestDto.views.Item.
type CursorWithViewsRequestDto_Views_Item struct {
	union json.RawMessage
}

// DeleteProductsAttributesBulkRequest defines model for DeleteProductsAttributesBulkRequest.
type DeleteProductsAttributesBulkRequest struct {
	AttributeDefinitionId *string  `json:"attributeDefinitionId,omitempty"`
	ProductIds            []string `json:"productIds"`
}

// DictionaryAttributeCreateRequest defines model for DictionaryAttributeCreateRequest.
type DictionaryAttributeCreateRequest struct {
	Number *string `json:"number,omitempty"`
	Value  string  `json:"value"`
}

// DictionaryAttributeDefinitionDto defines model for DictionaryAttributeDefinitionDto.
type DictionaryAttributeDefinitionDto struct {
	ExternalSource *bool   `json:"externalSource,omitempty"`
	GroupId        *string `json:"groupId,omitempty"`
	Internal       *bool   `json:"internal,omitempty"`
	Name           string  `json:"name"`
	Number         *string `json:"number,omitempty"`
}

// DictionaryAttributeDefinitionUpdate defines model for DictionaryAttributeDefinitionUpdate.
type DictionaryAttributeDefinitionUpdate struct {
	SelectedValuesLimit *PropertyUpdateInteger `json:"selectedValuesLimit,omitempty"`
}

// DictionaryAttributeFilterDto defines model for DictionaryAttributeFilterDto.
type DictionaryAttributeFilterDto struct {
	Type   *DictionaryAttributeFilterDtoType `json:"type,omitempty"`
	Values *[]string                         `json:"values,omitempty"`
}

// DictionaryAttributeFilterDtoType defines model for DictionaryAttributeFilterDto.Type.
type DictionaryAttributeFilterDtoType string

// DictionaryAttributeFilteringRequestDto defines model for DictionaryAttributeFilteringRequestDto.
type DictionaryAttributeFilteringRequestDto struct {
	Filters  *[]DictionaryAttributeFilterDto `json:"filters,omitempty"`
	Page     *int32                          `json:"page,omitempty"`
	PageSize *int32                          `json:"pageSize,omitempty"`
}

// DictionaryAttributeResponse defines model for DictionaryAttributeResponse.
type DictionaryAttributeResponse struct {
	CreatedDate  *int64            `json:"createdDate,omitempty"`
	DefinitionId *string           `json:"definitionId,omitempty"`
	Id           *string           `json:"id,omitempty"`
	LastUpdate   *int64            `json:"lastUpdate,omitempty"`
	Number       *string           `json:"number,omitempty"`
	Value        *MultiLanguageDto `json:"value,omitempty"`
}

// DictionaryAttributeUpdateRequest defines model for DictionaryAttributeUpdateRequest.
type DictionaryAttributeUpdateRequest struct {
	Number *PropertyUpdateString `json:"number,omitempty"`
	Value  *PropertyUpdateString `json:"value,omitempty"`
}

// DictionaryAttributeValueAddRequest defines model for DictionaryAttributeValueAddRequest.
type DictionaryAttributeValueAddRequest struct {
	DefinitionId *string `json:"definitionId,omitempty"`
}

// DictionaryValueFilterDto defines model for DictionaryValueFilterDto.
type DictionaryValueFilterDto struct {
	Type     *DictionaryValueFilterDtoType `json:"type,omitempty"`
	ValueIds *[]string                     `json:"valueIds,omitempty"`
}

// DictionaryValueFilterDtoType defines model for DictionaryValueFilterDto.Type.
type DictionaryValueFilterDtoType string

// DictionaryValueFilterResponse defines model for DictionaryValueFilterResponse.
type DictionaryValueFilterResponse struct {
	ChildValueId  *string `json:"childValueId,omitempty"`
	ParentValueId *string `json:"parentValueId,omitempty"`
}

// DictionaryValueFilteringRequest defines model for DictionaryValueFilteringRequest.
type DictionaryValueFilteringRequest struct {
	Filters  *[]DictionaryValueFilterDto `json:"filters,omitempty"`
	Page     *int32                      `json:"page,omitempty"`
	PageSize *int32                      `json:"pageSize,omitempty"`
}

// DuplicatedSelectValue defines model for DuplicatedSelectValue.
type DuplicatedSelectValue struct {
	Values *[]SelectValueIdDto `json:"values,omitempty"`
}

// ErrorDetails defines model for ErrorDetails.
type ErrorDetails struct {
	Field         *string `json:"field,omitempty"`
	Message       *string `json:"message,omitempty"`
	RejectedValue *string `json:"rejectedValue,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error        *string         `json:"error,omitempty"`
	ErrorDetails *[]ErrorDetails `json:"errorDetails,omitempty"`
	RequestId    *string         `json:"requestId,omitempty"`
	Status       *int32          `json:"status,omitempty"`
	Timestamp    *int64          `json:"timestamp,omitempty"`
}

// FilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type FilteringViewsDto struct {
	Type string `json:"type"`
}

// GridAssetFilterDto defines model for GridAssetFilterDto.
type GridAssetFilterDto struct {
	AssetCount *int32                 `json:"assetCount,omitempty"`
	AssetIds   *[]string              `json:"assetIds,omitempty"`
	LabelsIds  *[]string              `json:"labelsIds,omitempty"`
	Type       GridAssetFilterDtoType `json:"type"`
}

// GridAssetFilterDtoType defines model for GridAssetFilterDto.Type.
type GridAssetFilterDtoType string

// GridAttributeFilterDto defines model for GridAttributeFilterDto.
type GridAttributeFilterDto struct {
	AttributeDefinitionId *string                    `json:"attributeDefinitionId,omitempty"`
	Type                  GridAttributeFilterDtoType `json:"type"`
	Values                *[]string                  `json:"values,omitempty"`
}

// GridAttributeFilterDtoType defines model for GridAttributeFilterDto.Type.
type GridAttributeFilterDtoType string

// GridCategoryFilterDto defines model for GridCategoryFilterDto.
type GridCategoryFilterDto struct {
	CategoryId *string                   `json:"categoryId,omitempty"`
	Type       GridCategoryFilterDtoType `json:"type"`
}

// GridCategoryFilterDtoType defines model for GridCategoryFilterDto.Type.
type GridCategoryFilterDtoType string

// GridFilteringBaseRequestDto defines model for GridFilteringBaseRequestDto.
type GridFilteringBaseRequestDto struct {
	AssetFilters                  *[]GridAssetFilterDto                  `json:"assetFilters,omitempty"`
	AttributeFilters              *[]GridAttributeFilterDto              `json:"attributeFilters,omitempty"`
	BaseFilters                   *[]GridProductBaseFilterDto            `json:"baseFilters,omitempty"`
	CategoryFilters               *[]GridCategoryFilterDto               `json:"categoryFilters,omitempty"`
	LabelFilters                  *[]GridLabelFilterDto                  `json:"labelFilters,omitempty"`
	ProductCreateDateFilter       *[]GridProductCreateDateFilterDto      `json:"productCreateDateFilter,omitempty"`
	ProductLastUpdateFilter       *[]GridProductLastUpdateFilterDto      `json:"productLastUpdateFilter,omitempty"`
	PublishStateFilter            *GridPublishStateFilterDto             `json:"publishStateFilter,omitempty"`
	RelationsFilter               *GridRelationsFilterDto                `json:"relationsFilter,omitempty"`
	ScoreFilter                   *GridScoreFilterDto                    `json:"scoreFilter,omitempty"`
	ScoreRequirementResultFilters *[]GridScoreRequirementResultFilterDto `json:"scoreRequirementResultFilters,omitempty"`
	TypeFilter                    *GridProductTypeFilterDto              `json:"typeFilter,omitempty"`
}

// GridLabelFilterDto defines model for GridLabelFilterDto.
type GridLabelFilterDto struct {
	LabelsIds *[]string              `json:"labelsIds,omitempty"`
	Type      GridLabelFilterDtoType `json:"type"`
}

// GridLabelFilterDtoType defines model for GridLabelFilterDto.Type.
type GridLabelFilterDtoType string

// GridProductBaseFilterDto defines model for GridProductBaseFilterDto.
type GridProductBaseFilterDto struct {
	Type   GridProductBaseFilterDtoType `json:"type"`
	Values []string                     `json:"values"`
}

// GridProductBaseFilterDtoType defines model for GridProductBaseFilterDto.Type.
type GridProductBaseFilterDtoType string

// GridProductCreateDateFilterDto defines model for GridProductCreateDateFilterDto.
type GridProductCreateDateFilterDto struct {
	DateMilis int64                              `json:"dateMilis"`
	Type      GridProductCreateDateFilterDtoType `json:"type"`
}

// GridProductCreateDateFilterDtoType defines model for GridProductCreateDateFilterDto.Type.
type GridProductCreateDateFilterDtoType string

// GridProductLastUpdateFilterDto defines model for GridProductLastUpdateFilterDto.
type GridProductLastUpdateFilterDto struct {
	DateMilis int64                              `json:"dateMilis"`
	Type      GridProductLastUpdateFilterDtoType `json:"type"`
}

// GridProductLastUpdateFilterDtoType defines model for GridProductLastUpdateFilterDto.Type.
type GridProductLastUpdateFilterDtoType string

// GridProductTypeFilterDto defines model for GridProductTypeFilterDto.
type GridProductTypeFilterDto struct {
	GroupIds *[]string                    `json:"groupIds,omitempty"`
	Type     GridProductTypeFilterDtoType `json:"type"`
}

// GridProductTypeFilterDtoType defines model for GridProductTypeFilterDto.Type.
type GridProductTypeFilterDtoType string

// GridPublishStateFilterDto defines model for GridPublishStateFilterDto.
type GridPublishStateFilterDto struct {
	PublishStates *[]string                     `json:"publishStates,omitempty"`
	Type          GridPublishStateFilterDtoType `json:"type"`
}

// GridPublishStateFilterDtoType defines model for GridPublishStateFilterDto.Type.
type GridPublishStateFilterDtoType string

// GridRelationsFilterDto defines model for GridRelationsFilterDto.
type GridRelationsFilterDto struct {
	RelationId *string                    `json:"relationId,omitempty"`
	Reverse    *bool                      `json:"reverse,omitempty"`
	Type       GridRelationsFilterDtoType `json:"type"`
}

// GridRelationsFilterDtoType defines model for GridRelationsFilterDto.Type.
type GridRelationsFilterDtoType string

// GridScoreFilterDto defines model for GridScoreFilterDto.
type GridScoreFilterDto struct {
	Scores *[]float32             `json:"scores,omitempty"`
	Type   GridScoreFilterDtoType `json:"type"`
}

// GridScoreFilterDtoType defines model for GridScoreFilterDto.Type.
type GridScoreFilterDtoType string

// GridScoreRequirementResultFilterDto defines model for GridScoreRequirementResultFilterDto.
type GridScoreRequirementResultFilterDto struct {
	RequirementIds []string                                `json:"requirementIds"`
	Type           GridScoreRequirementResultFilterDtoType `json:"type"`
}

// GridScoreRequirementResultFilterDtoType defines model for GridScoreRequirementResultFilterDto.Type.
type GridScoreRequirementResultFilterDtoType string

// GroupedAttributeValuesDto defines model for GroupedAttributeValuesDto.
type GroupedAttributeValuesDto struct {
	Attributes *[]AttributeValueFull `json:"attributes,omitempty"`
	GroupId    *string               `json:"groupId,omitempty"`
}

// GroupedCategoryConnectionResponse defines model for GroupedCategoryConnectionResponse.
type GroupedCategoryConnectionResponse struct {
	Categories *[]CategoryBasicResponse `json:"categories,omitempty"`
	Relation   *RelationResponse        `json:"relation,omitempty"`
}

// IdentifiableValueDto defines model for IdentifiableValueDto.
type IdentifiableValueDto struct {
	Id    *string `json:"id,omitempty"`
	Value *string `json:"value,omitempty"`
}

// JobStatusResponse defines model for JobStatusResponse.
type JobStatusResponse struct {
	Count        *int64  `json:"count,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// LabelReferenceRequest defines model for LabelReferenceRequest.
type LabelReferenceRequest struct {
	LabelIds *[]string `json:"labelIds,omitempty"`
}

// LabelsFilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type LabelsFilteringViewsDto = FilteringViewsDto

// ListableAttributeDefinitionResponse defines model for ListableAttributeDefinitionResponse.
type ListableAttributeDefinitionResponse struct {
	Data *[]AttributeDefinitionResponse `json:"data,omitempty"`
}

// ListableAttributeGroupResponse defines model for ListableAttributeGroupResponse.
type ListableAttributeGroupResponse struct {
	Data *[]AttributeGroupResponse `json:"data,omitempty"`
}

// ListableAttributeValueAll defines model for ListableAttributeValueAll.
type ListableAttributeValueAll struct {
	Data *[]AttributeValueAll `json:"data,omitempty"`
}

// ListableCategoryAttributeBaseMetadataResponse defines model for ListableCategoryAttributeBaseMetadataResponse.
type ListableCategoryAttributeBaseMetadataResponse struct {
	Data *[]CategoryAttributeBaseMetadataResponse `json:"data,omitempty"`
}

// ListableCategoryAttributeMetadataResponse defines model for ListableCategoryAttributeMetadataResponse.
type ListableCategoryAttributeMetadataResponse struct {
	Data *[]CategoryAttributeMetadataResponse `json:"data,omitempty"`
}

// ListableCategoryBasicResponse defines model for ListableCategoryBasicResponse.
type ListableCategoryBasicResponse struct {
	Data *[]CategoryBasicResponse `json:"data,omitempty"`
}

// ListableCategoryConnectionResponse defines model for ListableCategoryConnectionResponse.
type ListableCategoryConnectionResponse struct {
	Data *[]CategoryConnectionResponse `json:"data,omitempty"`
}

// ListableCategoryFullResponse defines model for ListableCategoryFullResponse.
type ListableCategoryFullResponse struct {
	Data *[]CategoryFullResponse `json:"data,omitempty"`
}

// ListableCategoryProductResponse defines model for ListableCategoryProductResponse.
type ListableCategoryProductResponse struct {
	Data *[]CategoryProductResponse `json:"data,omitempty"`
}

// ListableCompoundAttributeDefinitionResponse defines model for ListableCompoundAttributeDefinitionResponse.
type ListableCompoundAttributeDefinitionResponse struct {
	Data *[]CompoundAttributeDefinitionResponse `json:"data,omitempty"`
}

// ListableDictionaryAttributeResponse defines model for ListableDictionaryAttributeResponse.
type ListableDictionaryAttributeResponse struct {
	Data *[]DictionaryAttributeResponse `json:"data,omitempty"`
}

// ListableDictionaryValueFilterResponse defines model for ListableDictionaryValueFilterResponse.
type ListableDictionaryValueFilterResponse struct {
	Data *[]DictionaryValueFilterResponse `json:"data,omitempty"`
}

// ListableGroupedAttributeValuesDto defines model for ListableGroupedAttributeValuesDto.
type ListableGroupedAttributeValuesDto struct {
	Data *[]GroupedAttributeValuesDto `json:"data,omitempty"`
}

// ListableGroupedCategoryConnectionResponse defines model for ListableGroupedCategoryConnectionResponse.
type ListableGroupedCategoryConnectionResponse struct {
	Data *[]GroupedCategoryConnectionResponse `json:"data,omitempty"`
}

// ListablePolicyDto defines model for ListablePolicyDto.
type ListablePolicyDto struct {
	Data *[]PolicyDto `json:"data,omitempty"`
}

// ListableProductAll defines model for ListableProductAll.
type ListableProductAll struct {
	Data *[]ProductAll `json:"data,omitempty"`
}

// ListableProductConnectionInfoResponse defines model for ListableProductConnectionInfoResponse.
type ListableProductConnectionInfoResponse struct {
	Data *[]ProductConnectionInfoResponse `json:"data,omitempty"`
}

// ListableProductConnectionProductResponse defines model for ListableProductConnectionProductResponse.
type ListableProductConnectionProductResponse struct {
	Data *[]ProductConnectionProductResponse `json:"data,omitempty"`
}

// ListableProductConnectionResponse defines model for ListableProductConnectionResponse.
type ListableProductConnectionResponse struct {
	Data *[]ProductConnectionResponse `json:"data,omitempty"`
}

// ListableProductTemplateResponse defines model for ListableProductTemplateResponse.
type ListableProductTemplateResponse struct {
	Data *[]ProductTemplateResponse `json:"data,omitempty"`
}

// ListableProductViewDto defines model for ListableProductViewDto.
type ListableProductViewDto struct {
	Data *[]ProductViewDto `json:"data,omitempty"`
}

// ListableProductWithAttributeValuesResponse defines model for ListableProductWithAttributeValuesResponse.
type ListableProductWithAttributeValuesResponse struct {
	Data *[]ProductWithAttributeValuesResponse `json:"data,omitempty"`
}

// ListableRelationResponse defines model for ListableRelationResponse.
type ListableRelationResponse struct {
	Data *[]RelationResponse `json:"data,omitempty"`
}

// ListableString defines model for ListableString.
type ListableString struct {
	Data *[]string `json:"data,omitempty"`
}

// ListableWithCursorProductViewDto defines model for ListableWithCursorProductViewDto.
type ListableWithCursorProductViewDto struct {
	Data       *[]ProductViewDto `json:"data,omitempty"`
	NextCursor *string           `json:"nextCursor,omitempty"`
}

// MatrixAttributeDefinitionDto defines model for MatrixAttributeDefinitionDto.
type MatrixAttributeDefinitionDto struct {
	ExternalSource *bool                 `json:"externalSource,omitempty"`
	GroupId        *string               `json:"groupId,omitempty"`
	Internal       *bool                 `json:"internal,omitempty"`
	Name           string                `json:"name"`
	Number         *string               `json:"number,omitempty"`
	Restrictions   *MatrixRestrictionDto `json:"restrictions,omitempty"`
}

// MatrixAttributeValueAddRequest defines model for MatrixAttributeValueAddRequest.
type MatrixAttributeValueAddRequest struct {
	DefinitionId *string                       `json:"definitionId,omitempty"`
	Matrix       *map[string]map[string]string `json:"matrix,omitempty"`
}

// MatrixAttributeValueDto defines model for MatrixAttributeValueDto.
type MatrixAttributeValueDto struct {
	// Matrix Attribute values for product.
	Matrix *map[string]map[string]string `json:"matrix,omitempty"`
}

// MatrixRestrictionDto defines model for MatrixRestrictionDto.
type MatrixRestrictionDto struct {
	Matrix *MatrixRestrictionsDto `json:"matrix,omitempty"`
}

// MatrixRestrictionsDto defines model for MatrixRestrictionsDto.
type MatrixRestrictionsDto struct {
	Columns *[]IdentifiableValueDto `json:"columns,omitempty"`
	Rows    *[]IdentifiableValueDto `json:"rows,omitempty"`
}

// MetadataFilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type MetadataFilteringViewsDto = FilteringViewsDto

// ModifyLabelInProductsRequestDto defines model for ModifyLabelInProductsRequestDto.
type ModifyLabelInProductsRequestDto struct {
	LabelId    string    `json:"labelId"`
	ProductIds *[]string `json:"productIds,omitempty"`
}

// MoveCategoryRequest defines model for MoveCategoryRequest.
type MoveCategoryRequest struct {
	ParentId *string `json:"parentId,omitempty"`
}

// MultiLanguageDto defines model for MultiLanguageDto.
type MultiLanguageDto struct {
	Value *map[string]string `json:"value,omitempty"`
}

// MultiLanguageListDto defines model for MultiLanguageListDto.
type MultiLanguageListDto struct {
	Value *map[string][]string `json:"value,omitempty"`
}

// PimVersion defines model for PimVersion.
type PimVersion struct {
	Version *string `json:"version,omitempty"`
}

// PolicyDto defines model for PolicyDto.
type PolicyDto struct {
	EntityId *string `json:"entityId,omitempty"`
	PolicyId *string `json:"policyId,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
}

// PolicyRequest defines model for PolicyRequest.
type PolicyRequest struct {
	PolicyId *string                `json:"policyId,omitempty"`
	ReadOnly *PolicyRequestReadOnly `json:"readOnly,omitempty"`
}

// PolicyRequestReadOnly defines model for PolicyRequest.ReadOnly.
type PolicyRequestReadOnly bool

// ProductAll defines model for ProductAll.
type ProductAll struct {
	Archived                                  *bool                                                `json:"archived,omitempty"`
	Assets                                    *[]string                                            `json:"assets,omitempty"`
	Attributes                                *[]AttributeValueFull                                `json:"attributes,omitempty"`
	Categories                                *[]string                                            `json:"categories,omitempty"`
	ContextStates                             *map[string]ProductAllContextStates                  `json:"contextStates,omitempty"`
	CreateDate                                *int64                                               `json:"createDate,omitempty"`
	DataSynced                                *bool                                                `json:"dataSynced,omitempty"`
	Description                               *string                                              `json:"description,omitempty"`
	Id                                        *string                                              `json:"id,omitempty"`
	Labels                                    *[]string                                            `json:"labels,omitempty"`
	LastUpdate                                *int64                                               `json:"lastUpdate,omitempty"`
	Name                                      *string                                              `json:"name,omitempty"`
	Number                                    *string                                              `json:"number,omitempty"`
	ProductBundles                            *[]ProductBundleDto                                  `json:"productBundles,omitempty"`
	ProductVariants                           *[]string                                            `json:"productVariants,omitempty"`
	Quantity                                  *float32                                             `json:"quantity,omitempty"`
	ReadOnly                                  *bool                                                `json:"readOnly,omitempty"`
	RelatedCategories                         *[]ConnectionDto                                     `json:"relatedCategories,omitempty"`
	RelatedProducts                           *[]ConnectionDto                                     `json:"relatedProducts,omitempty"`
	RelatedProductsRelationSortingOrderSource *ProductAllRelatedProductsRelationSortingOrderSource `json:"relatedProductsRelationSortingOrderSource,omitempty"`
	State                                     *ProductAllState                                     `json:"state,omitempty"`
	Type                                      *ProductAllType                                      `json:"type,omitempty"`
	VariantParentId                           *string                                              `json:"variantParentId,omitempty"`
}

// ProductAllContextStates defines model for ProductAll.ContextStates.
type ProductAllContextStates string

// ProductAllRelatedProductsRelationSortingOrderSource defines model for ProductAll.RelatedProductsRelationSortingOrderSource.
type ProductAllRelatedProductsRelationSortingOrderSource string

// ProductAllState defines model for ProductAll.State.
type ProductAllState string

// ProductAllType defines model for ProductAll.Type.
type ProductAllType string

// ProductArchiveStateRequest defines model for ProductArchiveStateRequest.
type ProductArchiveStateRequest struct {
	Ids *[]string `json:"ids,omitempty"`
}

// ProductAttributeViewDto defines model for ProductAttributeViewDto.
type ProductAttributeViewDto struct {
	Column                 *map[string]MultiLanguageDto `json:"column,omitempty"`
	ContextAwareDictionary *MultiLanguageListDto        `json:"contextAwareDictionary,omitempty"`
	ContextAwareSelect     *MultiLanguageListDto        `json:"contextAwareSelect,omitempty"`
	Copy                   *bool                        `json:"copy,omitempty"`
	DefiningAttributes     *bool                        `json:"definingAttributes,omitempty"`
	DefinitionId           *string                      `json:"definitionId,omitempty"`
	// Deprecated:
	Dictionary *[]string                               `json:"dictionary,omitempty"`
	Locked     *bool                                   `json:"locked,omitempty"`
	Mandatory  *bool                                   `json:"mandatory,omitempty"`
	Matrix     *map[string]map[string]MultiLanguageDto `json:"matrix,omitempty"`
	ReadOnly   *bool                                   `json:"readOnly,omitempty"`
	// Deprecated:
	Select *[]string         `json:"select,omitempty"`
	Value  *MultiLanguageDto `json:"value,omitempty"`
}

// ProductBundleDto defines model for ProductBundleDto.
type ProductBundleDto struct {
	ProductId *string  `json:"productId,omitempty"`
	Quantity  *float32 `json:"quantity,omitempty"`
}

// ProductBundleRequest defines model for ProductBundleRequest.
type ProductBundleRequest struct {
	Quantity *float32 `json:"quantity,omitempty"`
}

// ProductConnectionInfoResponse defines model for ProductConnectionInfoResponse.
type ProductConnectionInfoResponse struct {
	Directions *[]ProductConnectionInfoResponseDirections `json:"directions,omitempty"`
	Id         *string                                    `json:"id,omitempty"`
}

// ProductConnectionInfoResponseDirections defines model for ProductConnectionInfoResponse.Directions.
type ProductConnectionInfoResponseDirections string

// ProductConnectionMetadata defines model for ProductConnectionMetadata.
type ProductConnectionMetadata struct {
	Archived      *bool                                              `json:"archived,omitempty"`
	ContextStates *map[string]ProductConnectionMetadataContextStates `json:"contextStates,omitempty"`
	CreateDate    *int64                                             `json:"createDate,omitempty"`
	DataSynced    *bool                                              `json:"dataSynced,omitempty"`
	Description   *string                                            `json:"description,omitempty"`
	Id            *string                                            `json:"id,omitempty"`
	LastUpdate    *int64                                             `json:"lastUpdate,omitempty"`
	Name          *string                                            `json:"name,omitempty"`
	Number        *string                                            `json:"number,omitempty"`
	Quantity      *float32                                           `json:"quantity,omitempty"`
	State         *ProductConnectionMetadataState                    `json:"state,omitempty"`
}

// ProductConnectionMetadataContextStates defines model for ProductConnectionMetadata.ContextStates.
type ProductConnectionMetadataContextStates string

// ProductConnectionMetadataState defines model for ProductConnectionMetadata.State.
type ProductConnectionMetadataState string

// ProductConnectionProductResponse defines model for ProductConnectionProductResponse.
type ProductConnectionProductResponse struct {
	ProductId *string `json:"productId,omitempty"`
}

// ProductConnectionRequest defines model for ProductConnectionRequest.
type ProductConnectionRequest struct {
	Quantity   *float32 `json:"quantity,omitempty"`
	RelationId *string  `json:"relationId,omitempty"`
	To         *string  `json:"to,omitempty"`
}

// ProductConnectionResponse defines model for ProductConnectionResponse.
type ProductConnectionResponse struct {
	LeftProduct  *ProductConnectionMetadata `json:"leftProduct,omitempty"`
	Relation     *RelationResponse          `json:"relation,omitempty"`
	RightProduct *ProductConnectionMetadata `json:"rightProduct,omitempty"`
}

// ProductConnectionUpdateRequest defines model for ProductConnectionUpdateRequest.
type ProductConnectionUpdateRequest struct {
	Quantity *float32 `json:"quantity,omitempty"`
}

// ProductConnectionsRemovalRequest defines model for ProductConnectionsRemovalRequest.
type ProductConnectionsRemovalRequest struct {
	To *string `json:"to,omitempty"`
}

// ProductConnectionsRequest defines model for ProductConnectionsRequest.
type ProductConnectionsRequest struct {
	Quantity *float32 `json:"quantity,omitempty"`
	To       *string  `json:"to,omitempty"`
}

// ProductCreateRequest defines model for ProductCreateRequest.
type ProductCreateRequest struct {
	Assets                                    *[]string                                                      `json:"assets,omitempty"`
	Attributes                                *[]AttributeValueFull                                          `json:"attributes,omitempty"`
	Categories                                *[]string                                                      `json:"categories,omitempty"`
	Description                               *string                                                        `json:"description,omitempty"`
	Labels                                    *[]string                                                      `json:"labels,omitempty"`
	Name                                      string                                                         `json:"name"`
	Number                                    *string                                                        `json:"number,omitempty"`
	RelatedProductsRelationSortingOrderSource *ProductCreateRequestRelatedProductsRelationSortingOrderSource `json:"relatedProductsRelationSortingOrderSource,omitempty"`
	Type                                      *ProductCreateRequestType                                      `json:"type,omitempty"`
}

// ProductCreateRequestRelatedProductsRelationSortingOrderSource defines model for ProductCreateRequest.RelatedProductsRelationSortingOrderSource.
type ProductCreateRequestRelatedProductsRelationSortingOrderSource string

// ProductCreateRequestType defines model for ProductCreateRequest.Type.
type ProductCreateRequestType string

// ProductIdListViewsRequestDto defines model for ProductIdListViewsRequestDto.
type ProductIdListViewsRequestDto struct {
	Ids   []string                                   `json:"ids"`
	Views *[]ProductIdListViewsRequestDto_Views_Item `json:"views,omitempty"`
}

// ProductIdListViewsRequestDto_Views_Item defines model for ProductIdListViewsRequestDto.views.Item.
type ProductIdListViewsRequestDto_Views_Item struct {
	union json.RawMessage
}

// ProductIdViewsRequestDto defines model for ProductIdViewsRequestDto.
type ProductIdViewsRequestDto struct {
	Views *[]ProductIdViewsRequestDto_Views_Item `json:"views,omitempty"`
}

// ProductIdViewsRequestDto_Views_Item defines model for ProductIdViewsRequestDto.views.Item.
type ProductIdViewsRequestDto_Views_Item struct {
	union json.RawMessage
}

// ProductMetadataUpdateRequest defines model for ProductMetadataUpdateRequest.
type ProductMetadataUpdateRequest struct {
	Description *PropertyUpdateString `json:"description,omitempty"`
	Name        *PropertyUpdateString `json:"name,omitempty"`
	Number      *string               `json:"number,omitempty"`
}

// ProductMetadataViewDto defines model for ProductMetadataViewDto.
type ProductMetadataViewDto struct {
	Archived                                  *bool                                                            `json:"archived,omitempty"`
	ContextStates                             *map[string]ProductMetadataViewDtoContextStates                  `json:"contextStates,omitempty"`
	CreateDate                                *int64                                                           `json:"createDate,omitempty"`
	DataSynced                                *bool                                                            `json:"dataSynced,omitempty"`
	Description                               *MultiLanguageDto                                                `json:"description,omitempty"`
	LastUpdate                                *int64                                                           `json:"lastUpdate,omitempty"`
	Name                                      *MultiLanguageDto                                                `json:"name,omitempty"`
	Number                                    *string                                                          `json:"number,omitempty"`
	ReadOnly                                  *bool                                                            `json:"readOnly,omitempty"`
	RelatedProductsRelationSortingOrderSource *ProductMetadataViewDtoRelatedProductsRelationSortingOrderSource `json:"relatedProductsRelationSortingOrderSource,omitempty"`
	State                                     *ProductMetadataViewDtoState                                     `json:"state,omitempty"`
	Type                                      *ProductMetadataViewDtoType                                      `json:"type,omitempty"`
	VariantParentId                           *string                                                          `json:"variantParentId,omitempty"`
}

// ProductMetadataViewDtoContextStates defines model for ProductMetadataViewDto.ContextStates.
type ProductMetadataViewDtoContextStates string

// ProductMetadataViewDtoRelatedProductsRelationSortingOrderSource defines model for ProductMetadataViewDto.RelatedProductsRelationSortingOrderSource.
type ProductMetadataViewDtoRelatedProductsRelationSortingOrderSource string

// ProductMetadataViewDtoState defines model for ProductMetadataViewDto.State.
type ProductMetadataViewDtoState string

// ProductMetadataViewDtoType defines model for ProductMetadataViewDto.Type.
type ProductMetadataViewDtoType string

// ProductNumberListViewsRequestDto defines model for ProductNumberListViewsRequestDto.
type ProductNumberListViewsRequestDto struct {
	Numbers  *[]string                                      `json:"numbers,omitempty"`
	Page     *int32                                         `json:"page,omitempty"`
	PageSize *int32                                         `json:"pageSize,omitempty"`
	Views    *[]ProductNumberListViewsRequestDto_Views_Item `json:"views,omitempty"`
}

// ProductNumberListViewsRequestDto_Views_Item defines model for ProductNumberListViewsRequestDto.views.Item.
type ProductNumberListViewsRequestDto_Views_Item struct {
	union json.RawMessage
}

// ProductTemplateRequest defines model for ProductTemplateRequest.
type ProductTemplateRequest struct {
	Name string `json:"name"`
}

// ProductTemplateResponse defines model for ProductTemplateResponse.
type ProductTemplateResponse struct {
	Name      string  `json:"name"`
	ProductId *string `json:"productId,omitempty"`
}

// ProductValidationIssueDto defines model for ProductValidationIssueDto.
type ProductValidationIssueDto struct {
	CategoryId                   *string                              `json:"categoryId,omitempty"`
	DefinitionId                 *string                              `json:"definitionId,omitempty"`
	Message                      *string                              `json:"message,omitempty"`
	MissingAttributeDefinitionId *string                              `json:"missingAttributeDefinitionId,omitempty"`
	StatusCode                   *ProductValidationIssueDtoStatusCode `json:"statusCode,omitempty"`
}

// ProductValidationIssueDtoStatusCode defines model for ProductValidationIssueDto.StatusCode.
type ProductValidationIssueDtoStatusCode string

// ProductValidationIssueResponse defines model for ProductValidationIssueResponse.
type ProductValidationIssueResponse struct {
	Id     *string                               `json:"id,omitempty"`
	Issues *[]ProductValidationIssueDto          `json:"issues,omitempty"`
	Status *ProductValidationIssueResponseStatus `json:"status,omitempty"`
}

// ProductValidationIssueResponseStatus defines model for ProductValidationIssueResponse.Status.
type ProductValidationIssueResponseStatus string

// ProductValidationRequest defines model for ProductValidationRequest.
type ProductValidationRequest struct {
	Attributes *[]ValidableAttribute `json:"attributes,omitempty"`
	Id         *string               `json:"id,omitempty"`
}

// ProductVariantAttributeDto defines model for ProductVariantAttributeDto.
type ProductVariantAttributeDto struct {
	Copy               *bool `json:"copy,omitempty"`
	DefiningAttributes *bool `json:"definingAttributes,omitempty"`
	Locked             *bool `json:"locked,omitempty"`
	Mandatory          *bool `json:"mandatory,omitempty"`
}

// ProductViewDto defines model for ProductViewDto.
type ProductViewDto struct {
	Assets            *[]string                  `json:"assets,omitempty"`
	Attributes        *[]ProductAttributeViewDto `json:"attributes,omitempty"`
	Categories        *[]string                  `json:"categories,omitempty"`
	Id                *string                    `json:"id,omitempty"`
	Labels            *[]string                  `json:"labels,omitempty"`
	Metadata          *ProductMetadataViewDto    `json:"metadata,omitempty"`
	ProductBundles    *[]ProductBundleDto        `json:"productBundles,omitempty"`
	ProductVariants   *[]string                  `json:"productVariants,omitempty"`
	RelatedCategories *[]ConnectionDto           `json:"relatedCategories,omitempty"`
	RelatedProducts   *[]ConnectionDto           `json:"relatedProducts,omitempty"`
}

// ProductWithAttributeValuesResponse defines model for ProductWithAttributeValuesResponse.
type ProductWithAttributeValuesResponse struct {
	AttributeValues *[]string `json:"attributeValues,omitempty"`
	ProductName     *string   `json:"productName,omitempty"`
}

// PropertyUpdateInteger defines model for PropertyUpdateInteger.
type PropertyUpdateInteger struct {
	Value *int32 `json:"value,omitempty"`
}

// PropertyUpdateString defines model for PropertyUpdateString.
type PropertyUpdateString struct {
	Value *string `json:"value,omitempty"`
}

// RangeRestrictionsDto defines model for RangeRestrictionsDto.
type RangeRestrictionsDto struct {
	Max  *string `json:"max,omitempty"`
	Min  *string `json:"min,omitempty"`
	Step *string `json:"step,omitempty"`
}

// RelatedCategoriesFilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type RelatedCategoriesFilteringViewsDto = FilteringViewsDto

// RelatedProductsFilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type RelatedProductsFilteringViewsDto = FilteringViewsDto

// RelationFilter defines model for RelationFilter.
type RelationFilter struct {
	Type   *RelationFilterType `json:"type,omitempty"`
	Values *[]string           `json:"values,omitempty"`
}

// RelationFilterType defines model for RelationFilter.Type.
type RelationFilterType string

// RelationFilteringRequest defines model for RelationFilteringRequest.
type RelationFilteringRequest struct {
	Filters  *[]RelationFilter `json:"filters,omitempty"`
	Page     *int32            `json:"page,omitempty"`
	PageSize *int32            `json:"pageSize,omitempty"`
}

// RelationRequest defines model for RelationRequest.
type RelationRequest struct {
	Description     *string `json:"description,omitempty"`
	Direction       *string `json:"direction,omitempty"`
	Name            string  `json:"name"`
	Number          *string `json:"number,omitempty"`
	QuantityEnabled *bool   `json:"quantityEnabled,omitempty"`
	ReverseName     *string `json:"reverseName,omitempty"`
}

// RelationResponse defines model for RelationResponse.
type RelationResponse struct {
	Description     *string `json:"description,omitempty"`
	Direction       *string `json:"direction,omitempty"`
	Id              *string `json:"id,omitempty"`
	Name            *string `json:"name,omitempty"`
	Number          *string `json:"number,omitempty"`
	Order           *int32  `json:"order,omitempty"`
	QuantityEnabled *bool   `json:"quantityEnabled,omitempty"`
	ReverseName     *string `json:"reverseName,omitempty"`
}

// RenameAttributeGroupRequest defines model for RenameAttributeGroupRequest.
type RenameAttributeGroupRequest struct {
	Name string `json:"name"`
}

// RestrictionsDto defines model for RestrictionsDto.
type RestrictionsDto struct {
	Column *ColumnRestrictionsDto `json:"column,omitempty"`
	Enum   *SelectRestrictionsDto `json:"enum,omitempty"`
	Matrix *MatrixRestrictionsDto `json:"matrix,omitempty"`
	Range  *RangeRestrictionsDto  `json:"range,omitempty"`
	Text   *TextRestrictionsDto   `json:"text,omitempty"`
}

// SaveProductsAttributesBulkRequest defines model for SaveProductsAttributesBulkRequest.
type SaveProductsAttributesBulkRequest struct {
	AttributeDefinitionId string    `json:"attributeDefinitionId"`
	AttributeValues       *[]string `json:"attributeValues,omitempty"`
	ProductIds            []string  `json:"productIds"`
}

// SaveProductsAttributesByIdsRequest defines model for SaveProductsAttributesByIdsRequest.
type SaveProductsAttributesByIdsRequest struct {
	AttributeDefinitionId string    `json:"attributeDefinitionId"`
	AttributeValues       *[]string `json:"attributeValues,omitempty"`
	ProductIds            *[]string `json:"productIds,omitempty"`
}

// SelectAttributeValueDto defines model for SelectAttributeValueDto.
type SelectAttributeValueDto struct {
	Metadata *string `json:"metadata,omitempty"`
	Number   *string `json:"number,omitempty"`
	Value    string  `json:"value"`
	ValueId  *string `json:"valueId,omitempty"`
}

// SelectRestrictionsDto defines model for SelectRestrictionsDto.
type SelectRestrictionsDto struct {
	Type   *string                    `json:"type,omitempty"`
	Values *[]SelectAttributeValueDto `json:"values,omitempty"`
}

// SelectValueIdDto defines model for SelectValueIdDto.
type SelectValueIdDto struct {
	SelectValueId *string `json:"selectValueId,omitempty"`
}

// SetCategoryDictionaryAttributeValuesRequest defines model for SetCategoryDictionaryAttributeValuesRequest.
type SetCategoryDictionaryAttributeValuesRequest struct {
	ValueIds *[]string `json:"valueIds,omitempty"`
}

// SetDictionaryValuesRequest defines model for SetDictionaryValuesRequest.
type SetDictionaryValuesRequest struct {
	ValueIds *[]string `json:"valueIds,omitempty"`
}

// SetProductAssets defines model for SetProductAssets.
type SetProductAssets struct {
	Assets *[]string `json:"assets,omitempty"`
}

// SimpleAttributeDefinitionRequest defines model for SimpleAttributeDefinitionRequest.
type SimpleAttributeDefinitionRequest struct {
	Charset        *string                                   `json:"charset,omitempty"`
	ContentType    *string                                   `json:"contentType,omitempty"`
	DataType       *SimpleAttributeDefinitionRequestDataType `json:"dataType,omitempty"`
	ExternalSource *bool                                     `json:"externalSource,omitempty"`
	GroupId        *string                                   `json:"groupId,omitempty"`
	Internal       *bool                                     `json:"internal,omitempty"`
	Name           string                                    `json:"name"`
	Number         *string                                   `json:"number,omitempty"`
	Restrictions   *RestrictionsDto                          `json:"restrictions,omitempty"`
	Unit           *string                                   `json:"unit,omitempty"`
}

// SimpleAttributeDefinitionRequestDataType defines model for SimpleAttributeDefinitionRequest.DataType.
type SimpleAttributeDefinitionRequestDataType string

// TextRestrictionsDto defines model for TextRestrictionsDto.
type TextRestrictionsDto struct {
	MaxLength   *int32  `json:"maxLength,omitempty"`
	Pattern     *string `json:"pattern,omitempty"`
	Whitespaces *bool   `json:"whitespaces,omitempty"`
}

// UpdateAttributeDto defines model for UpdateAttributeDto.
type UpdateAttributeDto struct {
	DefinitionId       *string   `json:"definitionId,omitempty"`
	DictionaryValueIds *[]string `json:"dictionaryValueIds,omitempty"`
	SelectValueIds     *[]string `json:"selectValueIds,omitempty"`
	Value              *string   `json:"value,omitempty"`
}

// UpdateAttributeGroupNumberRequest defines model for UpdateAttributeGroupNumberRequest.
type UpdateAttributeGroupNumberRequest struct {
	Number string `json:"number"`
}

// UpdateCategoryAttributeRequest defines model for UpdateCategoryAttributeRequest.
type UpdateCategoryAttributeRequest struct {
	AttributeValue *PropertyUpdateString `json:"attributeValue,omitempty"`
	CopyAttribute  *bool                 `json:"copyAttribute,omitempty"`
	Locked         *bool                 `json:"locked,omitempty"`
	Mandatory      *bool                 `json:"mandatory,omitempty"`
}

// UpdateCategoryColumnAttributeRequest defines model for UpdateCategoryColumnAttributeRequest.
type UpdateCategoryColumnAttributeRequest struct {
	Column *map[string]string `json:"column,omitempty"`
	// Deprecated:
	CopyAttribute *bool `json:"copyAttribute,omitempty"`
	// Deprecated:
	Locked *bool `json:"locked,omitempty"`
	// Deprecated:
	Mandatory *bool `json:"mandatory,omitempty"`
}

// UpdateCategoryMatrixAttributeRequest defines model for UpdateCategoryMatrixAttributeRequest.
type UpdateCategoryMatrixAttributeRequest struct {
	// Deprecated:
	CopyAttribute *bool `json:"copyAttribute,omitempty"`
	// Deprecated:
	Locked *bool `json:"locked,omitempty"`
	// Deprecated:
	Mandatory *bool                         `json:"mandatory,omitempty"`
	Matrix    *map[string]map[string]string `json:"matrix,omitempty"`
}

// UpdateCategoryRequest defines model for UpdateCategoryRequest.
type UpdateCategoryRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Number      *string `json:"number,omitempty"`
}

// UpdateProductStateRequest defines model for UpdateProductStateRequest.
type UpdateProductStateRequest struct {
	Action *UpdateProductStateRequestAction `json:"action,omitempty"`
	Ids    *[]string                        `json:"ids,omitempty"`
}

// UpdateProductStateRequestAction defines model for UpdateProductStateRequest.Action.
type UpdateProductStateRequestAction string

// UpdateProductStateResponse defines model for UpdateProductStateResponse.
type UpdateProductStateResponse struct {
	Data *map[string]int64 `json:"data,omitempty"`
}

// ValidableAttribute defines model for ValidableAttribute.
type ValidableAttribute struct {
	DefinitionId       *string   `json:"definitionId,omitempty"`
	DictionaryValueIds *[]string `json:"dictionaryValueIds,omitempty"`
	SelectValueIds     *[]string `json:"selectValueIds,omitempty"`
	Values             *[]string `json:"values,omitempty"`
}

// ValueValidationIssue defines model for ValueValidationIssue.
type ValueValidationIssue struct {
	Message    *string                         `json:"message,omitempty"`
	StatusCode *ValueValidationIssueStatusCode `json:"statusCode,omitempty"`
}

// ValueValidationIssueStatusCode defines model for ValueValidationIssue.StatusCode.
type ValueValidationIssueStatusCode string

// ValueValidationRequest defines model for ValueValidationRequest.
type ValueValidationRequest struct {
	DefinitionId *string `json:"definitionId,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// ValueValidationResponse defines model for ValueValidationResponse.
type ValueValidationResponse struct {
	Issues *[]ValueValidationIssue        `json:"issues,omitempty"`
	Status *ValueValidationResponseStatus `json:"status,omitempty"`
}

// ValueValidationResponseStatus defines model for ValueValidationResponse.Status.
type ValueValidationResponseStatus string

// VariantsFilteringViewsDto <p>Views mapping</p><table><tr><th>View type</th><th>View dto</th></tr><tr><td>ASSETS</td><td>AssetsFilteringViewsDto</td></tr><tr><td>ATTRIBUTES</td><td>AttributesFilteringViewsDto</td></tr><tr><td>METADATA</td><td>MetadataFilteringViewsDto</td></tr><tr><td>CATEGORIES</td><td>CategoriesFilteringViewsDto</td></tr><tr><td>BUNDLES</td><td>BundlesFilteringViewsDto</td></tr><tr><td>LABELS</td><td>LabelsFilteringViewsDto</td></tr><tr><td>VARIANTS</td><td>VariantsFilteringViewsDto</td></tr><tr><td>RELATED_PRODUCTS</td><td>RelatedProductsFilteringViewsDto</td></tr><tr><td>RELATED_CATEGORIES</td><td>RelatedCategoriesFilteringViewsDto</td></tr></table>
type VariantsFilteringViewsDto = FilteringViewsDto

// FindAttributeGroupsParams defines parameters for FindAttributeGroups.
type FindAttributeGroupsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateAttributeGroupParams defines parameters for CreateAttributeGroup.
type CreateAttributeGroupParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// FindDefinitionsWithoutGroupParams defines parameters for FindDefinitionsWithoutGroup.
type FindDefinitionsWithoutGroupParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// SetOtherDefinitionsOrderStrategyParams defines parameters for SetOtherDefinitionsOrderStrategy.
type SetOtherDefinitionsOrderStrategyParams struct {
	OrderByName bool `form:"orderByName" json:"orderByName"`
}

// MoveAttributeDefinitionInGroupParams defines parameters for MoveAttributeDefinitionInGroup.
type MoveAttributeDefinitionInGroupParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// GetAttributeRootGroupParams defines parameters for GetAttributeRootGroup.
type GetAttributeRootGroupParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// MoveGroupParams defines parameters for MoveGroup.
type MoveGroupParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// FindDefinitionsInGroupParams defines parameters for FindDefinitionsInGroup.
type FindDefinitionsInGroupParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// SetDefinitionsOrderStrategyInGroupParams defines parameters for SetDefinitionsOrderStrategyInGroup.
type SetDefinitionsOrderStrategyInGroupParams struct {
	OrderByName bool `form:"orderByName" json:"orderByName"`
}

// MoveAttributeDefinitionParams defines parameters for MoveAttributeDefinition.
type MoveAttributeDefinitionParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// RenameParams defines parameters for Rename.
type RenameParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// ListCatalogsParams defines parameters for ListCatalogs.
type ListCatalogsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateCategoryParams defines parameters for CreateCategory.
type CreateCategoryParams struct {
	Validation CreateCategoryParamsValidation `form:"validation" json:"validation"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateCategoryParamsValidation defines parameters for CreateCategory.
type CreateCategoryParamsValidation string

// GetCategoriesByAssetIdParams defines parameters for GetCategoriesByAssetId.
type GetCategoriesByAssetIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// FindByCategoryLevelAttributesParams defines parameters for FindByCategoryLevelAttributes.
type FindByCategoryLevelAttributesParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// ListParams defines parameters for List.
type ListParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`
	Value        *string `form:"value,omitempty" json:"value,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetFilteredNodesParams defines parameters for GetFilteredNodes.
type GetFilteredNodesParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetNodeParams defines parameters for GetNode.
type GetNodeParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateCatalogNodeParams defines parameters for UpdateCatalogNode.
type UpdateCatalogNodeParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// MoveCategoryAssetParams defines parameters for MoveCategoryAsset.
type MoveCategoryAssetParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// ListAttributesAttachedToGivenNodeParams defines parameters for ListAttributesAttachedToGivenNode.
type ListAttributesAttachedToGivenNodeParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateNodeAttributeValueParams defines parameters for UpdateNodeAttributeValue.
type UpdateNodeAttributeValueParams struct {
	ForceCla *bool `form:"forceCla,omitempty" json:"forceCla,omitempty"`
}

// CreateCatalogNodeAttributeParams defines parameters for CreateCatalogNodeAttribute.
type CreateCatalogNodeAttributeParams struct {
	ForceCla *bool `form:"forceCla,omitempty" json:"forceCla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateCatalogNodeAttributeColumnParams defines parameters for CreateCatalogNodeAttributeColumn.
type CreateCatalogNodeAttributeColumnParams struct {
	ForceCla *bool `form:"forceCla,omitempty" json:"forceCla,omitempty"`
}

// UpdateNodeAttributeColumnValueParams defines parameters for UpdateNodeAttributeColumnValue.
type UpdateNodeAttributeColumnValueParams struct {
	ForceCla *bool `form:"forceCla,omitempty" json:"forceCla,omitempty"`
}

// CreateCatalogNodeAttributeCompoundParams defines parameters for CreateCatalogNodeAttributeCompound.
type CreateCatalogNodeAttributeCompoundParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateCatalogNodeAttributeDictionaryParams defines parameters for CreateCatalogNodeAttributeDictionary.
type CreateCatalogNodeAttributeDictionaryParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// SetDictionaryAttributeValuesForCategoryParams defines parameters for SetDictionaryAttributeValuesForCategory.
type SetDictionaryAttributeValuesForCategoryParams struct {
	ForceCla *bool `form:"forceCla,omitempty" json:"forceCla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateCatalogNodeAttributeMatrixParams defines parameters for CreateCatalogNodeAttributeMatrix.
type CreateCatalogNodeAttributeMatrixParams struct {
	ForceCla *bool `form:"forceCla,omitempty" json:"forceCla,omitempty"`
}

// UpdateNodeAttributeMatrixValueParams defines parameters for UpdateNodeAttributeMatrixValue.
type UpdateNodeAttributeMatrixValueParams struct {
	ForceCla *bool `form:"forceCla,omitempty" json:"forceCla,omitempty"`
}

// GetCatalogNodeChildrenParams defines parameters for GetCatalogNodeChildren.
type GetCatalogNodeChildrenParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateCatalogNodeOrderParams defines parameters for UpdateCatalogNodeOrder.
type UpdateCatalogNodeOrderParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// GetPathToNodeParams defines parameters for GetPathToNode.
type GetPathToNodeParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`
}

// GetByCategoryNodeIdParams defines parameters for GetByCategoryNodeId.
type GetByCategoryNodeIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType defines parameters for DeletePolicyByCategoryNodeAndPolicyId.
type DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType string

// GetCategoryProductsParams defines parameters for GetCategoryProducts.
type GetCategoryProductsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetPolicyByCategoryNodeIdParams defines parameters for GetPolicyByCategoryNodeId.
type GetPolicyByCategoryNodeIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType defines parameters for DeletePolicyFromProductsForCategoryNodeId.
type DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType string

// GetCategoryTreeParams defines parameters for GetCategoryTree.
type GetCategoryTreeParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetPoliciesByCategoryIdParams defines parameters for GetPoliciesByCategoryId.
type GetPoliciesByCategoryIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeletePolicyByCategoryAndPolicyIdParamsPolicyType defines parameters for DeletePolicyByCategoryAndPolicyId.
type DeletePolicyByCategoryAndPolicyIdParamsPolicyType string

// GetPolicyByCategoryIdParams defines parameters for GetPolicyByCategoryId.
type GetPolicyByCategoryIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeletePolicyFromProductsForCategoryIdParamsPolicyType defines parameters for DeletePolicyFromProductsForCategoryId.
type DeletePolicyFromProductsForCategoryIdParamsPolicyType string

// FindAllCompoundDefinitionsParams defines parameters for FindAllCompoundDefinitions.
type FindAllCompoundDefinitionsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateCompoundDefinitionParams defines parameters for CreateCompoundDefinition.
type CreateCompoundDefinitionParams struct {
	Validation CreateCompoundDefinitionParamsValidation `form:"validation" json:"validation"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateCompoundDefinitionParamsValidation defines parameters for CreateCompoundDefinition.
type CreateCompoundDefinitionParamsValidation string

// FindBySubDefinitionsParams defines parameters for FindBySubDefinitions.
type FindBySubDefinitionsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetCompoundDefinitionParams defines parameters for GetCompoundDefinition.
type GetCompoundDefinitionParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateCompoundDefinitionParams defines parameters for UpdateCompoundDefinition.
type UpdateCompoundDefinitionParams struct {
	Validation UpdateCompoundDefinitionParamsValidation `form:"validation" json:"validation"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateCompoundDefinitionParamsValidation defines parameters for UpdateCompoundDefinition.
type UpdateCompoundDefinitionParamsValidation string

// FindAllAttributeDefinitionsParams defines parameters for FindAllAttributeDefinitions.
type FindAllAttributeDefinitionsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateAttributeDefinitionParams defines parameters for CreateAttributeDefinition.
type CreateAttributeDefinitionParams struct {
	Validation *CreateAttributeDefinitionParamsValidation `form:"validation,omitempty" json:"validation,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateAttributeDefinitionParamsValidation defines parameters for CreateAttributeDefinition.
type CreateAttributeDefinitionParamsValidation string

// CreateColumnDefinitionParams defines parameters for CreateColumnDefinition.
type CreateColumnDefinitionParams struct {
	Validation CreateColumnDefinitionParamsValidation `form:"validation" json:"validation"`
}

// CreateColumnDefinitionParamsValidation defines parameters for CreateColumnDefinition.
type CreateColumnDefinitionParamsValidation string

// UpdateColumnDefinitionParams defines parameters for UpdateColumnDefinition.
type UpdateColumnDefinitionParams struct {
	Validation UpdateColumnDefinitionParamsValidation `form:"validation" json:"validation"`
}

// UpdateColumnDefinitionParamsValidation defines parameters for UpdateColumnDefinition.
type UpdateColumnDefinitionParamsValidation string

// UpdateColumnDefinitionDryRunParams defines parameters for UpdateColumnDefinitionDryRun.
type UpdateColumnDefinitionDryRunParams struct {
	Validation UpdateColumnDefinitionDryRunParamsValidation `form:"validation" json:"validation"`
}

// UpdateColumnDefinitionDryRunParamsValidation defines parameters for UpdateColumnDefinitionDryRun.
type UpdateColumnDefinitionDryRunParamsValidation string

// CreateDictionaryDefinitionParams defines parameters for CreateDictionaryDefinition.
type CreateDictionaryDefinitionParams struct {
	Validation CreateDictionaryDefinitionParamsValidation `form:"validation" json:"validation"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// CreateDictionaryDefinitionParamsValidation defines parameters for CreateDictionaryDefinition.
type CreateDictionaryDefinitionParamsValidation string

// UpdateDictionaryDefinitionParams defines parameters for UpdateDictionaryDefinition.
type UpdateDictionaryDefinitionParams struct {
	Validation UpdateDictionaryDefinitionParamsValidation `form:"validation" json:"validation"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// UpdateDictionaryDefinitionParamsValidation defines parameters for UpdateDictionaryDefinition.
type UpdateDictionaryDefinitionParamsValidation string

// CreateDictionaryAttributeParams defines parameters for CreateDictionaryAttribute.
type CreateDictionaryAttributeParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// CountDictionaryAttributesParams defines parameters for CountDictionaryAttributes.
type CountDictionaryAttributesParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// FindFilteredDictionaryAttributesParams defines parameters for FindFilteredDictionaryAttributes.
type FindFilteredDictionaryAttributesParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// FindFilteredDictionaryDefinitionsParams defines parameters for FindFilteredDictionaryDefinitions.
type FindFilteredDictionaryDefinitionsParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetDictionaryAttributeParams defines parameters for GetDictionaryAttribute.
type GetDictionaryAttributeParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateDictionaryAttributeParams defines parameters for UpdateDictionaryAttribute.
type UpdateDictionaryAttributeParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// FindFilteredAttributeDefinitionsParams defines parameters for FindFilteredAttributeDefinitions.
type FindFilteredAttributeDefinitionsParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateMatrixDefinitionParams defines parameters for CreateMatrixDefinition.
type CreateMatrixDefinitionParams struct {
	Validation CreateMatrixDefinitionParamsValidation `form:"validation" json:"validation"`
}

// CreateMatrixDefinitionParamsValidation defines parameters for CreateMatrixDefinition.
type CreateMatrixDefinitionParamsValidation string

// UpdateMatrixDefinitionParams defines parameters for UpdateMatrixDefinition.
type UpdateMatrixDefinitionParams struct {
	Validation UpdateMatrixDefinitionParamsValidation `form:"validation" json:"validation"`
}

// UpdateMatrixDefinitionParamsValidation defines parameters for UpdateMatrixDefinition.
type UpdateMatrixDefinitionParamsValidation string

// UpdateMatrixDefinitionDryRunParams defines parameters for UpdateMatrixDefinitionDryRun.
type UpdateMatrixDefinitionDryRunParams struct {
	Validation UpdateMatrixDefinitionDryRunParamsValidation `form:"validation" json:"validation"`
}

// UpdateMatrixDefinitionDryRunParamsValidation defines parameters for UpdateMatrixDefinitionDryRun.
type UpdateMatrixDefinitionDryRunParamsValidation string

// FindSimpleParams defines parameters for FindSimple.
type FindSimpleParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetAttributeDefinitionParams defines parameters for GetAttributeDefinition.
type GetAttributeDefinitionParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateMetadataParams defines parameters for UpdateMetadata.
type UpdateMetadataParams struct {
	Validation *UpdateMetadataParamsValidation `form:"validation,omitempty" json:"validation,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateMetadataParamsValidation defines parameters for UpdateMetadata.
type UpdateMetadataParamsValidation string

// UpdateAttributeDefinitionParams defines parameters for UpdateAttributeDefinition.
type UpdateAttributeDefinitionParams struct {
	Validation *UpdateAttributeDefinitionParamsValidation `form:"validation,omitempty" json:"validation,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateAttributeDefinitionParamsValidation defines parameters for UpdateAttributeDefinition.
type UpdateAttributeDefinitionParamsValidation string

// UpdateAttributeDefinitionDryRunParams defines parameters for UpdateAttributeDefinitionDryRun.
type UpdateAttributeDefinitionDryRunParams struct {
	Validation *UpdateAttributeDefinitionDryRunParamsValidation `form:"validation,omitempty" json:"validation,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateAttributeDefinitionDryRunParamsValidation defines parameters for UpdateAttributeDefinitionDryRun.
type UpdateAttributeDefinitionDryRunParamsValidation string

// GetByDefinitionIdParams defines parameters for GetByDefinitionId.
type GetByDefinitionIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeletePolicyForAttributeDefinitionParamsPolicyType defines parameters for DeletePolicyForAttributeDefinition.
type DeletePolicyForAttributeDefinitionParamsPolicyType string

// FindProductsParams defines parameters for FindProducts.
type FindProductsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetCategoriesByPolicyIdParams defines parameters for GetCategoriesByPolicyId.
type GetCategoriesByPolicyIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetCategoriesNodeByPolicyIdParams defines parameters for GetCategoriesNodeByPolicyId.
type GetCategoriesNodeByPolicyIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetCatalogNodeByPolicyIdParams defines parameters for GetCatalogNodeByPolicyId.
type GetCatalogNodeByPolicyIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetCatalogByPolicyIdParams defines parameters for GetCatalogByPolicyId.
type GetCatalogByPolicyIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetAttributeDefinitionsByPolicyIdParams defines parameters for GetAttributeDefinitionsByPolicyId.
type GetAttributeDefinitionsByPolicyIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetRelationsByPolicyIdParams defines parameters for GetRelationsByPolicyId.
type GetRelationsByPolicyIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// PublishState Publish state
	PublishState *[]string `form:"publishState,omitempty" json:"publishState,omitempty"`

	// UpdatedAfter Products updated after given date.
	UpdatedAfter *int64 `form:"updatedAfter,omitempty" json:"updatedAfter,omitempty"`

	// DataSynced Data synced.
	DataSynced *bool `form:"dataSynced,omitempty" json:"dataSynced,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateProductParams defines parameters for CreateProduct.
type CreateProductParams struct {
	Validation *CreateProductParamsValidation `form:"validation,omitempty" json:"validation,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// CreateProductParamsValidation defines parameters for CreateProduct.
type CreateProductParamsValidation string

// CreateOrUpdateParams defines parameters for CreateOrUpdate.
type CreateOrUpdateParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// AddAttributesByIdsParams defines parameters for AddAttributesByIds.
type AddAttributesByIdsParams struct {
	FailOnAssignedAttribute *bool `form:"failOnAssignedAttribute,omitempty" json:"failOnAssignedAttribute,omitempty"`
	ForceVla                *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpsertAttributesByIdsParams defines parameters for UpsertAttributesByIds.
type UpsertAttributesByIdsParams struct {
	ForceVla *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateAttributesByIdsParams defines parameters for UpdateAttributesByIds.
type UpdateAttributesByIdsParams struct {
	ForceVla *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`

	// FailOnMissingAttribute A flag that determine, whether the request will fail if an attribute is missing from the product.
	FailOnMissingAttribute *bool `form:"failOnMissingAttribute,omitempty" json:"failOnMissingAttribute,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CopyAndUpdateProductParams defines parameters for CopyAndUpdateProduct.
type CopyAndUpdateProductParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// CountFilteredProductsParams defines parameters for CountFilteredProducts.
type CountFilteredProductsParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// GetProductsWithCursorAndViewsParams defines parameters for GetProductsWithCursorAndViews.
type GetProductsWithCursorAndViewsParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// ListProductsViewsByAssetsParams defines parameters for ListProductsViewsByAssets.
type ListProductsViewsByAssetsParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// ListProductsViewsByIdsParams defines parameters for ListProductsViewsByIds.
type ListProductsViewsByIdsParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// ListProductsViewsByNumbersParams defines parameters for ListProductsViewsByNumbers.
type ListProductsViewsByNumbersParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// ChangeStatusesByIdsParams defines parameters for ChangeStatusesByIds.
type ChangeStatusesByIdsParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// FindProductTemplatesParams defines parameters for FindProductTemplates.
type FindProductTemplatesParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetProductParams defines parameters for GetProduct.
type GetProductParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateProductParams defines parameters for UpdateProduct.
type UpdateProductParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// UpdateProductDetailsParams defines parameters for UpdateProductDetails.
type UpdateProductDetailsParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// GetProductAssetsParams defines parameters for GetProductAssets.
type GetProductAssetsParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// MoveProductAssetParams defines parameters for MoveProductAsset.
type MoveProductAssetParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// GetProductAttributesParams defines parameters for GetProductAttributes.
type GetProductAttributesParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// AddProductAttributeParams defines parameters for AddProductAttribute.
type AddProductAttributeParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateProductAttributesJSONBody defines parameters for UpdateProductAttributes.
type UpdateProductAttributesJSONBody = []UpdateAttributeDto

// UpdateProductAttributesParams defines parameters for UpdateProductAttributes.
type UpdateProductAttributesParams struct {
	ForceVla *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// AddColumnAttributeParams defines parameters for AddColumnAttribute.
type AddColumnAttributeParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateColumnAttributeParams defines parameters for UpdateColumnAttribute.
type UpdateColumnAttributeParams struct {
	ForceVla *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// AddDictionaryAttributeParams defines parameters for AddDictionaryAttribute.
type AddDictionaryAttributeParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// SetDictionaryAttributeValuesForProductParams defines parameters for SetDictionaryAttributeValuesForProduct.
type SetDictionaryAttributeValuesForProductParams struct {
	ForceVla *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// AddMatrixAttributeParams defines parameters for AddMatrixAttribute.
type AddMatrixAttributeParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateMatrixAttributeParams defines parameters for UpdateMatrixAttribute.
type UpdateMatrixAttributeParams struct {
	ForceVla *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateProductAttributeParams defines parameters for UpdateProductAttribute.
type UpdateProductAttributeParams struct {
	ForceVla *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// MoveProductInBundleParams defines parameters for MoveProductInBundle.
type MoveProductInBundleParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// GetProductsCategoriesParams defines parameters for GetProductsCategories.
type GetProductsCategoriesParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetProductRelationsParams defines parameters for GetProductRelations.
type GetProductRelationsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetCategoryConnectionsForProductParams defines parameters for GetCategoryConnectionsForProduct.
type GetCategoryConnectionsForProductParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource defines parameters for UpdateRelatedProductsRelationSortingOrderSource.
type UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource string

// GetProductForRelationParams defines parameters for GetProductForRelation.
type GetProductForRelationParams struct {
	Direction GetProductForRelationParamsDirection `form:"direction" json:"direction"`

	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetProductForRelationParamsDirection defines parameters for GetProductForRelation.
type GetProductForRelationParamsDirection string

// CreateProductConnectionsJSONBody defines parameters for CreateProductConnections.
type CreateProductConnectionsJSONBody = []ProductConnectionsRequest

// DeleteManyProductConnectionsJSONBody defines parameters for DeleteManyProductConnections.
type DeleteManyProductConnectionsJSONBody = []ProductConnectionsRemovalRequest

// UpdateOrderProductRelationParams defines parameters for UpdateOrderProductRelation.
type UpdateOrderProductRelationParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// UpdateOrderProductConnectionsParams defines parameters for UpdateOrderProductConnections.
type UpdateOrderProductConnectionsParams struct {
	TargetPosition int32                                        `form:"targetPosition" json:"targetPosition"`
	Direction      UpdateOrderProductConnectionsParamsDirection `form:"direction" json:"direction"`
}

// UpdateOrderProductConnectionsParamsDirection defines parameters for UpdateOrderProductConnections.
type UpdateOrderProductConnectionsParamsDirection string

// CopyProductParams defines parameters for CopyProduct.
type CopyProductParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// FindProductViewsByIdParams defines parameters for FindProductViewsById.
type FindProductViewsByIdParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetGroupedProductAttributesParams defines parameters for GetGroupedProductAttributes.
type GetGroupedProductAttributesParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// GetProductsLabelsParams defines parameters for GetProductsLabels.
type GetProductsLabelsParams struct {
	// ArchiveState Archive state.
	ArchiveState *string `form:"archiveState,omitempty" json:"archiveState,omitempty"`

	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// UpdateProductVariantAttributeParams defines parameters for UpdateProductVariantAttribute.
type UpdateProductVariantAttributeParams struct {
	ForceVla *bool `form:"forceVla,omitempty" json:"forceVla,omitempty"`
}

// MoveProductVariantParams defines parameters for MoveProductVariant.
type MoveProductVariantParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// ChangeStatusParams defines parameters for ChangeStatus.
type ChangeStatusParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// ChangeStatusParamsAction defines parameters for ChangeStatus.
type ChangeStatusParamsAction string

// FindRelationsParams defines parameters for FindRelations.
type FindRelationsParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateRelationParams defines parameters for CreateRelation.
type CreateRelationParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// GetFilteredRelationsParams defines parameters for GetFilteredRelations.
type GetFilteredRelationsParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// DeleteParams defines parameters for Delete.
type DeleteParams struct {
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// FindOneParams defines parameters for FindOne.
type FindOneParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateRelationParams defines parameters for UpdateRelation.
type UpdateRelationParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`
}

// GetCategoryConnectionsByRelationIdParams defines parameters for GetCategoryConnectionsByRelationId.
type GetCategoryConnectionsByRelationIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// UpdateOrderRelationParams defines parameters for UpdateOrderRelation.
type UpdateOrderRelationParams struct {
	TargetPosition int32 `form:"targetPosition" json:"targetPosition"`
}

// GetByRelationIdParams defines parameters for GetByRelationId.
type GetByRelationIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// DeletePolicyForRelationParamsPolicyType defines parameters for DeletePolicyForRelation.
type DeletePolicyForRelationParamsPolicyType string

// GetProductConnectionsByRelationIdParams defines parameters for GetProductConnectionsByRelationId.
type GetProductConnectionsByRelationIdParams struct {
	// Page Number of page. default 0
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Size of page. default 1000
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// ValidateProductsJSONBody defines parameters for ValidateProducts.
type ValidateProductsJSONBody = []ProductValidationRequest

// ValidateProductsParams defines parameters for ValidateProducts.
type ValidateProductsParams struct {
	// Context Context of presented entity.
	Context *string `json:"context,omitempty"`

	// ContextFallback Use fallback for context
	ContextFallback *bool `json:"context-fallback,omitempty"`
}

// CreateAttributeGroupJSONRequestBody defines body for CreateAttributeGroup for application/json ContentType.
type CreateAttributeGroupJSONRequestBody = AttributeGroupRequest

// RenameJSONRequestBody defines body for Rename for application/json ContentType.
type RenameJSONRequestBody = RenameAttributeGroupRequest

// UpdateNumberJSONRequestBody defines body for UpdateNumber for application/json ContentType.
type UpdateNumberJSONRequestBody = UpdateAttributeGroupNumberRequest

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CreateCategoryRequest

// GetFilteredNodesJSONRequestBody defines body for GetFilteredNodes for application/json ContentType.
type GetFilteredNodesJSONRequestBody = CategoryFilteringRequest

// UpdateCatalogNodeJSONRequestBody defines body for UpdateCatalogNode for application/json ContentType.
type UpdateCatalogNodeJSONRequestBody = UpdateCategoryRequest

// UpdateNodeAttributeValueJSONRequestBody defines body for UpdateNodeAttributeValue for application/json ContentType.
type UpdateNodeAttributeValueJSONRequestBody = UpdateCategoryAttributeRequest

// CreateCatalogNodeAttributeJSONRequestBody defines body for CreateCatalogNodeAttribute for application/json ContentType.
type CreateCatalogNodeAttributeJSONRequestBody = CategoryAttributeRequest

// CreateCatalogNodeAttributeColumnJSONRequestBody defines body for CreateCatalogNodeAttributeColumn for application/json ContentType.
type CreateCatalogNodeAttributeColumnJSONRequestBody = CategoryColumnAttributeRequest

// UpdateNodeAttributeColumnValueJSONRequestBody defines body for UpdateNodeAttributeColumnValue for application/json ContentType.
type UpdateNodeAttributeColumnValueJSONRequestBody = UpdateCategoryColumnAttributeRequest

// SetDictionaryAttributeValuesForCategoryJSONRequestBody defines body for SetDictionaryAttributeValuesForCategory for application/json ContentType.
type SetDictionaryAttributeValuesForCategoryJSONRequestBody = SetCategoryDictionaryAttributeValuesRequest

// CreateCatalogNodeAttributeMatrixJSONRequestBody defines body for CreateCatalogNodeAttributeMatrix for application/json ContentType.
type CreateCatalogNodeAttributeMatrixJSONRequestBody = CategoryMatrixAttributeRequest

// UpdateNodeAttributeMatrixValueJSONRequestBody defines body for UpdateNodeAttributeMatrixValue for application/json ContentType.
type UpdateNodeAttributeMatrixValueJSONRequestBody = UpdateCategoryMatrixAttributeRequest

// MoveCatalogNodeJSONRequestBody defines body for MoveCatalogNode for application/json ContentType.
type MoveCatalogNodeJSONRequestBody = MoveCategoryRequest

// AddPolicyToCategoryNodeJSONRequestBody defines body for AddPolicyToCategoryNode for application/json ContentType.
type AddPolicyToCategoryNodeJSONRequestBody = PolicyRequest

// AddCategoryProductsJSONRequestBody defines body for AddCategoryProducts for application/json ContentType.
type AddCategoryProductsJSONRequestBody = CategoryProductRequest

// AddPolicyToProductsForCategoryNodeIdJSONRequestBody defines body for AddPolicyToProductsForCategoryNodeId for application/json ContentType.
type AddPolicyToProductsForCategoryNodeIdJSONRequestBody = PolicyRequest

// AddPolicyToCategoryJSONRequestBody defines body for AddPolicyToCategory for application/json ContentType.
type AddPolicyToCategoryJSONRequestBody = PolicyRequest

// AddPolicyToProductsForCategoryIdJSONRequestBody defines body for AddPolicyToProductsForCategoryId for application/json ContentType.
type AddPolicyToProductsForCategoryIdJSONRequestBody = PolicyRequest

// CreateCompoundDefinitionJSONRequestBody defines body for CreateCompoundDefinition for application/json ContentType.
type CreateCompoundDefinitionJSONRequestBody = CompoundAttributeDefinitionRequest

// UpdateCompoundDefinitionJSONRequestBody defines body for UpdateCompoundDefinition for application/json ContentType.
type UpdateCompoundDefinitionJSONRequestBody = CompoundAttributeDefinitionRequest

// CreateAttributeDefinitionJSONRequestBody defines body for CreateAttributeDefinition for application/json ContentType.
type CreateAttributeDefinitionJSONRequestBody = SimpleAttributeDefinitionRequest

// CreateColumnDefinitionJSONRequestBody defines body for CreateColumnDefinition for application/json ContentType.
type CreateColumnDefinitionJSONRequestBody = ColumnAttributeDefinitionDto

// UpdateColumnDefinitionJSONRequestBody defines body for UpdateColumnDefinition for application/json ContentType.
type UpdateColumnDefinitionJSONRequestBody = ColumnAttributeDefinitionDto

// UpdateColumnDefinitionDryRunJSONRequestBody defines body for UpdateColumnDefinitionDryRun for application/json ContentType.
type UpdateColumnDefinitionDryRunJSONRequestBody = ColumnAttributeDefinitionDto

// CreateDictionaryDefinitionJSONRequestBody defines body for CreateDictionaryDefinition for application/json ContentType.
type CreateDictionaryDefinitionJSONRequestBody = DictionaryAttributeDefinitionDto

// PatchUpdateJSONRequestBody defines body for PatchUpdate for application/json ContentType.
type PatchUpdateJSONRequestBody = DictionaryAttributeDefinitionUpdate

// UpdateDictionaryDefinitionJSONRequestBody defines body for UpdateDictionaryDefinition for application/json ContentType.
type UpdateDictionaryDefinitionJSONRequestBody = DictionaryAttributeDefinitionDto

// CreateDictionaryAttributeJSONRequestBody defines body for CreateDictionaryAttribute for application/json ContentType.
type CreateDictionaryAttributeJSONRequestBody = DictionaryAttributeCreateRequest

// CountDictionaryAttributesJSONRequestBody defines body for CountDictionaryAttributes for application/json ContentType.
type CountDictionaryAttributesJSONRequestBody = DictionaryAttributeFilteringRequestDto

// FindFilteredDictionaryAttributesJSONRequestBody defines body for FindFilteredDictionaryAttributes for application/json ContentType.
type FindFilteredDictionaryAttributesJSONRequestBody = DictionaryValueFilteringRequest

// FindFilteredDictionaryDefinitionsJSONRequestBody defines body for FindFilteredDictionaryDefinitions for application/json ContentType.
type FindFilteredDictionaryDefinitionsJSONRequestBody = DictionaryAttributeFilteringRequestDto

// UpdateDictionaryAttributeJSONRequestBody defines body for UpdateDictionaryAttribute for application/json ContentType.
type UpdateDictionaryAttributeJSONRequestBody = DictionaryAttributeUpdateRequest

// FindFilteredAttributeDefinitionsJSONRequestBody defines body for FindFilteredAttributeDefinitions for application/json ContentType.
type FindFilteredAttributeDefinitionsJSONRequestBody = AttributeDefinitionFilteringRequestDto

// CreateMatrixDefinitionJSONRequestBody defines body for CreateMatrixDefinition for application/json ContentType.
type CreateMatrixDefinitionJSONRequestBody = MatrixAttributeDefinitionDto

// UpdateMatrixDefinitionJSONRequestBody defines body for UpdateMatrixDefinition for application/json ContentType.
type UpdateMatrixDefinitionJSONRequestBody = MatrixAttributeDefinitionDto

// UpdateMatrixDefinitionDryRunJSONRequestBody defines body for UpdateMatrixDefinitionDryRun for application/json ContentType.
type UpdateMatrixDefinitionDryRunJSONRequestBody = MatrixAttributeDefinitionDto

// UpdateMetadataJSONRequestBody defines body for UpdateMetadata for application/json ContentType.
type UpdateMetadataJSONRequestBody = AttributeDefinitionMetadataUpdateRequest

// UpdateAttributeDefinitionJSONRequestBody defines body for UpdateAttributeDefinition for application/json ContentType.
type UpdateAttributeDefinitionJSONRequestBody = SimpleAttributeDefinitionRequest

// UpdateAttributeDefinitionDryRunJSONRequestBody defines body for UpdateAttributeDefinitionDryRun for application/json ContentType.
type UpdateAttributeDefinitionDryRunJSONRequestBody = SimpleAttributeDefinitionRequest

// AddPolicyToAttributeDefinitionJSONRequestBody defines body for AddPolicyToAttributeDefinition for application/json ContentType.
type AddPolicyToAttributeDefinitionJSONRequestBody = PolicyRequest

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = ProductCreateRequest

// ArchiveProductsByIdsJSONRequestBody defines body for ArchiveProductsByIds for application/json ContentType.
type ArchiveProductsByIdsJSONRequestBody = ProductArchiveStateRequest

// DeleteProductsAttributeJSONRequestBody defines body for DeleteProductsAttribute for application/json ContentType.
type DeleteProductsAttributeJSONRequestBody = DeleteProductsAttributesBulkRequest

// CreateOrUpdateJSONRequestBody defines body for CreateOrUpdate for application/json ContentType.
type CreateOrUpdateJSONRequestBody = SaveProductsAttributesBulkRequest

// AddAttributesByIdsJSONRequestBody defines body for AddAttributesByIds for application/json ContentType.
type AddAttributesByIdsJSONRequestBody = SaveProductsAttributesByIdsRequest

// UpsertAttributesByIdsJSONRequestBody defines body for UpsertAttributesByIds for application/json ContentType.
type UpsertAttributesByIdsJSONRequestBody = SaveProductsAttributesByIdsRequest

// UpdateAttributesByIdsJSONRequestBody defines body for UpdateAttributesByIds for application/json ContentType.
type UpdateAttributesByIdsJSONRequestBody = SaveProductsAttributesByIdsRequest

// AssignProductsToCategoryJSONRequestBody defines body for AssignProductsToCategory for application/json ContentType.
type AssignProductsToCategoryJSONRequestBody = AssignProductsToCategoryRequest

// CopyAndUpdateProductJSONRequestBody defines body for CopyAndUpdateProduct for application/json ContentType.
type CopyAndUpdateProductJSONRequestBody = CopyProductRequest

// CountFilteredProductsJSONRequestBody defines body for CountFilteredProducts for application/json ContentType.
type CountFilteredProductsJSONRequestBody = GridFilteringBaseRequestDto

// GetProductsWithCursorAndViewsJSONRequestBody defines body for GetProductsWithCursorAndViews for application/json ContentType.
type GetProductsWithCursorAndViewsJSONRequestBody = CursorWithViewsRequestDto

// RemoveLabelFromProductsJSONRequestBody defines body for RemoveLabelFromProducts for application/json ContentType.
type RemoveLabelFromProductsJSONRequestBody = ModifyLabelInProductsRequestDto

// AddLabelToProductsJSONRequestBody defines body for AddLabelToProducts for application/json ContentType.
type AddLabelToProductsJSONRequestBody = ModifyLabelInProductsRequestDto

// ListProductsViewsByAssetsJSONRequestBody defines body for ListProductsViewsByAssets for application/json ContentType.
type ListProductsViewsByAssetsJSONRequestBody = AssetIdListViewsRequestDto

// ListProductsViewsByIdsJSONRequestBody defines body for ListProductsViewsByIds for application/json ContentType.
type ListProductsViewsByIdsJSONRequestBody = ProductIdListViewsRequestDto

// ListProductsViewsByNumbersJSONRequestBody defines body for ListProductsViewsByNumbers for application/json ContentType.
type ListProductsViewsByNumbersJSONRequestBody = ProductNumberListViewsRequestDto

// ChangeStatusesByIdsJSONRequestBody defines body for ChangeStatusesByIds for application/json ContentType.
type ChangeStatusesByIdsJSONRequestBody = UpdateProductStateRequest

// CreateProductTemplateJSONRequestBody defines body for CreateProductTemplate for application/json ContentType.
type CreateProductTemplateJSONRequestBody = ProductTemplateRequest

// UpdateNameJSONRequestBody defines body for UpdateName for application/json ContentType.
type UpdateNameJSONRequestBody = ProductTemplateRequest

// UnarchiveProductsByIdsJSONRequestBody defines body for UnarchiveProductsByIds for application/json ContentType.
type UnarchiveProductsByIdsJSONRequestBody = ProductArchiveStateRequest

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody = ProductMetadataUpdateRequest

// UpdateProductDetailsJSONRequestBody defines body for UpdateProductDetails for application/json ContentType.
type UpdateProductDetailsJSONRequestBody = AllProductMetadataUpdateRequest

// AssociateAssetsJSONRequestBody defines body for AssociateAssets for application/json ContentType.
type AssociateAssetsJSONRequestBody = AssociateProductAssetsRequest

// SetProductAssetsJSONRequestBody defines body for SetProductAssets for application/json ContentType.
type SetProductAssetsJSONRequestBody = SetProductAssets

// AddProductAttributeJSONRequestBody defines body for AddProductAttribute for application/json ContentType.
type AddProductAttributeJSONRequestBody = CreateSimpleAttributeRequest

// UpdateProductAttributesJSONRequestBody defines body for UpdateProductAttributes for application/json ContentType.
type UpdateProductAttributesJSONRequestBody = UpdateProductAttributesJSONBody

// AddColumnAttributeJSONRequestBody defines body for AddColumnAttribute for application/json ContentType.
type AddColumnAttributeJSONRequestBody = ColumnAttributeValueAddRequest

// UpdateColumnAttributeJSONRequestBody defines body for UpdateColumnAttribute for application/json ContentType.
type UpdateColumnAttributeJSONRequestBody = ColumnAttributeValueDto

// AddDictionaryAttributeJSONRequestBody defines body for AddDictionaryAttribute for application/json ContentType.
type AddDictionaryAttributeJSONRequestBody = DictionaryAttributeValueAddRequest

// SetDictionaryAttributeValuesForProductJSONRequestBody defines body for SetDictionaryAttributeValuesForProduct for application/json ContentType.
type SetDictionaryAttributeValuesForProductJSONRequestBody = SetDictionaryValuesRequest

// AddMatrixAttributeJSONRequestBody defines body for AddMatrixAttribute for application/json ContentType.
type AddMatrixAttributeJSONRequestBody = MatrixAttributeValueAddRequest

// UpdateMatrixAttributeJSONRequestBody defines body for UpdateMatrixAttribute for application/json ContentType.
type UpdateMatrixAttributeJSONRequestBody = MatrixAttributeValueDto

// UpdateProductAttributeJSONRequestBody defines body for UpdateProductAttribute for application/json ContentType.
type UpdateProductAttributeJSONRequestBody = AttributeValueValues

// AddProductToBundleJSONRequestBody defines body for AddProductToBundle for application/json ContentType.
type AddProductToBundleJSONRequestBody = ProductBundleRequest

// UpdateProductBundleQuantityJSONRequestBody defines body for UpdateProductBundleQuantity for application/json ContentType.
type UpdateProductBundleQuantityJSONRequestBody = ProductBundleRequest

// AddProductToCategoriesJSONRequestBody defines body for AddProductToCategories for application/json ContentType.
type AddProductToCategoriesJSONRequestBody = CategoryReferenceRequest

// CreateCategoryConnectionJSONRequestBody defines body for CreateCategoryConnection for application/json ContentType.
type CreateCategoryConnectionJSONRequestBody = ProductConnectionRequest

// CreateProductConnectionJSONRequestBody defines body for CreateProductConnection for application/json ContentType.
type CreateProductConnectionJSONRequestBody = ProductConnectionRequest

// CreateProductConnectionsJSONRequestBody defines body for CreateProductConnections for application/json ContentType.
type CreateProductConnectionsJSONRequestBody = CreateProductConnectionsJSONBody

// DeleteManyProductConnectionsJSONRequestBody defines body for DeleteManyProductConnections for application/json ContentType.
type DeleteManyProductConnectionsJSONRequestBody = DeleteManyProductConnectionsJSONBody

// UpdateConnectionQuantityJSONRequestBody defines body for UpdateConnectionQuantity for application/json ContentType.
type UpdateConnectionQuantityJSONRequestBody = ProductConnectionUpdateRequest

// FindProductViewsByIdJSONRequestBody defines body for FindProductViewsById for application/json ContentType.
type FindProductViewsByIdJSONRequestBody = ProductIdViewsRequestDto

// AddLabelsToProductJSONRequestBody defines body for AddLabelsToProduct for application/json ContentType.
type AddLabelsToProductJSONRequestBody = LabelReferenceRequest

// UpdateProductVariantAttributeJSONRequestBody defines body for UpdateProductVariantAttribute for application/json ContentType.
type UpdateProductVariantAttributeJSONRequestBody = ProductVariantAttributeDto

// CreateRelationJSONRequestBody defines body for CreateRelation for application/json ContentType.
type CreateRelationJSONRequestBody = RelationRequest

// GetFilteredRelationsJSONRequestBody defines body for GetFilteredRelations for application/json ContentType.
type GetFilteredRelationsJSONRequestBody = RelationFilteringRequest

// UpdateRelationJSONRequestBody defines body for UpdateRelation for application/json ContentType.
type UpdateRelationJSONRequestBody = RelationRequest

// AddPolicyToRelationJSONRequestBody defines body for AddPolicyToRelation for application/json ContentType.
type AddPolicyToRelationJSONRequestBody = PolicyRequest

// ValidateAttributeJSONRequestBody defines body for ValidateAttribute for application/json ContentType.
type ValidateAttributeJSONRequestBody = AttributeValidationRequest

// ValidateProductsJSONRequestBody defines body for ValidateProducts for application/json ContentType.
type ValidateProductsJSONRequestBody = ValidateProductsJSONBody

// ValidateValueJSONRequestBody defines body for ValidateValue for application/json ContentType.
type ValidateValueJSONRequestBody = ValueValidationRequest

// AsAssetsFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a AssetsFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsAssetsFilteringViewsDto() (AssetsFilteringViewsDto, error) {
	var body AssetsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssetsFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided AssetsFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssetsFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided AssetsFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttributesFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a AttributesFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsAttributesFilteringViewsDto() (AttributesFilteringViewsDto, error) {
	var body AttributesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributesFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided AttributesFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributesFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided AttributesFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBundlesFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a BundlesFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsBundlesFilteringViewsDto() (BundlesFilteringViewsDto, error) {
	var body BundlesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBundlesFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided BundlesFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBundlesFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided BundlesFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCategoriesFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a CategoriesFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsCategoriesFilteringViewsDto() (CategoriesFilteringViewsDto, error) {
	var body CategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCategoriesFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided CategoriesFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCategoriesFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided CategoriesFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLabelsFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a LabelsFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsLabelsFilteringViewsDto() (LabelsFilteringViewsDto, error) {
	var body LabelsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLabelsFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided LabelsFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLabelsFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided LabelsFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetadataFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a MetadataFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsMetadataFilteringViewsDto() (MetadataFilteringViewsDto, error) {
	var body MetadataFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetadataFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided MetadataFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetadataFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided MetadataFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedCategoriesFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a RelatedCategoriesFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsRelatedCategoriesFilteringViewsDto() (RelatedCategoriesFilteringViewsDto, error) {
	var body RelatedCategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedCategoriesFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided RelatedCategoriesFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedCategoriesFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided RelatedCategoriesFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedProductsFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a RelatedProductsFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsRelatedProductsFilteringViewsDto() (RelatedProductsFilteringViewsDto, error) {
	var body RelatedProductsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedProductsFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided RelatedProductsFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedProductsFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided RelatedProductsFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariantsFilteringViewsDto returns the union data inside the AssetIdListViewsRequestDto_Views_Item as a VariantsFilteringViewsDto
func (t AssetIdListViewsRequestDto_Views_Item) AsVariantsFilteringViewsDto() (VariantsFilteringViewsDto, error) {
	var body VariantsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariantsFilteringViewsDto overwrites any union data inside the AssetIdListViewsRequestDto_Views_Item as the provided VariantsFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) FromVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariantsFilteringViewsDto performs a merge with any union data inside the AssetIdListViewsRequestDto_Views_Item, using the provided VariantsFilteringViewsDto
func (t *AssetIdListViewsRequestDto_Views_Item) MergeVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AssetIdListViewsRequestDto_Views_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AssetIdListViewsRequestDto_Views_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssetsFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a AssetsFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsAssetsFilteringViewsDto() (AssetsFilteringViewsDto, error) {
	var body AssetsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssetsFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided AssetsFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssetsFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided AssetsFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttributesFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a AttributesFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsAttributesFilteringViewsDto() (AttributesFilteringViewsDto, error) {
	var body AttributesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributesFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided AttributesFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributesFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided AttributesFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBundlesFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a BundlesFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsBundlesFilteringViewsDto() (BundlesFilteringViewsDto, error) {
	var body BundlesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBundlesFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided BundlesFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBundlesFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided BundlesFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCategoriesFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a CategoriesFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsCategoriesFilteringViewsDto() (CategoriesFilteringViewsDto, error) {
	var body CategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCategoriesFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided CategoriesFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCategoriesFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided CategoriesFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLabelsFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a LabelsFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsLabelsFilteringViewsDto() (LabelsFilteringViewsDto, error) {
	var body LabelsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLabelsFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided LabelsFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLabelsFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided LabelsFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetadataFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a MetadataFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsMetadataFilteringViewsDto() (MetadataFilteringViewsDto, error) {
	var body MetadataFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetadataFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided MetadataFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetadataFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided MetadataFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedCategoriesFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a RelatedCategoriesFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsRelatedCategoriesFilteringViewsDto() (RelatedCategoriesFilteringViewsDto, error) {
	var body RelatedCategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedCategoriesFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided RelatedCategoriesFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedCategoriesFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided RelatedCategoriesFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedProductsFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a RelatedProductsFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsRelatedProductsFilteringViewsDto() (RelatedProductsFilteringViewsDto, error) {
	var body RelatedProductsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedProductsFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided RelatedProductsFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedProductsFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided RelatedProductsFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariantsFilteringViewsDto returns the union data inside the CursorWithViewsRequestDto_Views_Item as a VariantsFilteringViewsDto
func (t CursorWithViewsRequestDto_Views_Item) AsVariantsFilteringViewsDto() (VariantsFilteringViewsDto, error) {
	var body VariantsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariantsFilteringViewsDto overwrites any union data inside the CursorWithViewsRequestDto_Views_Item as the provided VariantsFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) FromVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariantsFilteringViewsDto performs a merge with any union data inside the CursorWithViewsRequestDto_Views_Item, using the provided VariantsFilteringViewsDto
func (t *CursorWithViewsRequestDto_Views_Item) MergeVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CursorWithViewsRequestDto_Views_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CursorWithViewsRequestDto_Views_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssetsFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a AssetsFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsAssetsFilteringViewsDto() (AssetsFilteringViewsDto, error) {
	var body AssetsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssetsFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided AssetsFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssetsFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided AssetsFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttributesFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a AttributesFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsAttributesFilteringViewsDto() (AttributesFilteringViewsDto, error) {
	var body AttributesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributesFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided AttributesFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributesFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided AttributesFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBundlesFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a BundlesFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsBundlesFilteringViewsDto() (BundlesFilteringViewsDto, error) {
	var body BundlesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBundlesFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided BundlesFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBundlesFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided BundlesFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCategoriesFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a CategoriesFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsCategoriesFilteringViewsDto() (CategoriesFilteringViewsDto, error) {
	var body CategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCategoriesFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided CategoriesFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCategoriesFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided CategoriesFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLabelsFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a LabelsFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsLabelsFilteringViewsDto() (LabelsFilteringViewsDto, error) {
	var body LabelsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLabelsFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided LabelsFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLabelsFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided LabelsFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetadataFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a MetadataFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsMetadataFilteringViewsDto() (MetadataFilteringViewsDto, error) {
	var body MetadataFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetadataFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided MetadataFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetadataFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided MetadataFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedCategoriesFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a RelatedCategoriesFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsRelatedCategoriesFilteringViewsDto() (RelatedCategoriesFilteringViewsDto, error) {
	var body RelatedCategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedCategoriesFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided RelatedCategoriesFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedCategoriesFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided RelatedCategoriesFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedProductsFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a RelatedProductsFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsRelatedProductsFilteringViewsDto() (RelatedProductsFilteringViewsDto, error) {
	var body RelatedProductsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedProductsFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided RelatedProductsFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedProductsFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided RelatedProductsFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariantsFilteringViewsDto returns the union data inside the ProductIdListViewsRequestDto_Views_Item as a VariantsFilteringViewsDto
func (t ProductIdListViewsRequestDto_Views_Item) AsVariantsFilteringViewsDto() (VariantsFilteringViewsDto, error) {
	var body VariantsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariantsFilteringViewsDto overwrites any union data inside the ProductIdListViewsRequestDto_Views_Item as the provided VariantsFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) FromVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariantsFilteringViewsDto performs a merge with any union data inside the ProductIdListViewsRequestDto_Views_Item, using the provided VariantsFilteringViewsDto
func (t *ProductIdListViewsRequestDto_Views_Item) MergeVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProductIdListViewsRequestDto_Views_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProductIdListViewsRequestDto_Views_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssetsFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a AssetsFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsAssetsFilteringViewsDto() (AssetsFilteringViewsDto, error) {
	var body AssetsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssetsFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided AssetsFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssetsFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided AssetsFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttributesFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a AttributesFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsAttributesFilteringViewsDto() (AttributesFilteringViewsDto, error) {
	var body AttributesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributesFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided AttributesFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributesFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided AttributesFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBundlesFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a BundlesFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsBundlesFilteringViewsDto() (BundlesFilteringViewsDto, error) {
	var body BundlesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBundlesFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided BundlesFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBundlesFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided BundlesFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCategoriesFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a CategoriesFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsCategoriesFilteringViewsDto() (CategoriesFilteringViewsDto, error) {
	var body CategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCategoriesFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided CategoriesFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCategoriesFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided CategoriesFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLabelsFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a LabelsFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsLabelsFilteringViewsDto() (LabelsFilteringViewsDto, error) {
	var body LabelsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLabelsFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided LabelsFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLabelsFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided LabelsFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetadataFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a MetadataFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsMetadataFilteringViewsDto() (MetadataFilteringViewsDto, error) {
	var body MetadataFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetadataFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided MetadataFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetadataFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided MetadataFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedCategoriesFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a RelatedCategoriesFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsRelatedCategoriesFilteringViewsDto() (RelatedCategoriesFilteringViewsDto, error) {
	var body RelatedCategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedCategoriesFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided RelatedCategoriesFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedCategoriesFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided RelatedCategoriesFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedProductsFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a RelatedProductsFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsRelatedProductsFilteringViewsDto() (RelatedProductsFilteringViewsDto, error) {
	var body RelatedProductsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedProductsFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided RelatedProductsFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedProductsFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided RelatedProductsFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariantsFilteringViewsDto returns the union data inside the ProductIdViewsRequestDto_Views_Item as a VariantsFilteringViewsDto
func (t ProductIdViewsRequestDto_Views_Item) AsVariantsFilteringViewsDto() (VariantsFilteringViewsDto, error) {
	var body VariantsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariantsFilteringViewsDto overwrites any union data inside the ProductIdViewsRequestDto_Views_Item as the provided VariantsFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) FromVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariantsFilteringViewsDto performs a merge with any union data inside the ProductIdViewsRequestDto_Views_Item, using the provided VariantsFilteringViewsDto
func (t *ProductIdViewsRequestDto_Views_Item) MergeVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProductIdViewsRequestDto_Views_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProductIdViewsRequestDto_Views_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssetsFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a AssetsFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsAssetsFilteringViewsDto() (AssetsFilteringViewsDto, error) {
	var body AssetsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssetsFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided AssetsFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssetsFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided AssetsFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeAssetsFilteringViewsDto(v AssetsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttributesFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a AttributesFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsAttributesFilteringViewsDto() (AttributesFilteringViewsDto, error) {
	var body AttributesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributesFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided AttributesFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributesFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided AttributesFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeAttributesFilteringViewsDto(v AttributesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBundlesFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a BundlesFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsBundlesFilteringViewsDto() (BundlesFilteringViewsDto, error) {
	var body BundlesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBundlesFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided BundlesFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBundlesFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided BundlesFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeBundlesFilteringViewsDto(v BundlesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCategoriesFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a CategoriesFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsCategoriesFilteringViewsDto() (CategoriesFilteringViewsDto, error) {
	var body CategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCategoriesFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided CategoriesFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCategoriesFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided CategoriesFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeCategoriesFilteringViewsDto(v CategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLabelsFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a LabelsFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsLabelsFilteringViewsDto() (LabelsFilteringViewsDto, error) {
	var body LabelsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLabelsFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided LabelsFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLabelsFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided LabelsFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeLabelsFilteringViewsDto(v LabelsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetadataFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a MetadataFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsMetadataFilteringViewsDto() (MetadataFilteringViewsDto, error) {
	var body MetadataFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetadataFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided MetadataFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetadataFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided MetadataFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeMetadataFilteringViewsDto(v MetadataFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedCategoriesFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a RelatedCategoriesFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsRelatedCategoriesFilteringViewsDto() (RelatedCategoriesFilteringViewsDto, error) {
	var body RelatedCategoriesFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedCategoriesFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided RelatedCategoriesFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedCategoriesFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided RelatedCategoriesFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeRelatedCategoriesFilteringViewsDto(v RelatedCategoriesFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRelatedProductsFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a RelatedProductsFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsRelatedProductsFilteringViewsDto() (RelatedProductsFilteringViewsDto, error) {
	var body RelatedProductsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelatedProductsFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided RelatedProductsFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelatedProductsFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided RelatedProductsFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeRelatedProductsFilteringViewsDto(v RelatedProductsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariantsFilteringViewsDto returns the union data inside the ProductNumberListViewsRequestDto_Views_Item as a VariantsFilteringViewsDto
func (t ProductNumberListViewsRequestDto_Views_Item) AsVariantsFilteringViewsDto() (VariantsFilteringViewsDto, error) {
	var body VariantsFilteringViewsDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariantsFilteringViewsDto overwrites any union data inside the ProductNumberListViewsRequestDto_Views_Item as the provided VariantsFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) FromVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariantsFilteringViewsDto performs a merge with any union data inside the ProductNumberListViewsRequestDto_Views_Item, using the provided VariantsFilteringViewsDto
func (t *ProductNumberListViewsRequestDto_Views_Item) MergeVariantsFilteringViewsDto(v VariantsFilteringViewsDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProductNumberListViewsRequestDto_Views_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProductNumberListViewsRequestDto_Views_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SynchronizeAssets request
	SynchronizeAssets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobStatus request
	GetJobStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAttributeGroups request
	FindAttributeGroups(ctx context.Context, params *FindAttributeGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAttributeGroupWithBody request with any body
	CreateAttributeGroupWithBody(ctx context.Context, params *CreateAttributeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAttributeGroup(ctx context.Context, params *CreateAttributeGroupParams, body CreateAttributeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindDefinitionsWithoutGroup request
	FindDefinitionsWithoutGroup(ctx context.Context, params *FindDefinitionsWithoutGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetOtherDefinitionsOrderStrategy request
	SetOtherDefinitionsOrderStrategy(ctx context.Context, params *SetOtherDefinitionsOrderStrategyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveAttributeDefinitionInGroup request
	MoveAttributeDefinitionInGroup(ctx context.Context, definitionId string, params *MoveAttributeDefinitionInGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttributeRootGroup request
	GetAttributeRootGroup(ctx context.Context, params *GetAttributeRootGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAttributeGroup request
	DeleteAttributeGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveGroup request
	MoveGroup(ctx context.Context, id string, params *MoveGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindDefinitionsInGroup request
	FindDefinitionsInGroup(ctx context.Context, id string, params *FindDefinitionsInGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDefinitionsOrderStrategyInGroup request
	SetDefinitionsOrderStrategyInGroup(ctx context.Context, id string, params *SetDefinitionsOrderStrategyInGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveAttributeDefinition request
	MoveAttributeDefinition(ctx context.Context, id string, definitionId string, params *MoveAttributeDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RenameWithBody request with any body
	RenameWithBody(ctx context.Context, id string, params *RenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Rename(ctx context.Context, id string, params *RenameParams, body RenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNumberWithBody request with any body
	UpdateNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNumber(ctx context.Context, id string, body UpdateNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCatalogs request
	ListCatalogs(ctx context.Context, params *ListCatalogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCategoryWithBody request with any body
	CreateCategoryWithBody(ctx context.Context, params *CreateCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCategory(ctx context.Context, params *CreateCategoryParams, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoriesByAssetId request
	GetCategoriesByAssetId(ctx context.Context, id string, params *GetCategoriesByAssetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindByCategoryLevelAttributes request
	FindByCategoryLevelAttributes(ctx context.Context, attributeDefinitionId string, params *FindByCategoryLevelAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List request
	List(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilteredNodesWithBody request with any body
	GetFilteredNodesWithBody(ctx context.Context, params *GetFilteredNodesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFilteredNodes(ctx context.Context, params *GetFilteredNodesParams, body GetFilteredNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCategoryNode request
	DeleteCategoryNode(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNode request
	GetNode(ctx context.Context, id string, params *GetNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogNodeWithBody request with any body
	UpdateCatalogNodeWithBody(ctx context.Context, id string, params *UpdateCatalogNodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCatalogNode(ctx context.Context, id string, params *UpdateCatalogNodeParams, body UpdateCatalogNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoryAssets request
	GetCategoryAssets(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisassociateAssetFromCategory request
	DisassociateAssetFromCategory(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssociateAssetWithCategory request
	AssociateAssetWithCategory(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveCategoryAsset request
	MoveCategoryAsset(ctx context.Context, id string, assetId string, params *MoveCategoryAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAttributesAttachedToGivenNode request
	ListAttributesAttachedToGivenNode(ctx context.Context, id string, params *ListAttributesAttachedToGivenNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAttributeFromNode request
	DeleteAttributeFromNode(ctx context.Context, id string, attributeDefinitionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNodeAttributeValueWithBody request with any body
	UpdateNodeAttributeValueWithBody(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNodeAttributeValue(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, body UpdateNodeAttributeValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogNodeAttributeWithBody request with any body
	CreateCatalogNodeAttributeWithBody(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogNodeAttribute(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, body CreateCatalogNodeAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogNodeAttributeColumnWithBody request with any body
	CreateCatalogNodeAttributeColumnWithBody(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogNodeAttributeColumn(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, body CreateCatalogNodeAttributeColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNodeAttributeColumnValueWithBody request with any body
	UpdateNodeAttributeColumnValueWithBody(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNodeAttributeColumnValue(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, body UpdateNodeAttributeColumnValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogNodeAttributeCompound request
	CreateCatalogNodeAttributeCompound(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeCompoundParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogNodeAttributeDictionary request
	CreateCatalogNodeAttributeDictionary(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeDictionaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDictionaryAttributeValuesForCategoryWithBody request with any body
	SetDictionaryAttributeValuesForCategoryWithBody(ctx context.Context, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetDictionaryAttributeValuesForCategory(ctx context.Context, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, body SetDictionaryAttributeValuesForCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCatalogNodeAttributeMatrixWithBody request with any body
	CreateCatalogNodeAttributeMatrixWithBody(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCatalogNodeAttributeMatrix(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, body CreateCatalogNodeAttributeMatrixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNodeAttributeMatrixValueWithBody request with any body
	UpdateNodeAttributeMatrixValueWithBody(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNodeAttributeMatrixValue(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, body UpdateNodeAttributeMatrixValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogNodeChildren request
	GetCatalogNodeChildren(ctx context.Context, id string, params *GetCatalogNodeChildrenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveCatalogNodeWithBody request with any body
	MoveCatalogNodeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveCatalogNode(ctx context.Context, id string, body MoveCatalogNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCatalogNodeOrder request
	UpdateCatalogNodeOrder(ctx context.Context, id string, params *UpdateCatalogNodeOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPathToNode request
	GetPathToNode(ctx context.Context, id string, params *GetPathToNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetByCategoryNodeId request
	GetByCategoryNodeId(ctx context.Context, id string, params *GetByCategoryNodeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPolicyToCategoryNodeWithBody request with any body
	AddPolicyToCategoryNodeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPolicyToCategoryNode(ctx context.Context, id string, body AddPolicyToCategoryNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicyByCategoryNodeAndPolicyId request
	DeletePolicyByCategoryNodeAndPolicyId(ctx context.Context, id string, policyId string, policyType DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoryProducts request
	GetCategoryProducts(ctx context.Context, id string, params *GetCategoryProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCategoryProductsWithBody request with any body
	AddCategoryProductsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCategoryProducts(ctx context.Context, id string, body AddCategoryProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicyByCategoryNodeId request
	GetPolicyByCategoryNodeId(ctx context.Context, id string, params *GetPolicyByCategoryNodeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPolicyToProductsForCategoryNodeIdWithBody request with any body
	AddPolicyToProductsForCategoryNodeIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPolicyToProductsForCategoryNodeId(ctx context.Context, id string, body AddPolicyToProductsForCategoryNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicyFromProductsForCategoryNodeId request
	DeletePolicyFromProductsForCategoryNodeId(ctx context.Context, id string, policyId string, policyType DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCategoryProducts request
	DeleteCategoryProducts(ctx context.Context, id string, productId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Archive request
	Archive(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unarchive request
	Unarchive(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoryTree request
	GetCategoryTree(ctx context.Context, id string, params *GetCategoryTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPoliciesByCategoryId request
	GetPoliciesByCategoryId(ctx context.Context, id string, params *GetPoliciesByCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPolicyToCategoryWithBody request with any body
	AddPolicyToCategoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPolicyToCategory(ctx context.Context, id string, body AddPolicyToCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicyByCategoryAndPolicyId request
	DeletePolicyByCategoryAndPolicyId(ctx context.Context, id string, policyId string, policyType DeletePolicyByCategoryAndPolicyIdParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicyByCategoryId request
	GetPolicyByCategoryId(ctx context.Context, id string, params *GetPolicyByCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPolicyToProductsForCategoryIdWithBody request with any body
	AddPolicyToProductsForCategoryIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPolicyToProductsForCategoryId(ctx context.Context, id string, body AddPolicyToProductsForCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicyFromProductsForCategoryId request
	DeletePolicyFromProductsForCategoryId(ctx context.Context, id string, policyId string, policyType DeletePolicyFromProductsForCategoryIdParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAllCompoundDefinitions request
	FindAllCompoundDefinitions(ctx context.Context, params *FindAllCompoundDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCompoundDefinitionWithBody request with any body
	CreateCompoundDefinitionWithBody(ctx context.Context, params *CreateCompoundDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCompoundDefinition(ctx context.Context, params *CreateCompoundDefinitionParams, body CreateCompoundDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindBySubDefinitions request
	FindBySubDefinitions(ctx context.Context, attributeDefinitionId string, params *FindBySubDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCompoundDefinition request
	DeleteCompoundDefinition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompoundDefinition request
	GetCompoundDefinition(ctx context.Context, id string, params *GetCompoundDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCompoundDefinitionWithBody request with any body
	UpdateCompoundDefinitionWithBody(ctx context.Context, id string, params *UpdateCompoundDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCompoundDefinition(ctx context.Context, id string, params *UpdateCompoundDefinitionParams, body UpdateCompoundDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindAllAttributeDefinitions request
	FindAllAttributeDefinitions(ctx context.Context, params *FindAllAttributeDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAttributeDefinitionWithBody request with any body
	CreateAttributeDefinitionWithBody(ctx context.Context, params *CreateAttributeDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAttributeDefinition(ctx context.Context, params *CreateAttributeDefinitionParams, body CreateAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateColumnDefinitionWithBody request with any body
	CreateColumnDefinitionWithBody(ctx context.Context, params *CreateColumnDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateColumnDefinition(ctx context.Context, params *CreateColumnDefinitionParams, body CreateColumnDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateColumnDefinitionWithBody request with any body
	UpdateColumnDefinitionWithBody(ctx context.Context, id string, params *UpdateColumnDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateColumnDefinition(ctx context.Context, id string, params *UpdateColumnDefinitionParams, body UpdateColumnDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateColumnDefinitionDryRunWithBody request with any body
	UpdateColumnDefinitionDryRunWithBody(ctx context.Context, id string, params *UpdateColumnDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateColumnDefinitionDryRun(ctx context.Context, id string, params *UpdateColumnDefinitionDryRunParams, body UpdateColumnDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDictionaryDefinitionWithBody request with any body
	CreateDictionaryDefinitionWithBody(ctx context.Context, params *CreateDictionaryDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDictionaryDefinition(ctx context.Context, params *CreateDictionaryDefinitionParams, body CreateDictionaryDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDictionaryDefinition request
	DeleteDictionaryDefinition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUpdateWithBody request with any body
	PatchUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUpdate(ctx context.Context, id string, body PatchUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDictionaryDefinitionWithBody request with any body
	UpdateDictionaryDefinitionWithBody(ctx context.Context, id string, params *UpdateDictionaryDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDictionaryDefinition(ctx context.Context, id string, params *UpdateDictionaryDefinitionParams, body UpdateDictionaryDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDictionaryParent request
	DeleteDictionaryParent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDictionaryParent request
	SetDictionaryParent(ctx context.Context, id string, parentDefinitionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDictionaryAttributeWithBody request with any body
	CreateDictionaryAttributeWithBody(ctx context.Context, id string, params *CreateDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDictionaryAttribute(ctx context.Context, id string, params *CreateDictionaryAttributeParams, body CreateDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CountDictionaryAttributesWithBody request with any body
	CountDictionaryAttributesWithBody(ctx context.Context, id string, params *CountDictionaryAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CountDictionaryAttributes(ctx context.Context, id string, params *CountDictionaryAttributesParams, body CountDictionaryAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindFilteredDictionaryAttributesWithBody request with any body
	FindFilteredDictionaryAttributesWithBody(ctx context.Context, id string, params *FindFilteredDictionaryAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindFilteredDictionaryAttributes(ctx context.Context, id string, params *FindFilteredDictionaryAttributesParams, body FindFilteredDictionaryAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindFilteredDictionaryDefinitionsWithBody request with any body
	FindFilteredDictionaryDefinitionsWithBody(ctx context.Context, id string, params *FindFilteredDictionaryDefinitionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindFilteredDictionaryDefinitions(ctx context.Context, id string, params *FindFilteredDictionaryDefinitionsParams, body FindFilteredDictionaryDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDictionaryAttribute request
	DeleteDictionaryAttribute(ctx context.Context, id string, valueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDictionaryAttribute request
	GetDictionaryAttribute(ctx context.Context, id string, valueId string, params *GetDictionaryAttributeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDictionaryAttributeWithBody request with any body
	UpdateDictionaryAttributeWithBody(ctx context.Context, id string, valueId string, params *UpdateDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDictionaryAttribute(ctx context.Context, id string, valueId string, params *UpdateDictionaryAttributeParams, body UpdateDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDictionaryFilter request
	DeleteDictionaryFilter(ctx context.Context, id string, valueId string, parentValueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDictionaryValueFilter request
	CreateDictionaryValueFilter(ctx context.Context, id string, valueId string, parentValueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindFilteredAttributeDefinitionsWithBody request with any body
	FindFilteredAttributeDefinitionsWithBody(ctx context.Context, params *FindFilteredAttributeDefinitionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindFilteredAttributeDefinitions(ctx context.Context, params *FindFilteredAttributeDefinitionsParams, body FindFilteredAttributeDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMatrixDefinitionWithBody request with any body
	CreateMatrixDefinitionWithBody(ctx context.Context, params *CreateMatrixDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMatrixDefinition(ctx context.Context, params *CreateMatrixDefinitionParams, body CreateMatrixDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMatrixDefinitionWithBody request with any body
	UpdateMatrixDefinitionWithBody(ctx context.Context, id string, params *UpdateMatrixDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMatrixDefinition(ctx context.Context, id string, params *UpdateMatrixDefinitionParams, body UpdateMatrixDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMatrixDefinitionDryRunWithBody request with any body
	UpdateMatrixDefinitionDryRunWithBody(ctx context.Context, id string, params *UpdateMatrixDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMatrixDefinitionDryRun(ctx context.Context, id string, params *UpdateMatrixDefinitionDryRunParams, body UpdateMatrixDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindSimple request
	FindSimple(ctx context.Context, params *FindSimpleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAttributeDefinition request
	DeleteAttributeDefinition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttributeDefinition request
	GetAttributeDefinition(ctx context.Context, id string, params *GetAttributeDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMetadataWithBody request with any body
	UpdateMetadataWithBody(ctx context.Context, id string, params *UpdateMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMetadata(ctx context.Context, id string, params *UpdateMetadataParams, body UpdateMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAttributeDefinitionWithBody request with any body
	UpdateAttributeDefinitionWithBody(ctx context.Context, id string, params *UpdateAttributeDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAttributeDefinition(ctx context.Context, id string, params *UpdateAttributeDefinitionParams, body UpdateAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDryRun request
	DeleteDryRun(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAttributeDefinitionDryRunWithBody request with any body
	UpdateAttributeDefinitionDryRunWithBody(ctx context.Context, id string, params *UpdateAttributeDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAttributeDefinitionDryRun(ctx context.Context, id string, params *UpdateAttributeDefinitionDryRunParams, body UpdateAttributeDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetByDefinitionId request
	GetByDefinitionId(ctx context.Context, id string, params *GetByDefinitionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPolicyToAttributeDefinitionWithBody request with any body
	AddPolicyToAttributeDefinitionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPolicyToAttributeDefinition(ctx context.Context, id string, body AddPolicyToAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicyForAttributeDefinition request
	DeletePolicyForAttributeDefinition(ctx context.Context, id string, policyId string, policyType DeletePolicyForAttributeDefinitionParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindProducts request
	FindProducts(ctx context.Context, id string, params *FindProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoriesByPolicyId request
	GetCategoriesByPolicyId(ctx context.Context, id string, params *GetCategoriesByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoriesNodeByPolicyId request
	GetCategoriesNodeByPolicyId(ctx context.Context, id string, params *GetCategoriesNodeByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogNodeByPolicyId request
	GetCatalogNodeByPolicyId(ctx context.Context, id string, params *GetCatalogNodeByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCatalogByPolicyId request
	GetCatalogByPolicyId(ctx context.Context, id string, params *GetCatalogByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttributeDefinitionsByPolicyId request
	GetAttributeDefinitionsByPolicyId(ctx context.Context, id string, params *GetAttributeDefinitionsByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelationsByPolicyId request
	GetRelationsByPolicyId(ctx context.Context, id string, params *GetRelationsByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProducts request
	GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductWithBody request with any body
	CreateProductWithBody(ctx context.Context, params *CreateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProduct(ctx context.Context, params *CreateProductParams, body CreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveProductsByIdsWithBody request with any body
	ArchiveProductsByIdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArchiveProductsByIds(ctx context.Context, body ArchiveProductsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductsAttributeWithBody request with any body
	DeleteProductsAttributeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteProductsAttribute(ctx context.Context, body DeleteProductsAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateWithBody request with any body
	CreateOrUpdateWithBody(ctx context.Context, params *CreateOrUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdate(ctx context.Context, params *CreateOrUpdateParams, body CreateOrUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddAttributesByIdsWithBody request with any body
	AddAttributesByIdsWithBody(ctx context.Context, params *AddAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddAttributesByIds(ctx context.Context, params *AddAttributesByIdsParams, body AddAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertAttributesByIdsWithBody request with any body
	UpsertAttributesByIdsWithBody(ctx context.Context, params *UpsertAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertAttributesByIds(ctx context.Context, params *UpsertAttributesByIdsParams, body UpsertAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAttributesByIdsWithBody request with any body
	UpdateAttributesByIdsWithBody(ctx context.Context, params *UpdateAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAttributesByIds(ctx context.Context, params *UpdateAttributesByIdsParams, body UpdateAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignProductsToCategoryWithBody request with any body
	AssignProductsToCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignProductsToCategory(ctx context.Context, body AssignProductsToCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CopyAndUpdateProductWithBody request with any body
	CopyAndUpdateProductWithBody(ctx context.Context, params *CopyAndUpdateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CopyAndUpdateProduct(ctx context.Context, params *CopyAndUpdateProductParams, body CopyAndUpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CountFilteredProductsWithBody request with any body
	CountFilteredProductsWithBody(ctx context.Context, params *CountFilteredProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CountFilteredProducts(ctx context.Context, params *CountFilteredProductsParams, body CountFilteredProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsWithCursorAndViewsWithBody request with any body
	GetProductsWithCursorAndViewsWithBody(ctx context.Context, params *GetProductsWithCursorAndViewsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetProductsWithCursorAndViews(ctx context.Context, params *GetProductsWithCursorAndViewsParams, body GetProductsWithCursorAndViewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveLabelFromProductsWithBody request with any body
	RemoveLabelFromProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveLabelFromProducts(ctx context.Context, body RemoveLabelFromProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddLabelToProductsWithBody request with any body
	AddLabelToProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddLabelToProducts(ctx context.Context, body AddLabelToProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProductsViewsByAssetsWithBody request with any body
	ListProductsViewsByAssetsWithBody(ctx context.Context, params *ListProductsViewsByAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListProductsViewsByAssets(ctx context.Context, params *ListProductsViewsByAssetsParams, body ListProductsViewsByAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProductsViewsByIdsWithBody request with any body
	ListProductsViewsByIdsWithBody(ctx context.Context, params *ListProductsViewsByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListProductsViewsByIds(ctx context.Context, params *ListProductsViewsByIdsParams, body ListProductsViewsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProductsViewsByNumbersWithBody request with any body
	ListProductsViewsByNumbersWithBody(ctx context.Context, params *ListProductsViewsByNumbersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListProductsViewsByNumbers(ctx context.Context, params *ListProductsViewsByNumbersParams, body ListProductsViewsByNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeStatusesByIdsWithBody request with any body
	ChangeStatusesByIdsWithBody(ctx context.Context, params *ChangeStatusesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeStatusesByIds(ctx context.Context, params *ChangeStatusesByIdsParams, body ChangeStatusesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindProductTemplates request
	FindProductTemplates(ctx context.Context, params *FindProductTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductTemplate request
	DeleteProductTemplate(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductTemplate request
	GetProductTemplate(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductTemplateWithBody request with any body
	CreateProductTemplateWithBody(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProductTemplate(ctx context.Context, productId string, body CreateProductTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNameWithBody request with any body
	UpdateNameWithBody(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateName(ctx context.Context, productId string, body UpdateNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnarchiveProductsByIdsWithBody request with any body
	UnarchiveProductsByIdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnarchiveProductsByIds(ctx context.Context, body UnarchiveProductsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProduct request
	GetProduct(ctx context.Context, id string, params *GetProductParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductWithBody request with any body
	UpdateProductWithBody(ctx context.Context, id string, params *UpdateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProduct(ctx context.Context, id string, params *UpdateProductParams, body UpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductDetailsWithBody request with any body
	UpdateProductDetailsWithBody(ctx context.Context, id string, params *UpdateProductDetailsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProductDetails(ctx context.Context, id string, params *UpdateProductDetailsParams, body UpdateProductDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductAssets request
	GetProductAssets(ctx context.Context, id string, params *GetProductAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssociateAssetsWithBody request with any body
	AssociateAssetsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssociateAssets(ctx context.Context, id string, body AssociateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetProductAssetsWithBody request with any body
	SetProductAssetsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetProductAssets(ctx context.Context, id string, body SetProductAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisassociateAssetFromProduct request
	DisassociateAssetFromProduct(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssociateAssetWithProduct request
	AssociateAssetWithProduct(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveProductAsset request
	MoveProductAsset(ctx context.Context, id string, assetId string, params *MoveProductAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductAttributes request
	GetProductAttributes(ctx context.Context, id string, params *GetProductAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddProductAttributeWithBody request with any body
	AddProductAttributeWithBody(ctx context.Context, id string, params *AddProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddProductAttribute(ctx context.Context, id string, params *AddProductAttributeParams, body AddProductAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductAttributesWithBody request with any body
	UpdateProductAttributesWithBody(ctx context.Context, id string, params *UpdateProductAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProductAttributes(ctx context.Context, id string, params *UpdateProductAttributesParams, body UpdateProductAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddColumnAttributeWithBody request with any body
	AddColumnAttributeWithBody(ctx context.Context, id string, params *AddColumnAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddColumnAttribute(ctx context.Context, id string, params *AddColumnAttributeParams, body AddColumnAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateColumnAttributeWithBody request with any body
	UpdateColumnAttributeWithBody(ctx context.Context, id string, definitionId string, params *UpdateColumnAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateColumnAttribute(ctx context.Context, id string, definitionId string, params *UpdateColumnAttributeParams, body UpdateColumnAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDictionaryAttributeWithBody request with any body
	AddDictionaryAttributeWithBody(ctx context.Context, id string, params *AddDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDictionaryAttribute(ctx context.Context, id string, params *AddDictionaryAttributeParams, body AddDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDictionaryAttributeValuesForProductWithBody request with any body
	SetDictionaryAttributeValuesForProductWithBody(ctx context.Context, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetDictionaryAttributeValuesForProduct(ctx context.Context, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, body SetDictionaryAttributeValuesForProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMatrixAttributeWithBody request with any body
	AddMatrixAttributeWithBody(ctx context.Context, id string, params *AddMatrixAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMatrixAttribute(ctx context.Context, id string, params *AddMatrixAttributeParams, body AddMatrixAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMatrixAttributeWithBody request with any body
	UpdateMatrixAttributeWithBody(ctx context.Context, id string, definitionId string, params *UpdateMatrixAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMatrixAttribute(ctx context.Context, id string, definitionId string, params *UpdateMatrixAttributeParams, body UpdateMatrixAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductAttribute request
	DeleteProductAttribute(ctx context.Context, id string, definitionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductAttributeWithBody request with any body
	UpdateProductAttributeWithBody(ctx context.Context, id string, definitionId string, params *UpdateProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProductAttribute(ctx context.Context, id string, definitionId string, params *UpdateProductAttributeParams, body UpdateProductAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductBundle request
	CreateProductBundle(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductFromBundle request
	DeleteProductFromBundle(ctx context.Context, id string, complementaryProductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddProductToBundleWithBody request with any body
	AddProductToBundleWithBody(ctx context.Context, id string, complementaryProductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddProductToBundle(ctx context.Context, id string, complementaryProductId string, body AddProductToBundleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductBundleQuantityWithBody request with any body
	UpdateProductBundleQuantityWithBody(ctx context.Context, id string, complementaryProductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProductBundleQuantity(ctx context.Context, id string, complementaryProductId string, body UpdateProductBundleQuantityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveProductInBundle request
	MoveProductInBundle(ctx context.Context, id string, complementaryProductId string, params *MoveProductInBundleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsCategories request
	GetProductsCategories(ctx context.Context, id string, params *GetProductsCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddProductToCategoriesWithBody request with any body
	AddProductToCategoriesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddProductToCategories(ctx context.Context, id string, body AddProductToCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveProductFromCategory request
	RemoveProductFromCategory(ctx context.Context, id string, categoryId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductRelations request
	GetProductRelations(ctx context.Context, id string, params *GetProductRelationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoryConnectionsForProduct request
	GetCategoryConnectionsForProduct(ctx context.Context, id string, params *GetCategoryConnectionsForProductParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCategoryConnectionWithBody request with any body
	CreateCategoryConnectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCategoryConnection(ctx context.Context, id string, body CreateCategoryConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCategoryConnection request
	DeleteCategoryConnection(ctx context.Context, id string, relationId string, categoryId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductConnectionWithBody request with any body
	CreateProductConnectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProductConnection(ctx context.Context, id string, body CreateProductConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRelatedProductsRelationSortingOrderSource request
	UpdateRelatedProductsRelationSortingOrderSource(ctx context.Context, id string, sortingOrderSource UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductConnectionsByRelation request
	DeleteProductConnectionsByRelation(ctx context.Context, id string, relationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductForRelation request
	GetProductForRelation(ctx context.Context, id string, relationId string, params *GetProductForRelationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductConnectionsWithBody request with any body
	CreateProductConnectionsWithBody(ctx context.Context, id string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProductConnections(ctx context.Context, id string, relationId string, body CreateProductConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteManyProductConnectionsWithBody request with any body
	DeleteManyProductConnectionsWithBody(ctx context.Context, id string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteManyProductConnections(ctx context.Context, id string, relationId string, body DeleteManyProductConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrderProductRelation request
	UpdateOrderProductRelation(ctx context.Context, id string, relationId string, params *UpdateOrderProductRelationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProductConnection request
	DeleteProductConnection(ctx context.Context, id string, relationId string, connectedProductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrderProductConnections request
	UpdateOrderProductConnections(ctx context.Context, id string, relationId string, connectedProductId string, params *UpdateOrderProductConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConnectionQuantityWithBody request with any body
	UpdateConnectionQuantityWithBody(ctx context.Context, id string, rightProductId string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConnectionQuantity(ctx context.Context, id string, rightProductId string, relationId string, body UpdateConnectionQuantityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CopyProduct request
	CopyProduct(ctx context.Context, id string, params *CopyProductParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindProductViewsByIdWithBody request with any body
	FindProductViewsByIdWithBody(ctx context.Context, id string, params *FindProductViewsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindProductViewsById(ctx context.Context, id string, params *FindProductViewsByIdParams, body FindProductViewsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupedProductAttributes request
	GetGroupedProductAttributes(ctx context.Context, id string, params *GetGroupedProductAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsLabels request
	GetProductsLabels(ctx context.Context, id string, params *GetProductsLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddLabelsToProductWithBody request with any body
	AddLabelsToProductWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddLabelsToProduct(ctx context.Context, id string, body AddLabelsToProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveLabelFromProduct request
	RemoveLabelFromProduct(ctx context.Context, id string, labelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetProductGroup request
	SetProductGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductVariantAttribute request
	GetProductVariantAttribute(ctx context.Context, id string, definitionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductVariantAttributeWithBody request with any body
	UpdateProductVariantAttributeWithBody(ctx context.Context, id string, definitionId string, params *UpdateProductVariantAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProductVariantAttribute(ctx context.Context, id string, definitionId string, params *UpdateProductVariantAttributeParams, body UpdateProductVariantAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnassignProductVariant request
	UnassignProductVariant(ctx context.Context, id string, variantProductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddProductVariant request
	AddProductVariant(ctx context.Context, id string, variantProductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveProductVariant request
	MoveProductVariant(ctx context.Context, id string, variantProductId string, params *MoveProductVariantParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeStatus request
	ChangeStatus(ctx context.Context, id string, action ChangeStatusParamsAction, params *ChangeStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindRelations request
	FindRelations(ctx context.Context, params *FindRelationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRelationWithBody request with any body
	CreateRelationWithBody(ctx context.Context, params *CreateRelationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRelation(ctx context.Context, params *CreateRelationParams, body CreateRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilteredRelationsWithBody request with any body
	GetFilteredRelationsWithBody(ctx context.Context, params *GetFilteredRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetFilteredRelations(ctx context.Context, params *GetFilteredRelationsParams, body GetFilteredRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request
	Delete(ctx context.Context, id string, params *DeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindOne request
	FindOne(ctx context.Context, id string, params *FindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRelationWithBody request with any body
	UpdateRelationWithBody(ctx context.Context, id string, params *UpdateRelationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRelation(ctx context.Context, id string, params *UpdateRelationParams, body UpdateRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoryConnectionsByRelationId request
	GetCategoryConnectionsByRelationId(ctx context.Context, id string, params *GetCategoryConnectionsByRelationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrderRelation request
	UpdateOrderRelation(ctx context.Context, id string, params *UpdateOrderRelationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetByRelationId request
	GetByRelationId(ctx context.Context, id string, params *GetByRelationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPolicyToRelationWithBody request with any body
	AddPolicyToRelationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPolicyToRelation(ctx context.Context, id string, body AddPolicyToRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicyForRelation request
	DeletePolicyForRelation(ctx context.Context, id string, policyId string, policyType DeletePolicyForRelationParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductConnectionsByRelationId request
	GetProductConnectionsByRelationId(ctx context.Context, id string, params *GetProductConnectionsByRelationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateAttributeWithBody request with any body
	ValidateAttributeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateAttribute(ctx context.Context, body ValidateAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateProductsWithBody request with any body
	ValidateProductsWithBody(ctx context.Context, params *ValidateProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateProducts(ctx context.Context, params *ValidateProductsParams, body ValidateProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateValueWithBody request with any body
	ValidateValueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateValue(ctx context.Context, body ValidateValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SynchronizeAssets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSynchronizeAssetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAttributeGroups(ctx context.Context, params *FindAttributeGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAttributeGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttributeGroupWithBody(ctx context.Context, params *CreateAttributeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttributeGroupRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttributeGroup(ctx context.Context, params *CreateAttributeGroupParams, body CreateAttributeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttributeGroupRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindDefinitionsWithoutGroup(ctx context.Context, params *FindDefinitionsWithoutGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindDefinitionsWithoutGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetOtherDefinitionsOrderStrategy(ctx context.Context, params *SetOtherDefinitionsOrderStrategyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetOtherDefinitionsOrderStrategyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveAttributeDefinitionInGroup(ctx context.Context, definitionId string, params *MoveAttributeDefinitionInGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveAttributeDefinitionInGroupRequest(c.Server, definitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttributeRootGroup(ctx context.Context, params *GetAttributeRootGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttributeRootGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAttributeGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttributeGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveGroup(ctx context.Context, id string, params *MoveGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveGroupRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindDefinitionsInGroup(ctx context.Context, id string, params *FindDefinitionsInGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindDefinitionsInGroupRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDefinitionsOrderStrategyInGroup(ctx context.Context, id string, params *SetDefinitionsOrderStrategyInGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDefinitionsOrderStrategyInGroupRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveAttributeDefinition(ctx context.Context, id string, definitionId string, params *MoveAttributeDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveAttributeDefinitionRequest(c.Server, id, definitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenameWithBody(ctx context.Context, id string, params *RenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenameRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Rename(ctx context.Context, id string, params *RenameParams, body RenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenameRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNumberRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNumber(ctx context.Context, id string, body UpdateNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNumberRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCatalogs(ctx context.Context, params *ListCatalogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCatalogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoryWithBody(ctx context.Context, params *CreateCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategory(ctx context.Context, params *CreateCategoryParams, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoriesByAssetId(ctx context.Context, id string, params *GetCategoriesByAssetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesByAssetIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindByCategoryLevelAttributes(ctx context.Context, attributeDefinitionId string, params *FindByCategoryLevelAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindByCategoryLevelAttributesRequest(c.Server, attributeDefinitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilteredNodesWithBody(ctx context.Context, params *GetFilteredNodesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilteredNodesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilteredNodes(ctx context.Context, params *GetFilteredNodesParams, body GetFilteredNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilteredNodesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCategoryNode(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCategoryNodeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNode(ctx context.Context, id string, params *GetNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogNodeWithBody(ctx context.Context, id string, params *UpdateCatalogNodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogNodeRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogNode(ctx context.Context, id string, params *UpdateCatalogNodeParams, body UpdateCatalogNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogNodeRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoryAssets(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoryAssetsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisassociateAssetFromCategory(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisassociateAssetFromCategoryRequest(c.Server, id, assetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateAssetWithCategory(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateAssetWithCategoryRequest(c.Server, id, assetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveCategoryAsset(ctx context.Context, id string, assetId string, params *MoveCategoryAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveCategoryAssetRequest(c.Server, id, assetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAttributesAttachedToGivenNode(ctx context.Context, id string, params *ListAttributesAttachedToGivenNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAttributesAttachedToGivenNodeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAttributeFromNode(ctx context.Context, id string, attributeDefinitionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttributeFromNodeRequest(c.Server, id, attributeDefinitionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeAttributeValueWithBody(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeAttributeValueRequestWithBody(c.Server, id, attributeDefinitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeAttributeValue(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, body UpdateNodeAttributeValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeAttributeValueRequest(c.Server, id, attributeDefinitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogNodeAttributeWithBody(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogNodeAttributeRequestWithBody(c.Server, id, attributeDefinitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogNodeAttribute(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, body CreateCatalogNodeAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogNodeAttributeRequest(c.Server, id, attributeDefinitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogNodeAttributeColumnWithBody(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogNodeAttributeColumnRequestWithBody(c.Server, id, attributeDefinitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogNodeAttributeColumn(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, body CreateCatalogNodeAttributeColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogNodeAttributeColumnRequest(c.Server, id, attributeDefinitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeAttributeColumnValueWithBody(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeAttributeColumnValueRequestWithBody(c.Server, id, attributeDefinitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeAttributeColumnValue(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, body UpdateNodeAttributeColumnValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeAttributeColumnValueRequest(c.Server, id, attributeDefinitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogNodeAttributeCompound(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeCompoundParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogNodeAttributeCompoundRequest(c.Server, id, attributeDefinitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogNodeAttributeDictionary(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeDictionaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogNodeAttributeDictionaryRequest(c.Server, id, attributeDefinitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDictionaryAttributeValuesForCategoryWithBody(ctx context.Context, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDictionaryAttributeValuesForCategoryRequestWithBody(c.Server, id, attributeDefinitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDictionaryAttributeValuesForCategory(ctx context.Context, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, body SetDictionaryAttributeValuesForCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDictionaryAttributeValuesForCategoryRequest(c.Server, id, attributeDefinitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogNodeAttributeMatrixWithBody(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogNodeAttributeMatrixRequestWithBody(c.Server, id, attributeDefinitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCatalogNodeAttributeMatrix(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, body CreateCatalogNodeAttributeMatrixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCatalogNodeAttributeMatrixRequest(c.Server, id, attributeDefinitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeAttributeMatrixValueWithBody(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeAttributeMatrixValueRequestWithBody(c.Server, id, attributeDefinitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeAttributeMatrixValue(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, body UpdateNodeAttributeMatrixValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeAttributeMatrixValueRequest(c.Server, id, attributeDefinitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogNodeChildren(ctx context.Context, id string, params *GetCatalogNodeChildrenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogNodeChildrenRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveCatalogNodeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveCatalogNodeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveCatalogNode(ctx context.Context, id string, body MoveCatalogNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveCatalogNodeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCatalogNodeOrder(ctx context.Context, id string, params *UpdateCatalogNodeOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCatalogNodeOrderRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPathToNode(ctx context.Context, id string, params *GetPathToNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPathToNodeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetByCategoryNodeId(ctx context.Context, id string, params *GetByCategoryNodeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetByCategoryNodeIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToCategoryNodeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToCategoryNodeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToCategoryNode(ctx context.Context, id string, body AddPolicyToCategoryNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToCategoryNodeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicyByCategoryNodeAndPolicyId(ctx context.Context, id string, policyId string, policyType DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyByCategoryNodeAndPolicyIdRequest(c.Server, id, policyId, policyType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoryProducts(ctx context.Context, id string, params *GetCategoryProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoryProductsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCategoryProductsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCategoryProductsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCategoryProducts(ctx context.Context, id string, body AddCategoryProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCategoryProductsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicyByCategoryNodeId(ctx context.Context, id string, params *GetPolicyByCategoryNodeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyByCategoryNodeIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToProductsForCategoryNodeIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToProductsForCategoryNodeIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToProductsForCategoryNodeId(ctx context.Context, id string, body AddPolicyToProductsForCategoryNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToProductsForCategoryNodeIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicyFromProductsForCategoryNodeId(ctx context.Context, id string, policyId string, policyType DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyFromProductsForCategoryNodeIdRequest(c.Server, id, policyId, policyType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCategoryProducts(ctx context.Context, id string, productId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCategoryProductsRequest(c.Server, id, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Archive(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unarchive(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnarchiveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoryTree(ctx context.Context, id string, params *GetCategoryTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoryTreeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPoliciesByCategoryId(ctx context.Context, id string, params *GetPoliciesByCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoliciesByCategoryIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToCategoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToCategoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToCategory(ctx context.Context, id string, body AddPolicyToCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToCategoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicyByCategoryAndPolicyId(ctx context.Context, id string, policyId string, policyType DeletePolicyByCategoryAndPolicyIdParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyByCategoryAndPolicyIdRequest(c.Server, id, policyId, policyType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicyByCategoryId(ctx context.Context, id string, params *GetPolicyByCategoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyByCategoryIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToProductsForCategoryIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToProductsForCategoryIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToProductsForCategoryId(ctx context.Context, id string, body AddPolicyToProductsForCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToProductsForCategoryIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicyFromProductsForCategoryId(ctx context.Context, id string, policyId string, policyType DeletePolicyFromProductsForCategoryIdParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyFromProductsForCategoryIdRequest(c.Server, id, policyId, policyType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAllCompoundDefinitions(ctx context.Context, params *FindAllCompoundDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAllCompoundDefinitionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCompoundDefinitionWithBody(ctx context.Context, params *CreateCompoundDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCompoundDefinitionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCompoundDefinition(ctx context.Context, params *CreateCompoundDefinitionParams, body CreateCompoundDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCompoundDefinitionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindBySubDefinitions(ctx context.Context, attributeDefinitionId string, params *FindBySubDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindBySubDefinitionsRequest(c.Server, attributeDefinitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCompoundDefinition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCompoundDefinitionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompoundDefinition(ctx context.Context, id string, params *GetCompoundDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompoundDefinitionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompoundDefinitionWithBody(ctx context.Context, id string, params *UpdateCompoundDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompoundDefinitionRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCompoundDefinition(ctx context.Context, id string, params *UpdateCompoundDefinitionParams, body UpdateCompoundDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCompoundDefinitionRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindAllAttributeDefinitions(ctx context.Context, params *FindAllAttributeDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindAllAttributeDefinitionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttributeDefinitionWithBody(ctx context.Context, params *CreateAttributeDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttributeDefinitionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttributeDefinition(ctx context.Context, params *CreateAttributeDefinitionParams, body CreateAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttributeDefinitionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateColumnDefinitionWithBody(ctx context.Context, params *CreateColumnDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateColumnDefinitionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateColumnDefinition(ctx context.Context, params *CreateColumnDefinitionParams, body CreateColumnDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateColumnDefinitionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateColumnDefinitionWithBody(ctx context.Context, id string, params *UpdateColumnDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateColumnDefinitionRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateColumnDefinition(ctx context.Context, id string, params *UpdateColumnDefinitionParams, body UpdateColumnDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateColumnDefinitionRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateColumnDefinitionDryRunWithBody(ctx context.Context, id string, params *UpdateColumnDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateColumnDefinitionDryRunRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateColumnDefinitionDryRun(ctx context.Context, id string, params *UpdateColumnDefinitionDryRunParams, body UpdateColumnDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateColumnDefinitionDryRunRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDictionaryDefinitionWithBody(ctx context.Context, params *CreateDictionaryDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDictionaryDefinitionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDictionaryDefinition(ctx context.Context, params *CreateDictionaryDefinitionParams, body CreateDictionaryDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDictionaryDefinitionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDictionaryDefinition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDictionaryDefinitionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUpdate(ctx context.Context, id string, body PatchUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDictionaryDefinitionWithBody(ctx context.Context, id string, params *UpdateDictionaryDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDictionaryDefinitionRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDictionaryDefinition(ctx context.Context, id string, params *UpdateDictionaryDefinitionParams, body UpdateDictionaryDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDictionaryDefinitionRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDictionaryParent(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDictionaryParentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDictionaryParent(ctx context.Context, id string, parentDefinitionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDictionaryParentRequest(c.Server, id, parentDefinitionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDictionaryAttributeWithBody(ctx context.Context, id string, params *CreateDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDictionaryAttributeRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDictionaryAttribute(ctx context.Context, id string, params *CreateDictionaryAttributeParams, body CreateDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDictionaryAttributeRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountDictionaryAttributesWithBody(ctx context.Context, id string, params *CountDictionaryAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountDictionaryAttributesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountDictionaryAttributes(ctx context.Context, id string, params *CountDictionaryAttributesParams, body CountDictionaryAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountDictionaryAttributesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFilteredDictionaryAttributesWithBody(ctx context.Context, id string, params *FindFilteredDictionaryAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFilteredDictionaryAttributesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFilteredDictionaryAttributes(ctx context.Context, id string, params *FindFilteredDictionaryAttributesParams, body FindFilteredDictionaryAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFilteredDictionaryAttributesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFilteredDictionaryDefinitionsWithBody(ctx context.Context, id string, params *FindFilteredDictionaryDefinitionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFilteredDictionaryDefinitionsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFilteredDictionaryDefinitions(ctx context.Context, id string, params *FindFilteredDictionaryDefinitionsParams, body FindFilteredDictionaryDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFilteredDictionaryDefinitionsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDictionaryAttribute(ctx context.Context, id string, valueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDictionaryAttributeRequest(c.Server, id, valueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDictionaryAttribute(ctx context.Context, id string, valueId string, params *GetDictionaryAttributeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDictionaryAttributeRequest(c.Server, id, valueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDictionaryAttributeWithBody(ctx context.Context, id string, valueId string, params *UpdateDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDictionaryAttributeRequestWithBody(c.Server, id, valueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDictionaryAttribute(ctx context.Context, id string, valueId string, params *UpdateDictionaryAttributeParams, body UpdateDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDictionaryAttributeRequest(c.Server, id, valueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDictionaryFilter(ctx context.Context, id string, valueId string, parentValueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDictionaryFilterRequest(c.Server, id, valueId, parentValueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDictionaryValueFilter(ctx context.Context, id string, valueId string, parentValueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDictionaryValueFilterRequest(c.Server, id, valueId, parentValueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFilteredAttributeDefinitionsWithBody(ctx context.Context, params *FindFilteredAttributeDefinitionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFilteredAttributeDefinitionsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFilteredAttributeDefinitions(ctx context.Context, params *FindFilteredAttributeDefinitionsParams, body FindFilteredAttributeDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFilteredAttributeDefinitionsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMatrixDefinitionWithBody(ctx context.Context, params *CreateMatrixDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMatrixDefinitionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMatrixDefinition(ctx context.Context, params *CreateMatrixDefinitionParams, body CreateMatrixDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMatrixDefinitionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMatrixDefinitionWithBody(ctx context.Context, id string, params *UpdateMatrixDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMatrixDefinitionRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMatrixDefinition(ctx context.Context, id string, params *UpdateMatrixDefinitionParams, body UpdateMatrixDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMatrixDefinitionRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMatrixDefinitionDryRunWithBody(ctx context.Context, id string, params *UpdateMatrixDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMatrixDefinitionDryRunRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMatrixDefinitionDryRun(ctx context.Context, id string, params *UpdateMatrixDefinitionDryRunParams, body UpdateMatrixDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMatrixDefinitionDryRunRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindSimple(ctx context.Context, params *FindSimpleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindSimpleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAttributeDefinition(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttributeDefinitionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttributeDefinition(ctx context.Context, id string, params *GetAttributeDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttributeDefinitionRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMetadataWithBody(ctx context.Context, id string, params *UpdateMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMetadataRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMetadata(ctx context.Context, id string, params *UpdateMetadataParams, body UpdateMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMetadataRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAttributeDefinitionWithBody(ctx context.Context, id string, params *UpdateAttributeDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAttributeDefinitionRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAttributeDefinition(ctx context.Context, id string, params *UpdateAttributeDefinitionParams, body UpdateAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAttributeDefinitionRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDryRun(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDryRunRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAttributeDefinitionDryRunWithBody(ctx context.Context, id string, params *UpdateAttributeDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAttributeDefinitionDryRunRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAttributeDefinitionDryRun(ctx context.Context, id string, params *UpdateAttributeDefinitionDryRunParams, body UpdateAttributeDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAttributeDefinitionDryRunRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetByDefinitionId(ctx context.Context, id string, params *GetByDefinitionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetByDefinitionIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToAttributeDefinitionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToAttributeDefinitionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToAttributeDefinition(ctx context.Context, id string, body AddPolicyToAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToAttributeDefinitionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicyForAttributeDefinition(ctx context.Context, id string, policyId string, policyType DeletePolicyForAttributeDefinitionParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyForAttributeDefinitionRequest(c.Server, id, policyId, policyType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindProducts(ctx context.Context, id string, params *FindProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindProductsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoriesByPolicyId(ctx context.Context, id string, params *GetCategoriesByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesByPolicyIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoriesNodeByPolicyId(ctx context.Context, id string, params *GetCategoriesNodeByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesNodeByPolicyIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogNodeByPolicyId(ctx context.Context, id string, params *GetCatalogNodeByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogNodeByPolicyIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCatalogByPolicyId(ctx context.Context, id string, params *GetCatalogByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCatalogByPolicyIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttributeDefinitionsByPolicyId(ctx context.Context, id string, params *GetAttributeDefinitionsByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttributeDefinitionsByPolicyIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelationsByPolicyId(ctx context.Context, id string, params *GetRelationsByPolicyIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelationsByPolicyIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductWithBody(ctx context.Context, params *CreateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProduct(ctx context.Context, params *CreateProductParams, body CreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveProductsByIdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveProductsByIdsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveProductsByIds(ctx context.Context, body ArchiveProductsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveProductsByIdsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductsAttributeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductsAttributeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductsAttribute(ctx context.Context, body DeleteProductsAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductsAttributeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateWithBody(ctx context.Context, params *CreateOrUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdate(ctx context.Context, params *CreateOrUpdateParams, body CreateOrUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAttributesByIdsWithBody(ctx context.Context, params *AddAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAttributesByIdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddAttributesByIds(ctx context.Context, params *AddAttributesByIdsParams, body AddAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddAttributesByIdsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertAttributesByIdsWithBody(ctx context.Context, params *UpsertAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertAttributesByIdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertAttributesByIds(ctx context.Context, params *UpsertAttributesByIdsParams, body UpsertAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertAttributesByIdsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAttributesByIdsWithBody(ctx context.Context, params *UpdateAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAttributesByIdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAttributesByIds(ctx context.Context, params *UpdateAttributesByIdsParams, body UpdateAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAttributesByIdsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignProductsToCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignProductsToCategoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignProductsToCategory(ctx context.Context, body AssignProductsToCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignProductsToCategoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CopyAndUpdateProductWithBody(ctx context.Context, params *CopyAndUpdateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCopyAndUpdateProductRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CopyAndUpdateProduct(ctx context.Context, params *CopyAndUpdateProductParams, body CopyAndUpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCopyAndUpdateProductRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountFilteredProductsWithBody(ctx context.Context, params *CountFilteredProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountFilteredProductsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountFilteredProducts(ctx context.Context, params *CountFilteredProductsParams, body CountFilteredProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountFilteredProductsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsWithCursorAndViewsWithBody(ctx context.Context, params *GetProductsWithCursorAndViewsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsWithCursorAndViewsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsWithCursorAndViews(ctx context.Context, params *GetProductsWithCursorAndViewsParams, body GetProductsWithCursorAndViewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsWithCursorAndViewsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveLabelFromProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveLabelFromProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveLabelFromProducts(ctx context.Context, body RemoveLabelFromProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveLabelFromProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddLabelToProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddLabelToProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddLabelToProducts(ctx context.Context, body AddLabelToProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddLabelToProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProductsViewsByAssetsWithBody(ctx context.Context, params *ListProductsViewsByAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProductsViewsByAssetsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProductsViewsByAssets(ctx context.Context, params *ListProductsViewsByAssetsParams, body ListProductsViewsByAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProductsViewsByAssetsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProductsViewsByIdsWithBody(ctx context.Context, params *ListProductsViewsByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProductsViewsByIdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProductsViewsByIds(ctx context.Context, params *ListProductsViewsByIdsParams, body ListProductsViewsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProductsViewsByIdsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProductsViewsByNumbersWithBody(ctx context.Context, params *ListProductsViewsByNumbersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProductsViewsByNumbersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProductsViewsByNumbers(ctx context.Context, params *ListProductsViewsByNumbersParams, body ListProductsViewsByNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProductsViewsByNumbersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeStatusesByIdsWithBody(ctx context.Context, params *ChangeStatusesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeStatusesByIdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeStatusesByIds(ctx context.Context, params *ChangeStatusesByIdsParams, body ChangeStatusesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeStatusesByIdsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindProductTemplates(ctx context.Context, params *FindProductTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindProductTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductTemplate(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductTemplateRequest(c.Server, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductTemplate(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductTemplateRequest(c.Server, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductTemplateWithBody(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductTemplateRequestWithBody(c.Server, productId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductTemplate(ctx context.Context, productId string, body CreateProductTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductTemplateRequest(c.Server, productId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNameWithBody(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNameRequestWithBody(c.Server, productId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateName(ctx context.Context, productId string, body UpdateNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNameRequest(c.Server, productId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnarchiveProductsByIdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnarchiveProductsByIdsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnarchiveProductsByIds(ctx context.Context, body UnarchiveProductsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnarchiveProductsByIdsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProduct(ctx context.Context, id string, params *GetProductParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductWithBody(ctx context.Context, id string, params *UpdateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProduct(ctx context.Context, id string, params *UpdateProductParams, body UpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductDetailsWithBody(ctx context.Context, id string, params *UpdateProductDetailsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductDetailsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductDetails(ctx context.Context, id string, params *UpdateProductDetailsParams, body UpdateProductDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductDetailsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductAssets(ctx context.Context, id string, params *GetProductAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductAssetsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateAssetsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateAssets(ctx context.Context, id string, body AssociateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetProductAssetsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetProductAssetsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetProductAssets(ctx context.Context, id string, body SetProductAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetProductAssetsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisassociateAssetFromProduct(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisassociateAssetFromProductRequest(c.Server, id, assetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateAssetWithProduct(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateAssetWithProductRequest(c.Server, id, assetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveProductAsset(ctx context.Context, id string, assetId string, params *MoveProductAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveProductAssetRequest(c.Server, id, assetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductAttributes(ctx context.Context, id string, params *GetProductAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductAttributesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProductAttributeWithBody(ctx context.Context, id string, params *AddProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProductAttributeRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProductAttribute(ctx context.Context, id string, params *AddProductAttributeParams, body AddProductAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProductAttributeRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductAttributesWithBody(ctx context.Context, id string, params *UpdateProductAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductAttributesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductAttributes(ctx context.Context, id string, params *UpdateProductAttributesParams, body UpdateProductAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductAttributesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddColumnAttributeWithBody(ctx context.Context, id string, params *AddColumnAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddColumnAttributeRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddColumnAttribute(ctx context.Context, id string, params *AddColumnAttributeParams, body AddColumnAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddColumnAttributeRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateColumnAttributeWithBody(ctx context.Context, id string, definitionId string, params *UpdateColumnAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateColumnAttributeRequestWithBody(c.Server, id, definitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateColumnAttribute(ctx context.Context, id string, definitionId string, params *UpdateColumnAttributeParams, body UpdateColumnAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateColumnAttributeRequest(c.Server, id, definitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDictionaryAttributeWithBody(ctx context.Context, id string, params *AddDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDictionaryAttributeRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDictionaryAttribute(ctx context.Context, id string, params *AddDictionaryAttributeParams, body AddDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDictionaryAttributeRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDictionaryAttributeValuesForProductWithBody(ctx context.Context, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDictionaryAttributeValuesForProductRequestWithBody(c.Server, id, definitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDictionaryAttributeValuesForProduct(ctx context.Context, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, body SetDictionaryAttributeValuesForProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDictionaryAttributeValuesForProductRequest(c.Server, id, definitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMatrixAttributeWithBody(ctx context.Context, id string, params *AddMatrixAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMatrixAttributeRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMatrixAttribute(ctx context.Context, id string, params *AddMatrixAttributeParams, body AddMatrixAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMatrixAttributeRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMatrixAttributeWithBody(ctx context.Context, id string, definitionId string, params *UpdateMatrixAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMatrixAttributeRequestWithBody(c.Server, id, definitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMatrixAttribute(ctx context.Context, id string, definitionId string, params *UpdateMatrixAttributeParams, body UpdateMatrixAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMatrixAttributeRequest(c.Server, id, definitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductAttribute(ctx context.Context, id string, definitionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductAttributeRequest(c.Server, id, definitionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductAttributeWithBody(ctx context.Context, id string, definitionId string, params *UpdateProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductAttributeRequestWithBody(c.Server, id, definitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductAttribute(ctx context.Context, id string, definitionId string, params *UpdateProductAttributeParams, body UpdateProductAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductAttributeRequest(c.Server, id, definitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductBundle(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductBundleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductFromBundle(ctx context.Context, id string, complementaryProductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductFromBundleRequest(c.Server, id, complementaryProductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProductToBundleWithBody(ctx context.Context, id string, complementaryProductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProductToBundleRequestWithBody(c.Server, id, complementaryProductId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProductToBundle(ctx context.Context, id string, complementaryProductId string, body AddProductToBundleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProductToBundleRequest(c.Server, id, complementaryProductId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductBundleQuantityWithBody(ctx context.Context, id string, complementaryProductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductBundleQuantityRequestWithBody(c.Server, id, complementaryProductId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductBundleQuantity(ctx context.Context, id string, complementaryProductId string, body UpdateProductBundleQuantityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductBundleQuantityRequest(c.Server, id, complementaryProductId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveProductInBundle(ctx context.Context, id string, complementaryProductId string, params *MoveProductInBundleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveProductInBundleRequest(c.Server, id, complementaryProductId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsCategories(ctx context.Context, id string, params *GetProductsCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsCategoriesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProductToCategoriesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProductToCategoriesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProductToCategories(ctx context.Context, id string, body AddProductToCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProductToCategoriesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveProductFromCategory(ctx context.Context, id string, categoryId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveProductFromCategoryRequest(c.Server, id, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductRelations(ctx context.Context, id string, params *GetProductRelationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductRelationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoryConnectionsForProduct(ctx context.Context, id string, params *GetCategoryConnectionsForProductParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoryConnectionsForProductRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoryConnectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryConnectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoryConnection(ctx context.Context, id string, body CreateCategoryConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryConnectionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCategoryConnection(ctx context.Context, id string, relationId string, categoryId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCategoryConnectionRequest(c.Server, id, relationId, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductConnectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductConnectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductConnection(ctx context.Context, id string, body CreateProductConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductConnectionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRelatedProductsRelationSortingOrderSource(ctx context.Context, id string, sortingOrderSource UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRelatedProductsRelationSortingOrderSourceRequest(c.Server, id, sortingOrderSource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductConnectionsByRelation(ctx context.Context, id string, relationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductConnectionsByRelationRequest(c.Server, id, relationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductForRelation(ctx context.Context, id string, relationId string, params *GetProductForRelationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductForRelationRequest(c.Server, id, relationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductConnectionsWithBody(ctx context.Context, id string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductConnectionsRequestWithBody(c.Server, id, relationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProductConnections(ctx context.Context, id string, relationId string, body CreateProductConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductConnectionsRequest(c.Server, id, relationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteManyProductConnectionsWithBody(ctx context.Context, id string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteManyProductConnectionsRequestWithBody(c.Server, id, relationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteManyProductConnections(ctx context.Context, id string, relationId string, body DeleteManyProductConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteManyProductConnectionsRequest(c.Server, id, relationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderProductRelation(ctx context.Context, id string, relationId string, params *UpdateOrderProductRelationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderProductRelationRequest(c.Server, id, relationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProductConnection(ctx context.Context, id string, relationId string, connectedProductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductConnectionRequest(c.Server, id, relationId, connectedProductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderProductConnections(ctx context.Context, id string, relationId string, connectedProductId string, params *UpdateOrderProductConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderProductConnectionsRequest(c.Server, id, relationId, connectedProductId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectionQuantityWithBody(ctx context.Context, id string, rightProductId string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionQuantityRequestWithBody(c.Server, id, rightProductId, relationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectionQuantity(ctx context.Context, id string, rightProductId string, relationId string, body UpdateConnectionQuantityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionQuantityRequest(c.Server, id, rightProductId, relationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CopyProduct(ctx context.Context, id string, params *CopyProductParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCopyProductRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindProductViewsByIdWithBody(ctx context.Context, id string, params *FindProductViewsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindProductViewsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindProductViewsById(ctx context.Context, id string, params *FindProductViewsByIdParams, body FindProductViewsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindProductViewsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupedProductAttributes(ctx context.Context, id string, params *GetGroupedProductAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupedProductAttributesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsLabels(ctx context.Context, id string, params *GetProductsLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsLabelsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddLabelsToProductWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddLabelsToProductRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddLabelsToProduct(ctx context.Context, id string, body AddLabelsToProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddLabelsToProductRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveLabelFromProduct(ctx context.Context, id string, labelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveLabelFromProductRequest(c.Server, id, labelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetProductGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetProductGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductVariantAttribute(ctx context.Context, id string, definitionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductVariantAttributeRequest(c.Server, id, definitionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductVariantAttributeWithBody(ctx context.Context, id string, definitionId string, params *UpdateProductVariantAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductVariantAttributeRequestWithBody(c.Server, id, definitionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProductVariantAttribute(ctx context.Context, id string, definitionId string, params *UpdateProductVariantAttributeParams, body UpdateProductVariantAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductVariantAttributeRequest(c.Server, id, definitionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnassignProductVariant(ctx context.Context, id string, variantProductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnassignProductVariantRequest(c.Server, id, variantProductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddProductVariant(ctx context.Context, id string, variantProductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddProductVariantRequest(c.Server, id, variantProductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveProductVariant(ctx context.Context, id string, variantProductId string, params *MoveProductVariantParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveProductVariantRequest(c.Server, id, variantProductId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeStatus(ctx context.Context, id string, action ChangeStatusParamsAction, params *ChangeStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeStatusRequest(c.Server, id, action, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindRelations(ctx context.Context, params *FindRelationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindRelationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRelationWithBody(ctx context.Context, params *CreateRelationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRelationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRelation(ctx context.Context, params *CreateRelationParams, body CreateRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRelationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilteredRelationsWithBody(ctx context.Context, params *GetFilteredRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilteredRelationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilteredRelations(ctx context.Context, params *GetFilteredRelationsParams, body GetFilteredRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilteredRelationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete(ctx context.Context, id string, params *DeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindOne(ctx context.Context, id string, params *FindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindOneRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRelationWithBody(ctx context.Context, id string, params *UpdateRelationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRelationRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRelation(ctx context.Context, id string, params *UpdateRelationParams, body UpdateRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRelationRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoryConnectionsByRelationId(ctx context.Context, id string, params *GetCategoryConnectionsByRelationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoryConnectionsByRelationIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderRelation(ctx context.Context, id string, params *UpdateOrderRelationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderRelationRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetByRelationId(ctx context.Context, id string, params *GetByRelationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetByRelationIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToRelationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToRelationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPolicyToRelation(ctx context.Context, id string, body AddPolicyToRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPolicyToRelationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicyForRelation(ctx context.Context, id string, policyId string, policyType DeletePolicyForRelationParamsPolicyType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyForRelationRequest(c.Server, id, policyId, policyType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductConnectionsByRelationId(ctx context.Context, id string, params *GetProductConnectionsByRelationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductConnectionsByRelationIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateAttributeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateAttributeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateAttribute(ctx context.Context, body ValidateAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateAttributeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateProductsWithBody(ctx context.Context, params *ValidateProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateProductsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateProducts(ctx context.Context, params *ValidateProductsParams, body ValidateProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateProductsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateValueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateValueRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateValue(ctx context.Context, body ValidateValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateValueRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSynchronizeAssetsRequest generates requests for SynchronizeAssets
func NewSynchronizeAssetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobStatusRequest generates requests for GetJobStatus
func NewGetJobStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/async/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindAttributeGroupsRequest generates requests for FindAttributeGroups
func NewFindAttributeGroupsRequest(server string, params *FindAttributeGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateAttributeGroupRequest calls the generic CreateAttributeGroup builder with application/json body
func NewCreateAttributeGroupRequest(server string, params *CreateAttributeGroupParams, body CreateAttributeGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAttributeGroupRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateAttributeGroupRequestWithBody generates requests for CreateAttributeGroup with any type of body
func NewCreateAttributeGroupRequestWithBody(server string, params *CreateAttributeGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewFindDefinitionsWithoutGroupRequest generates requests for FindDefinitionsWithoutGroup
func NewFindDefinitionsWithoutGroupRequest(server string, params *FindDefinitionsWithoutGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/other/definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewSetOtherDefinitionsOrderStrategyRequest generates requests for SetOtherDefinitionsOrderStrategy
func NewSetOtherDefinitionsOrderStrategyRequest(server string, params *SetOtherDefinitionsOrderStrategyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/other/definitions/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderByName", runtime.ParamLocationQuery, params.OrderByName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoveAttributeDefinitionInGroupRequest generates requests for MoveAttributeDefinitionInGroup
func NewMoveAttributeDefinitionInGroupRequest(server string, definitionId string, params *MoveAttributeDefinitionInGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/other/definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttributeRootGroupRequest generates requests for GetAttributeRootGroup
func NewGetAttributeRootGroupRequest(server string, params *GetAttributeRootGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/rootGroup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteAttributeGroupRequest generates requests for DeleteAttributeGroup
func NewDeleteAttributeGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoveGroupRequest generates requests for MoveGroup
func NewMoveGroupRequest(server string, id string, params *MoveGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindDefinitionsInGroupRequest generates requests for FindDefinitionsInGroup
func NewFindDefinitionsInGroupRequest(server string, id string, params *FindDefinitionsInGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/%s/definitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewSetDefinitionsOrderStrategyInGroupRequest generates requests for SetDefinitionsOrderStrategyInGroup
func NewSetDefinitionsOrderStrategyInGroupRequest(server string, id string, params *SetDefinitionsOrderStrategyInGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/%s/definitions/order", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderByName", runtime.ParamLocationQuery, params.OrderByName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoveAttributeDefinitionRequest generates requests for MoveAttributeDefinition
func NewMoveAttributeDefinitionRequest(server string, id string, definitionId string, params *MoveAttributeDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/%s/definitions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRenameRequest calls the generic Rename builder with application/json body
func NewRenameRequest(server string, id string, params *RenameParams, body RenameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRenameRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewRenameRequestWithBody generates requests for Rename with any type of body
func NewRenameRequestWithBody(server string, id string, params *RenameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateNumberRequest calls the generic UpdateNumber builder with application/json body
func NewUpdateNumberRequest(server string, id string, body UpdateNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNumberRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateNumberRequestWithBody generates requests for UpdateNumber with any type of body
func NewUpdateNumberRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attributeGroups/%s/number", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCatalogsRequest generates requests for ListCatalogs
func NewListCatalogsRequest(server string, params *ListCatalogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateCategoryRequest calls the generic CreateCategory builder with application/json body
func NewCreateCategoryRequest(server string, params *CreateCategoryParams, body CreateCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCategoryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCategoryRequestWithBody generates requests for CreateCategory with any type of body
func NewCreateCategoryRequestWithBody(server string, params *CreateCategoryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetCategoriesByAssetIdRequest generates requests for GetCategoriesByAssetId
func NewGetCategoriesByAssetIdRequest(server string, id string, params *GetCategoriesByAssetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindByCategoryLevelAttributesRequest generates requests for FindByCategoryLevelAttributes
func NewFindByCategoryLevelAttributesRequest(server string, attributeDefinitionId string, params *FindByCategoryLevelAttributesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/attributeDefinition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewListRequest generates requests for List
func NewListRequest(server string, params *ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetFilteredNodesRequest calls the generic GetFilteredNodes builder with application/json body
func NewGetFilteredNodesRequest(server string, params *GetFilteredNodesParams, body GetFilteredNodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFilteredNodesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetFilteredNodesRequestWithBody generates requests for GetFilteredNodes with any type of body
func NewGetFilteredNodesRequestWithBody(server string, params *GetFilteredNodesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCategoryNodeRequest generates requests for DeleteCategoryNode
func NewDeleteCategoryNodeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodeRequest generates requests for GetNode
func NewGetNodeRequest(server string, id string, params *GetNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateCatalogNodeRequest calls the generic UpdateCatalogNode builder with application/json body
func NewUpdateCatalogNodeRequest(server string, id string, params *UpdateCatalogNodeParams, body UpdateCatalogNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCatalogNodeRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCatalogNodeRequestWithBody generates requests for UpdateCatalogNode with any type of body
func NewUpdateCatalogNodeRequestWithBody(server string, id string, params *UpdateCatalogNodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewGetCategoryAssetsRequest generates requests for GetCategoryAssets
func NewGetCategoryAssetsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDisassociateAssetFromCategoryRequest generates requests for DisassociateAssetFromCategory
func NewDisassociateAssetFromCategoryRequest(server string, id string, assetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssociateAssetWithCategoryRequest generates requests for AssociateAssetWithCategory
func NewAssociateAssetWithCategoryRequest(server string, id string, assetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoveCategoryAssetRequest generates requests for MoveCategoryAsset
func NewMoveCategoryAssetRequest(server string, id string, assetId string, params *MoveCategoryAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAttributesAttachedToGivenNodeRequest generates requests for ListAttributesAttachedToGivenNode
func NewListAttributesAttachedToGivenNodeRequest(server string, id string, params *ListAttributesAttachedToGivenNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteAttributeFromNodeRequest generates requests for DeleteAttributeFromNode
func NewDeleteAttributeFromNodeRequest(server string, id string, attributeDefinitionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNodeAttributeValueRequest calls the generic UpdateNodeAttributeValue builder with application/json body
func NewUpdateNodeAttributeValueRequest(server string, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, body UpdateNodeAttributeValueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNodeAttributeValueRequestWithBody(server, id, attributeDefinitionId, params, "application/json", bodyReader)
}

// NewUpdateNodeAttributeValueRequestWithBody generates requests for UpdateNodeAttributeValue with any type of body
func NewUpdateNodeAttributeValueRequestWithBody(server string, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceCla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceCla", runtime.ParamLocationQuery, *params.ForceCla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCatalogNodeAttributeRequest calls the generic CreateCatalogNodeAttribute builder with application/json body
func NewCreateCatalogNodeAttributeRequest(server string, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, body CreateCatalogNodeAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogNodeAttributeRequestWithBody(server, id, attributeDefinitionId, params, "application/json", bodyReader)
}

// NewCreateCatalogNodeAttributeRequestWithBody generates requests for CreateCatalogNodeAttribute with any type of body
func NewCreateCatalogNodeAttributeRequestWithBody(server string, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceCla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceCla", runtime.ParamLocationQuery, *params.ForceCla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateCatalogNodeAttributeColumnRequest calls the generic CreateCatalogNodeAttributeColumn builder with application/json body
func NewCreateCatalogNodeAttributeColumnRequest(server string, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, body CreateCatalogNodeAttributeColumnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogNodeAttributeColumnRequestWithBody(server, id, attributeDefinitionId, params, "application/json", bodyReader)
}

// NewCreateCatalogNodeAttributeColumnRequestWithBody generates requests for CreateCatalogNodeAttributeColumn with any type of body
func NewCreateCatalogNodeAttributeColumnRequestWithBody(server string, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s/column", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceCla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceCla", runtime.ParamLocationQuery, *params.ForceCla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNodeAttributeColumnValueRequest calls the generic UpdateNodeAttributeColumnValue builder with application/json body
func NewUpdateNodeAttributeColumnValueRequest(server string, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, body UpdateNodeAttributeColumnValueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNodeAttributeColumnValueRequestWithBody(server, id, attributeDefinitionId, params, "application/json", bodyReader)
}

// NewUpdateNodeAttributeColumnValueRequestWithBody generates requests for UpdateNodeAttributeColumnValue with any type of body
func NewUpdateNodeAttributeColumnValueRequestWithBody(server string, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s/column", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceCla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceCla", runtime.ParamLocationQuery, *params.ForceCla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCatalogNodeAttributeCompoundRequest generates requests for CreateCatalogNodeAttributeCompound
func NewCreateCatalogNodeAttributeCompoundRequest(server string, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeCompoundParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s/compound", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateCatalogNodeAttributeDictionaryRequest generates requests for CreateCatalogNodeAttributeDictionary
func NewCreateCatalogNodeAttributeDictionaryRequest(server string, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeDictionaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s/dictionary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewSetDictionaryAttributeValuesForCategoryRequest calls the generic SetDictionaryAttributeValuesForCategory builder with application/json body
func NewSetDictionaryAttributeValuesForCategoryRequest(server string, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, body SetDictionaryAttributeValuesForCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetDictionaryAttributeValuesForCategoryRequestWithBody(server, id, attributeDefinitionId, params, "application/json", bodyReader)
}

// NewSetDictionaryAttributeValuesForCategoryRequestWithBody generates requests for SetDictionaryAttributeValuesForCategory with any type of body
func NewSetDictionaryAttributeValuesForCategoryRequestWithBody(server string, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s/dictionary/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceCla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceCla", runtime.ParamLocationQuery, *params.ForceCla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateCatalogNodeAttributeMatrixRequest calls the generic CreateCatalogNodeAttributeMatrix builder with application/json body
func NewCreateCatalogNodeAttributeMatrixRequest(server string, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, body CreateCatalogNodeAttributeMatrixJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCatalogNodeAttributeMatrixRequestWithBody(server, id, attributeDefinitionId, params, "application/json", bodyReader)
}

// NewCreateCatalogNodeAttributeMatrixRequestWithBody generates requests for CreateCatalogNodeAttributeMatrix with any type of body
func NewCreateCatalogNodeAttributeMatrixRequestWithBody(server string, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s/matrix", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceCla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceCla", runtime.ParamLocationQuery, *params.ForceCla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNodeAttributeMatrixValueRequest calls the generic UpdateNodeAttributeMatrixValue builder with application/json body
func NewUpdateNodeAttributeMatrixValueRequest(server string, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, body UpdateNodeAttributeMatrixValueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNodeAttributeMatrixValueRequestWithBody(server, id, attributeDefinitionId, params, "application/json", bodyReader)
}

// NewUpdateNodeAttributeMatrixValueRequestWithBody generates requests for UpdateNodeAttributeMatrixValue with any type of body
func NewUpdateNodeAttributeMatrixValueRequestWithBody(server string, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/attributes/%s/matrix", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceCla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceCla", runtime.ParamLocationQuery, *params.ForceCla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCatalogNodeChildrenRequest generates requests for GetCatalogNodeChildren
func NewGetCatalogNodeChildrenRequest(server string, id string, params *GetCatalogNodeChildrenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/children", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewMoveCatalogNodeRequest calls the generic MoveCatalogNode builder with application/json body
func NewMoveCatalogNodeRequest(server string, id string, body MoveCatalogNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveCatalogNodeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMoveCatalogNodeRequestWithBody generates requests for MoveCatalogNode with any type of body
func NewMoveCatalogNodeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/move", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCatalogNodeOrderRequest generates requests for UpdateCatalogNodeOrder
func NewUpdateCatalogNodeOrderRequest(server string, id string, params *UpdateCatalogNodeOrderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/order", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPathToNodeRequest generates requests for GetPathToNode
func NewGetPathToNodeRequest(server string, id string, params *GetPathToNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/path", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetByCategoryNodeIdRequest generates requests for GetByCategoryNodeId
func NewGetByCategoryNodeIdRequest(server string, id string, params *GetByCategoryNodeIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPolicyToCategoryNodeRequest calls the generic AddPolicyToCategoryNode builder with application/json body
func NewAddPolicyToCategoryNodeRequest(server string, id string, body AddPolicyToCategoryNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPolicyToCategoryNodeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddPolicyToCategoryNodeRequestWithBody generates requests for AddPolicyToCategoryNode with any type of body
func NewAddPolicyToCategoryNodeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyByCategoryNodeAndPolicyIdRequest generates requests for DeletePolicyByCategoryNodeAndPolicyId
func NewDeletePolicyByCategoryNodeAndPolicyIdRequest(server string, id string, policyId string, policyType DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyType", runtime.ParamLocationPath, policyType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/policy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoryProductsRequest generates requests for GetCategoryProducts
func NewGetCategoryProductsRequest(server string, id string, params *GetCategoryProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewAddCategoryProductsRequest calls the generic AddCategoryProducts builder with application/json body
func NewAddCategoryProductsRequest(server string, id string, body AddCategoryProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCategoryProductsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddCategoryProductsRequestWithBody generates requests for AddCategoryProducts with any type of body
func NewAddCategoryProductsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPolicyByCategoryNodeIdRequest generates requests for GetPolicyByCategoryNodeId
func NewGetPolicyByCategoryNodeIdRequest(server string, id string, params *GetPolicyByCategoryNodeIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/products/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPolicyToProductsForCategoryNodeIdRequest calls the generic AddPolicyToProductsForCategoryNodeId builder with application/json body
func NewAddPolicyToProductsForCategoryNodeIdRequest(server string, id string, body AddPolicyToProductsForCategoryNodeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPolicyToProductsForCategoryNodeIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddPolicyToProductsForCategoryNodeIdRequestWithBody generates requests for AddPolicyToProductsForCategoryNodeId with any type of body
func NewAddPolicyToProductsForCategoryNodeIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/products/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyFromProductsForCategoryNodeIdRequest generates requests for DeletePolicyFromProductsForCategoryNodeId
func NewDeletePolicyFromProductsForCategoryNodeIdRequest(server string, id string, policyId string, policyType DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyType", runtime.ParamLocationPath, policyType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/products/policy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCategoryProductsRequest generates requests for DeleteCategoryProducts
func NewDeleteCategoryProductsRequest(server string, id string, productId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/nodes/%s/products/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveRequest generates requests for Archive
func NewArchiveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnarchiveRequest generates requests for Unarchive
func NewUnarchiveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoryTreeRequest generates requests for GetCategoryTree
func NewGetCategoryTreeRequest(server string, id string, params *GetCategoryTreeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetPoliciesByCategoryIdRequest generates requests for GetPoliciesByCategoryId
func NewGetPoliciesByCategoryIdRequest(server string, id string, params *GetPoliciesByCategoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPolicyToCategoryRequest calls the generic AddPolicyToCategory builder with application/json body
func NewAddPolicyToCategoryRequest(server string, id string, body AddPolicyToCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPolicyToCategoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddPolicyToCategoryRequestWithBody generates requests for AddPolicyToCategory with any type of body
func NewAddPolicyToCategoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyByCategoryAndPolicyIdRequest generates requests for DeletePolicyByCategoryAndPolicyId
func NewDeletePolicyByCategoryAndPolicyIdRequest(server string, id string, policyId string, policyType DeletePolicyByCategoryAndPolicyIdParamsPolicyType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyType", runtime.ParamLocationPath, policyType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s/policy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyByCategoryIdRequest generates requests for GetPolicyByCategoryId
func NewGetPolicyByCategoryIdRequest(server string, id string, params *GetPolicyByCategoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s/products/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPolicyToProductsForCategoryIdRequest calls the generic AddPolicyToProductsForCategoryId builder with application/json body
func NewAddPolicyToProductsForCategoryIdRequest(server string, id string, body AddPolicyToProductsForCategoryIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPolicyToProductsForCategoryIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddPolicyToProductsForCategoryIdRequestWithBody generates requests for AddPolicyToProductsForCategoryId with any type of body
func NewAddPolicyToProductsForCategoryIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s/products/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyFromProductsForCategoryIdRequest generates requests for DeletePolicyFromProductsForCategoryId
func NewDeletePolicyFromProductsForCategoryIdRequest(server string, id string, policyId string, policyType DeletePolicyFromProductsForCategoryIdParamsPolicyType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyType", runtime.ParamLocationPath, policyType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalogs/%s/products/policy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindAllCompoundDefinitionsRequest generates requests for FindAllCompoundDefinitions
func NewFindAllCompoundDefinitionsRequest(server string, params *FindAllCompoundDefinitionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compoundDefinitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateCompoundDefinitionRequest calls the generic CreateCompoundDefinition builder with application/json body
func NewCreateCompoundDefinitionRequest(server string, params *CreateCompoundDefinitionParams, body CreateCompoundDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCompoundDefinitionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCompoundDefinitionRequestWithBody generates requests for CreateCompoundDefinition with any type of body
func NewCreateCompoundDefinitionRequestWithBody(server string, params *CreateCompoundDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compoundDefinitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewFindBySubDefinitionsRequest generates requests for FindBySubDefinitions
func NewFindBySubDefinitionsRequest(server string, attributeDefinitionId string, params *FindBySubDefinitionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attributeDefinitionId", runtime.ParamLocationPath, attributeDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compoundDefinitions/attributeDefinition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCompoundDefinitionRequest generates requests for DeleteCompoundDefinition
func NewDeleteCompoundDefinitionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compoundDefinitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompoundDefinitionRequest generates requests for GetCompoundDefinition
func NewGetCompoundDefinitionRequest(server string, id string, params *GetCompoundDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compoundDefinitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateCompoundDefinitionRequest calls the generic UpdateCompoundDefinition builder with application/json body
func NewUpdateCompoundDefinitionRequest(server string, id string, params *UpdateCompoundDefinitionParams, body UpdateCompoundDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCompoundDefinitionRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateCompoundDefinitionRequestWithBody generates requests for UpdateCompoundDefinition with any type of body
func NewUpdateCompoundDefinitionRequestWithBody(server string, id string, params *UpdateCompoundDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compoundDefinitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewFindAllAttributeDefinitionsRequest generates requests for FindAllAttributeDefinitions
func NewFindAllAttributeDefinitionsRequest(server string, params *FindAllAttributeDefinitionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateAttributeDefinitionRequest calls the generic CreateAttributeDefinition builder with application/json body
func NewCreateAttributeDefinitionRequest(server string, params *CreateAttributeDefinitionParams, body CreateAttributeDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAttributeDefinitionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateAttributeDefinitionRequestWithBody generates requests for CreateAttributeDefinition with any type of body
func NewCreateAttributeDefinitionRequestWithBody(server string, params *CreateAttributeDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Validation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, *params.Validation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateColumnDefinitionRequest calls the generic CreateColumnDefinition builder with application/json body
func NewCreateColumnDefinitionRequest(server string, params *CreateColumnDefinitionParams, body CreateColumnDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateColumnDefinitionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateColumnDefinitionRequestWithBody generates requests for CreateColumnDefinition with any type of body
func NewCreateColumnDefinitionRequestWithBody(server string, params *CreateColumnDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/column")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateColumnDefinitionRequest calls the generic UpdateColumnDefinition builder with application/json body
func NewUpdateColumnDefinitionRequest(server string, id string, params *UpdateColumnDefinitionParams, body UpdateColumnDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateColumnDefinitionRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateColumnDefinitionRequestWithBody generates requests for UpdateColumnDefinition with any type of body
func NewUpdateColumnDefinitionRequestWithBody(server string, id string, params *UpdateColumnDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/column/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateColumnDefinitionDryRunRequest calls the generic UpdateColumnDefinitionDryRun builder with application/json body
func NewUpdateColumnDefinitionDryRunRequest(server string, id string, params *UpdateColumnDefinitionDryRunParams, body UpdateColumnDefinitionDryRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateColumnDefinitionDryRunRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateColumnDefinitionDryRunRequestWithBody generates requests for UpdateColumnDefinitionDryRun with any type of body
func NewUpdateColumnDefinitionDryRunRequestWithBody(server string, id string, params *UpdateColumnDefinitionDryRunParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/column/%s/dryrun", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDictionaryDefinitionRequest calls the generic CreateDictionaryDefinition builder with application/json body
func NewCreateDictionaryDefinitionRequest(server string, params *CreateDictionaryDefinitionParams, body CreateDictionaryDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDictionaryDefinitionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateDictionaryDefinitionRequestWithBody generates requests for CreateDictionaryDefinition with any type of body
func NewCreateDictionaryDefinitionRequestWithBody(server string, params *CreateDictionaryDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteDictionaryDefinitionRequest generates requests for DeleteDictionaryDefinition
func NewDeleteDictionaryDefinitionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUpdateRequest calls the generic PatchUpdate builder with application/json body
func NewPatchUpdateRequest(server string, id string, body PatchUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchUpdateRequestWithBody generates requests for PatchUpdate with any type of body
func NewPatchUpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDictionaryDefinitionRequest calls the generic UpdateDictionaryDefinition builder with application/json body
func NewUpdateDictionaryDefinitionRequest(server string, id string, params *UpdateDictionaryDefinitionParams, body UpdateDictionaryDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDictionaryDefinitionRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateDictionaryDefinitionRequestWithBody generates requests for UpdateDictionaryDefinition with any type of body
func NewUpdateDictionaryDefinitionRequestWithBody(server string, id string, params *UpdateDictionaryDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteDictionaryParentRequest generates requests for DeleteDictionaryParent
func NewDeleteDictionaryParentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/filter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetDictionaryParentRequest generates requests for SetDictionaryParent
func NewSetDictionaryParentRequest(server string, id string, parentDefinitionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parentDefinitionId", runtime.ParamLocationPath, parentDefinitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/filter/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDictionaryAttributeRequest calls the generic CreateDictionaryAttribute builder with application/json body
func NewCreateDictionaryAttributeRequest(server string, id string, params *CreateDictionaryAttributeParams, body CreateDictionaryAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDictionaryAttributeRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCreateDictionaryAttributeRequestWithBody generates requests for CreateDictionaryAttribute with any type of body
func NewCreateDictionaryAttributeRequestWithBody(server string, id string, params *CreateDictionaryAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewCountDictionaryAttributesRequest calls the generic CountDictionaryAttributes builder with application/json body
func NewCountDictionaryAttributesRequest(server string, id string, params *CountDictionaryAttributesParams, body CountDictionaryAttributesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCountDictionaryAttributesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewCountDictionaryAttributesRequestWithBody generates requests for CountDictionaryAttributes with any type of body
func NewCountDictionaryAttributesRequestWithBody(server string, id string, params *CountDictionaryAttributesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewFindFilteredDictionaryAttributesRequest calls the generic FindFilteredDictionaryAttributes builder with application/json body
func NewFindFilteredDictionaryAttributesRequest(server string, id string, params *FindFilteredDictionaryAttributesParams, body FindFilteredDictionaryAttributesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindFilteredDictionaryAttributesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewFindFilteredDictionaryAttributesRequestWithBody generates requests for FindFilteredDictionaryAttributes with any type of body
func NewFindFilteredDictionaryAttributesRequestWithBody(server string, id string, params *FindFilteredDictionaryAttributesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values/filter/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewFindFilteredDictionaryDefinitionsRequest calls the generic FindFilteredDictionaryDefinitions builder with application/json body
func NewFindFilteredDictionaryDefinitionsRequest(server string, id string, params *FindFilteredDictionaryDefinitionsParams, body FindFilteredDictionaryDefinitionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindFilteredDictionaryDefinitionsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewFindFilteredDictionaryDefinitionsRequestWithBody generates requests for FindFilteredDictionaryDefinitions with any type of body
func NewFindFilteredDictionaryDefinitionsRequestWithBody(server string, id string, params *FindFilteredDictionaryDefinitionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteDictionaryAttributeRequest generates requests for DeleteDictionaryAttribute
func NewDeleteDictionaryAttributeRequest(server string, id string, valueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "valueId", runtime.ParamLocationPath, valueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDictionaryAttributeRequest generates requests for GetDictionaryAttribute
func NewGetDictionaryAttributeRequest(server string, id string, valueId string, params *GetDictionaryAttributeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "valueId", runtime.ParamLocationPath, valueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateDictionaryAttributeRequest calls the generic UpdateDictionaryAttribute builder with application/json body
func NewUpdateDictionaryAttributeRequest(server string, id string, valueId string, params *UpdateDictionaryAttributeParams, body UpdateDictionaryAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDictionaryAttributeRequestWithBody(server, id, valueId, params, "application/json", bodyReader)
}

// NewUpdateDictionaryAttributeRequestWithBody generates requests for UpdateDictionaryAttribute with any type of body
func NewUpdateDictionaryAttributeRequestWithBody(server string, id string, valueId string, params *UpdateDictionaryAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "valueId", runtime.ParamLocationPath, valueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteDictionaryFilterRequest generates requests for DeleteDictionaryFilter
func NewDeleteDictionaryFilterRequest(server string, id string, valueId string, parentValueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "valueId", runtime.ParamLocationPath, valueId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "parentValueId", runtime.ParamLocationPath, parentValueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values/%s/filter/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDictionaryValueFilterRequest generates requests for CreateDictionaryValueFilter
func NewCreateDictionaryValueFilterRequest(server string, id string, valueId string, parentValueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "valueId", runtime.ParamLocationPath, valueId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "parentValueId", runtime.ParamLocationPath, parentValueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/dictionary/%s/values/%s/filter/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindFilteredAttributeDefinitionsRequest calls the generic FindFilteredAttributeDefinitions builder with application/json body
func NewFindFilteredAttributeDefinitionsRequest(server string, params *FindFilteredAttributeDefinitionsParams, body FindFilteredAttributeDefinitionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindFilteredAttributeDefinitionsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewFindFilteredAttributeDefinitionsRequestWithBody generates requests for FindFilteredAttributeDefinitions with any type of body
func NewFindFilteredAttributeDefinitionsRequestWithBody(server string, params *FindFilteredAttributeDefinitionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateMatrixDefinitionRequest calls the generic CreateMatrixDefinition builder with application/json body
func NewCreateMatrixDefinitionRequest(server string, params *CreateMatrixDefinitionParams, body CreateMatrixDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMatrixDefinitionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateMatrixDefinitionRequestWithBody generates requests for CreateMatrixDefinition with any type of body
func NewCreateMatrixDefinitionRequestWithBody(server string, params *CreateMatrixDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/matrix")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateMatrixDefinitionRequest calls the generic UpdateMatrixDefinition builder with application/json body
func NewUpdateMatrixDefinitionRequest(server string, id string, params *UpdateMatrixDefinitionParams, body UpdateMatrixDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMatrixDefinitionRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateMatrixDefinitionRequestWithBody generates requests for UpdateMatrixDefinition with any type of body
func NewUpdateMatrixDefinitionRequestWithBody(server string, id string, params *UpdateMatrixDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/matrix/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateMatrixDefinitionDryRunRequest calls the generic UpdateMatrixDefinitionDryRun builder with application/json body
func NewUpdateMatrixDefinitionDryRunRequest(server string, id string, params *UpdateMatrixDefinitionDryRunParams, body UpdateMatrixDefinitionDryRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMatrixDefinitionDryRunRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateMatrixDefinitionDryRunRequestWithBody generates requests for UpdateMatrixDefinitionDryRun with any type of body
func NewUpdateMatrixDefinitionDryRunRequestWithBody(server string, id string, params *UpdateMatrixDefinitionDryRunParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/matrix/%s/dryrun", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, params.Validation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindSimpleRequest generates requests for FindSimple
func NewFindSimpleRequest(server string, params *FindSimpleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/simple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteAttributeDefinitionRequest generates requests for DeleteAttributeDefinition
func NewDeleteAttributeDefinitionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttributeDefinitionRequest generates requests for GetAttributeDefinition
func NewGetAttributeDefinitionRequest(server string, id string, params *GetAttributeDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateMetadataRequest calls the generic UpdateMetadata builder with application/json body
func NewUpdateMetadataRequest(server string, id string, params *UpdateMetadataParams, body UpdateMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMetadataRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateMetadataRequestWithBody generates requests for UpdateMetadata with any type of body
func NewUpdateMetadataRequestWithBody(server string, id string, params *UpdateMetadataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Validation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, *params.Validation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateAttributeDefinitionRequest calls the generic UpdateAttributeDefinition builder with application/json body
func NewUpdateAttributeDefinitionRequest(server string, id string, params *UpdateAttributeDefinitionParams, body UpdateAttributeDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAttributeDefinitionRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateAttributeDefinitionRequestWithBody generates requests for UpdateAttributeDefinition with any type of body
func NewUpdateAttributeDefinitionRequestWithBody(server string, id string, params *UpdateAttributeDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Validation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, *params.Validation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteDryRunRequest generates requests for DeleteDryRun
func NewDeleteDryRunRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s/dryrun", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAttributeDefinitionDryRunRequest calls the generic UpdateAttributeDefinitionDryRun builder with application/json body
func NewUpdateAttributeDefinitionDryRunRequest(server string, id string, params *UpdateAttributeDefinitionDryRunParams, body UpdateAttributeDefinitionDryRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAttributeDefinitionDryRunRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateAttributeDefinitionDryRunRequestWithBody generates requests for UpdateAttributeDefinitionDryRun with any type of body
func NewUpdateAttributeDefinitionDryRunRequestWithBody(server string, id string, params *UpdateAttributeDefinitionDryRunParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s/dryrun", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Validation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, *params.Validation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetByDefinitionIdRequest generates requests for GetByDefinitionId
func NewGetByDefinitionIdRequest(server string, id string, params *GetByDefinitionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPolicyToAttributeDefinitionRequest calls the generic AddPolicyToAttributeDefinition builder with application/json body
func NewAddPolicyToAttributeDefinitionRequest(server string, id string, body AddPolicyToAttributeDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPolicyToAttributeDefinitionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddPolicyToAttributeDefinitionRequestWithBody generates requests for AddPolicyToAttributeDefinition with any type of body
func NewAddPolicyToAttributeDefinitionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyForAttributeDefinitionRequest generates requests for DeletePolicyForAttributeDefinition
func NewDeletePolicyForAttributeDefinitionRequest(server string, id string, policyId string, policyType DeletePolicyForAttributeDefinitionParamsPolicyType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyType", runtime.ParamLocationPath, policyType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s/policy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindProductsRequest generates requests for FindProducts
func NewFindProductsRequest(server string, id string, params *FindProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/definitions/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetCategoriesByPolicyIdRequest generates requests for GetCategoriesByPolicyId
func NewGetCategoriesByPolicyIdRequest(server string, id string, params *GetCategoriesByPolicyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/%s/catalogs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetCategoriesNodeByPolicyIdRequest generates requests for GetCategoriesNodeByPolicyId
func NewGetCategoriesNodeByPolicyIdRequest(server string, id string, params *GetCategoriesNodeByPolicyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/%s/catalogs/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetCatalogNodeByPolicyIdRequest generates requests for GetCatalogNodeByPolicyId
func NewGetCatalogNodeByPolicyIdRequest(server string, id string, params *GetCatalogNodeByPolicyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/%s/catalogs/nodes/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetCatalogByPolicyIdRequest generates requests for GetCatalogByPolicyId
func NewGetCatalogByPolicyIdRequest(server string, id string, params *GetCatalogByPolicyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/%s/catalogs/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetAttributeDefinitionsByPolicyIdRequest generates requests for GetAttributeDefinitionsByPolicyId
func NewGetAttributeDefinitionsByPolicyIdRequest(server string, id string, params *GetAttributeDefinitionsByPolicyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/%s/definitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetRelationsByPolicyIdRequest generates requests for GetRelationsByPolicyId
func NewGetRelationsByPolicyIdRequest(server string, id string, params *GetRelationsByPolicyIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/%s/relations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetProductsRequest generates requests for GetProducts
func NewGetProductsRequest(server string, params *GetProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publishState", runtime.ParamLocationQuery, *params.PublishState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DataSynced != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataSynced", runtime.ParamLocationQuery, *params.DataSynced); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateProductRequest calls the generic CreateProduct builder with application/json body
func NewCreateProductRequest(server string, params *CreateProductParams, body CreateProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProductRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateProductRequestWithBody generates requests for CreateProduct with any type of body
func NewCreateProductRequestWithBody(server string, params *CreateProductParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Validation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validation", runtime.ParamLocationQuery, *params.Validation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewArchiveProductsByIdsRequest calls the generic ArchiveProductsByIds builder with application/json body
func NewArchiveProductsByIdsRequest(server string, body ArchiveProductsByIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewArchiveProductsByIdsRequestWithBody(server, "application/json", bodyReader)
}

// NewArchiveProductsByIdsRequestWithBody generates requests for ArchiveProductsByIds with any type of body
func NewArchiveProductsByIdsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/archive/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductsAttributeRequest calls the generic DeleteProductsAttribute builder with application/json body
func NewDeleteProductsAttributeRequest(server string, body DeleteProductsAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteProductsAttributeRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteProductsAttributeRequestWithBody generates requests for DeleteProductsAttribute with any type of body
func NewDeleteProductsAttributeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrUpdateRequest calls the generic CreateOrUpdate builder with application/json body
func NewCreateOrUpdateRequest(server string, params *CreateOrUpdateParams, body CreateOrUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateOrUpdateRequestWithBody generates requests for CreateOrUpdate with any type of body
func NewCreateOrUpdateRequestWithBody(server string, params *CreateOrUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/attributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewAddAttributesByIdsRequest calls the generic AddAttributesByIds builder with application/json body
func NewAddAttributesByIdsRequest(server string, params *AddAttributesByIdsParams, body AddAttributesByIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddAttributesByIdsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddAttributesByIdsRequestWithBody generates requests for AddAttributesByIds with any type of body
func NewAddAttributesByIdsRequestWithBody(server string, params *AddAttributesByIdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/attributes/add/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FailOnAssignedAttribute != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "failOnAssignedAttribute", runtime.ParamLocationQuery, *params.FailOnAssignedAttribute); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpsertAttributesByIdsRequest calls the generic UpsertAttributesByIds builder with application/json body
func NewUpsertAttributesByIdsRequest(server string, params *UpsertAttributesByIdsParams, body UpsertAttributesByIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertAttributesByIdsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpsertAttributesByIdsRequestWithBody generates requests for UpsertAttributesByIds with any type of body
func NewUpsertAttributesByIdsRequestWithBody(server string, params *UpsertAttributesByIdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/attributes/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateAttributesByIdsRequest calls the generic UpdateAttributesByIds builder with application/json body
func NewUpdateAttributesByIdsRequest(server string, params *UpdateAttributesByIdsParams, body UpdateAttributesByIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAttributesByIdsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateAttributesByIdsRequestWithBody generates requests for UpdateAttributesByIds with any type of body
func NewUpdateAttributesByIdsRequestWithBody(server string, params *UpdateAttributesByIdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/attributes/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FailOnMissingAttribute != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "failOnMissingAttribute", runtime.ParamLocationQuery, *params.FailOnMissingAttribute); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewAssignProductsToCategoryRequest calls the generic AssignProductsToCategory builder with application/json body
func NewAssignProductsToCategoryRequest(server string, body AssignProductsToCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignProductsToCategoryRequestWithBody(server, "application/json", bodyReader)
}

// NewAssignProductsToCategoryRequestWithBody generates requests for AssignProductsToCategory with any type of body
func NewAssignProductsToCategoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/categories/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCopyAndUpdateProductRequest calls the generic CopyAndUpdateProduct builder with application/json body
func NewCopyAndUpdateProductRequest(server string, params *CopyAndUpdateProductParams, body CopyAndUpdateProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCopyAndUpdateProductRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCopyAndUpdateProductRequestWithBody generates requests for CopyAndUpdateProduct with any type of body
func NewCopyAndUpdateProductRequestWithBody(server string, params *CopyAndUpdateProductParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/copy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewCountFilteredProductsRequest calls the generic CountFilteredProducts builder with application/json body
func NewCountFilteredProductsRequest(server string, params *CountFilteredProductsParams, body CountFilteredProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCountFilteredProductsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCountFilteredProductsRequestWithBody generates requests for CountFilteredProducts with any type of body
func NewCountFilteredProductsRequestWithBody(server string, params *CountFilteredProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewGetProductsWithCursorAndViewsRequest calls the generic GetProductsWithCursorAndViews builder with application/json body
func NewGetProductsWithCursorAndViewsRequest(server string, params *GetProductsWithCursorAndViewsParams, body GetProductsWithCursorAndViewsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetProductsWithCursorAndViewsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetProductsWithCursorAndViewsRequestWithBody generates requests for GetProductsWithCursorAndViews with any type of body
func NewGetProductsWithCursorAndViewsRequestWithBody(server string, params *GetProductsWithCursorAndViewsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/cursor/views/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewRemoveLabelFromProductsRequest calls the generic RemoveLabelFromProducts builder with application/json body
func NewRemoveLabelFromProductsRequest(server string, body RemoveLabelFromProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveLabelFromProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewRemoveLabelFromProductsRequestWithBody generates requests for RemoveLabelFromProducts with any type of body
func NewRemoveLabelFromProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/labels/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddLabelToProductsRequest calls the generic AddLabelToProducts builder with application/json body
func NewAddLabelToProductsRequest(server string, body AddLabelToProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddLabelToProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewAddLabelToProductsRequestWithBody generates requests for AddLabelToProducts with any type of body
func NewAddLabelToProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/labels/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListProductsViewsByAssetsRequest calls the generic ListProductsViewsByAssets builder with application/json body
func NewListProductsViewsByAssetsRequest(server string, params *ListProductsViewsByAssetsParams, body ListProductsViewsByAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListProductsViewsByAssetsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewListProductsViewsByAssetsRequestWithBody generates requests for ListProductsViewsByAssets with any type of body
func NewListProductsViewsByAssetsRequestWithBody(server string, params *ListProductsViewsByAssetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/list/views/by-assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewListProductsViewsByIdsRequest calls the generic ListProductsViewsByIds builder with application/json body
func NewListProductsViewsByIdsRequest(server string, params *ListProductsViewsByIdsParams, body ListProductsViewsByIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListProductsViewsByIdsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewListProductsViewsByIdsRequestWithBody generates requests for ListProductsViewsByIds with any type of body
func NewListProductsViewsByIdsRequestWithBody(server string, params *ListProductsViewsByIdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/list/views/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewListProductsViewsByNumbersRequest calls the generic ListProductsViewsByNumbers builder with application/json body
func NewListProductsViewsByNumbersRequest(server string, params *ListProductsViewsByNumbersParams, body ListProductsViewsByNumbersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListProductsViewsByNumbersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewListProductsViewsByNumbersRequestWithBody generates requests for ListProductsViewsByNumbers with any type of body
func NewListProductsViewsByNumbersRequestWithBody(server string, params *ListProductsViewsByNumbersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/list/views/by-numbers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewChangeStatusesByIdsRequest calls the generic ChangeStatusesByIds builder with application/json body
func NewChangeStatusesByIdsRequest(server string, params *ChangeStatusesByIdsParams, body ChangeStatusesByIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeStatusesByIdsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChangeStatusesByIdsRequestWithBody generates requests for ChangeStatusesByIds with any type of body
func NewChangeStatusesByIdsRequestWithBody(server string, params *ChangeStatusesByIdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/states/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewFindProductTemplatesRequest generates requests for FindProductTemplates
func NewFindProductTemplatesRequest(server string, params *FindProductTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProductTemplateRequest generates requests for DeleteProductTemplate
func NewDeleteProductTemplateRequest(server string, productId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductTemplateRequest generates requests for GetProductTemplate
func NewGetProductTemplateRequest(server string, productId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProductTemplateRequest calls the generic CreateProductTemplate builder with application/json body
func NewCreateProductTemplateRequest(server string, productId string, body CreateProductTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProductTemplateRequestWithBody(server, productId, "application/json", bodyReader)
}

// NewCreateProductTemplateRequestWithBody generates requests for CreateProductTemplate with any type of body
func NewCreateProductTemplateRequestWithBody(server string, productId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNameRequest calls the generic UpdateName builder with application/json body
func NewUpdateNameRequest(server string, productId string, body UpdateNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNameRequestWithBody(server, productId, "application/json", bodyReader)
}

// NewUpdateNameRequestWithBody generates requests for UpdateName with any type of body
func NewUpdateNameRequestWithBody(server string, productId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnarchiveProductsByIdsRequest calls the generic UnarchiveProductsByIds builder with application/json body
func NewUnarchiveProductsByIdsRequest(server string, body UnarchiveProductsByIdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnarchiveProductsByIdsRequestWithBody(server, "application/json", bodyReader)
}

// NewUnarchiveProductsByIdsRequestWithBody generates requests for UnarchiveProductsByIds with any type of body
func NewUnarchiveProductsByIdsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/unarchive/by-ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductRequest generates requests for GetProduct
func NewGetProductRequest(server string, id string, params *GetProductParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateProductRequest calls the generic UpdateProduct builder with application/json body
func NewUpdateProductRequest(server string, id string, params *UpdateProductParams, body UpdateProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateProductRequestWithBody generates requests for UpdateProduct with any type of body
func NewUpdateProductRequestWithBody(server string, id string, params *UpdateProductParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewUpdateProductDetailsRequest calls the generic UpdateProductDetails builder with application/json body
func NewUpdateProductDetailsRequest(server string, id string, params *UpdateProductDetailsParams, body UpdateProductDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductDetailsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateProductDetailsRequestWithBody generates requests for UpdateProductDetails with any type of body
func NewUpdateProductDetailsRequestWithBody(server string, id string, params *UpdateProductDetailsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewGetProductAssetsRequest generates requests for GetProductAssets
func NewGetProductAssetsRequest(server string, id string, params *GetProductAssetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssociateAssetsRequest calls the generic AssociateAssets builder with application/json body
func NewAssociateAssetsRequest(server string, id string, body AssociateAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssociateAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAssociateAssetsRequestWithBody generates requests for AssociateAssets with any type of body
func NewAssociateAssetsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetProductAssetsRequest calls the generic SetProductAssets builder with application/json body
func NewSetProductAssetsRequest(server string, id string, body SetProductAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetProductAssetsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSetProductAssetsRequestWithBody generates requests for SetProductAssets with any type of body
func NewSetProductAssetsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDisassociateAssetFromProductRequest generates requests for DisassociateAssetFromProduct
func NewDisassociateAssetFromProductRequest(server string, id string, assetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssociateAssetWithProductRequest generates requests for AssociateAssetWithProduct
func NewAssociateAssetWithProductRequest(server string, id string, assetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoveProductAssetRequest generates requests for MoveProductAsset
func NewMoveProductAssetRequest(server string, id string, assetId string, params *MoveProductAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductAttributesRequest generates requests for GetProductAttributes
func NewGetProductAttributesRequest(server string, id string, params *GetProductAttributesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewAddProductAttributeRequest calls the generic AddProductAttribute builder with application/json body
func NewAddProductAttributeRequest(server string, id string, params *AddProductAttributeParams, body AddProductAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddProductAttributeRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAddProductAttributeRequestWithBody generates requests for AddProductAttribute with any type of body
func NewAddProductAttributeRequestWithBody(server string, id string, params *AddProductAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateProductAttributesRequest calls the generic UpdateProductAttributes builder with application/json body
func NewUpdateProductAttributesRequest(server string, id string, params *UpdateProductAttributesParams, body UpdateProductAttributesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductAttributesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateProductAttributesRequestWithBody generates requests for UpdateProductAttributes with any type of body
func NewUpdateProductAttributesRequestWithBody(server string, id string, params *UpdateProductAttributesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewAddColumnAttributeRequest calls the generic AddColumnAttribute builder with application/json body
func NewAddColumnAttributeRequest(server string, id string, params *AddColumnAttributeParams, body AddColumnAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddColumnAttributeRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAddColumnAttributeRequestWithBody generates requests for AddColumnAttribute with any type of body
func NewAddColumnAttributeRequestWithBody(server string, id string, params *AddColumnAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes/column", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateColumnAttributeRequest calls the generic UpdateColumnAttribute builder with application/json body
func NewUpdateColumnAttributeRequest(server string, id string, definitionId string, params *UpdateColumnAttributeParams, body UpdateColumnAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateColumnAttributeRequestWithBody(server, id, definitionId, params, "application/json", bodyReader)
}

// NewUpdateColumnAttributeRequestWithBody generates requests for UpdateColumnAttribute with any type of body
func NewUpdateColumnAttributeRequestWithBody(server string, id string, definitionId string, params *UpdateColumnAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes/column/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewAddDictionaryAttributeRequest calls the generic AddDictionaryAttribute builder with application/json body
func NewAddDictionaryAttributeRequest(server string, id string, params *AddDictionaryAttributeParams, body AddDictionaryAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDictionaryAttributeRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAddDictionaryAttributeRequestWithBody generates requests for AddDictionaryAttribute with any type of body
func NewAddDictionaryAttributeRequestWithBody(server string, id string, params *AddDictionaryAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes/dictionary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewSetDictionaryAttributeValuesForProductRequest calls the generic SetDictionaryAttributeValuesForProduct builder with application/json body
func NewSetDictionaryAttributeValuesForProductRequest(server string, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, body SetDictionaryAttributeValuesForProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetDictionaryAttributeValuesForProductRequestWithBody(server, id, definitionId, params, "application/json", bodyReader)
}

// NewSetDictionaryAttributeValuesForProductRequestWithBody generates requests for SetDictionaryAttributeValuesForProduct with any type of body
func NewSetDictionaryAttributeValuesForProductRequestWithBody(server string, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes/dictionary/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewAddMatrixAttributeRequest calls the generic AddMatrixAttribute builder with application/json body
func NewAddMatrixAttributeRequest(server string, id string, params *AddMatrixAttributeParams, body AddMatrixAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMatrixAttributeRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewAddMatrixAttributeRequestWithBody generates requests for AddMatrixAttribute with any type of body
func NewAddMatrixAttributeRequestWithBody(server string, id string, params *AddMatrixAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes/matrix", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateMatrixAttributeRequest calls the generic UpdateMatrixAttribute builder with application/json body
func NewUpdateMatrixAttributeRequest(server string, id string, definitionId string, params *UpdateMatrixAttributeParams, body UpdateMatrixAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMatrixAttributeRequestWithBody(server, id, definitionId, params, "application/json", bodyReader)
}

// NewUpdateMatrixAttributeRequestWithBody generates requests for UpdateMatrixAttribute with any type of body
func NewUpdateMatrixAttributeRequestWithBody(server string, id string, definitionId string, params *UpdateMatrixAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes/matrix/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteProductAttributeRequest generates requests for DeleteProductAttribute
func NewDeleteProductAttributeRequest(server string, id string, definitionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProductAttributeRequest calls the generic UpdateProductAttribute builder with application/json body
func NewUpdateProductAttributeRequest(server string, id string, definitionId string, params *UpdateProductAttributeParams, body UpdateProductAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductAttributeRequestWithBody(server, id, definitionId, params, "application/json", bodyReader)
}

// NewUpdateProductAttributeRequestWithBody generates requests for UpdateProductAttribute with any type of body
func NewUpdateProductAttributeRequestWithBody(server string, id string, definitionId string, params *UpdateProductAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateProductBundleRequest generates requests for CreateProductBundle
func NewCreateProductBundleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/bundles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProductFromBundleRequest generates requests for DeleteProductFromBundle
func NewDeleteProductFromBundleRequest(server string, id string, complementaryProductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "complementaryProductId", runtime.ParamLocationPath, complementaryProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/bundles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddProductToBundleRequest calls the generic AddProductToBundle builder with application/json body
func NewAddProductToBundleRequest(server string, id string, complementaryProductId string, body AddProductToBundleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddProductToBundleRequestWithBody(server, id, complementaryProductId, "application/json", bodyReader)
}

// NewAddProductToBundleRequestWithBody generates requests for AddProductToBundle with any type of body
func NewAddProductToBundleRequestWithBody(server string, id string, complementaryProductId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "complementaryProductId", runtime.ParamLocationPath, complementaryProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/bundles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateProductBundleQuantityRequest calls the generic UpdateProductBundleQuantity builder with application/json body
func NewUpdateProductBundleQuantityRequest(server string, id string, complementaryProductId string, body UpdateProductBundleQuantityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductBundleQuantityRequestWithBody(server, id, complementaryProductId, "application/json", bodyReader)
}

// NewUpdateProductBundleQuantityRequestWithBody generates requests for UpdateProductBundleQuantity with any type of body
func NewUpdateProductBundleQuantityRequestWithBody(server string, id string, complementaryProductId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "complementaryProductId", runtime.ParamLocationPath, complementaryProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/bundles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveProductInBundleRequest generates requests for MoveProductInBundle
func NewMoveProductInBundleRequest(server string, id string, complementaryProductId string, params *MoveProductInBundleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "complementaryProductId", runtime.ParamLocationPath, complementaryProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/bundles/%s/order", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsCategoriesRequest generates requests for GetProductsCategories
func NewGetProductsCategoriesRequest(server string, id string, params *GetProductsCategoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddProductToCategoriesRequest calls the generic AddProductToCategories builder with application/json body
func NewAddProductToCategoriesRequest(server string, id string, body AddProductToCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddProductToCategoriesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddProductToCategoriesRequestWithBody generates requests for AddProductToCategories with any type of body
func NewAddProductToCategoriesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveProductFromCategoryRequest generates requests for RemoveProductFromCategory
func NewRemoveProductFromCategoryRequest(server string, id string, categoryId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductRelationsRequest generates requests for GetProductRelations
func NewGetProductRelationsRequest(server string, id string, params *GetProductRelationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoryConnectionsForProductRequest generates requests for GetCategoryConnectionsForProduct
func NewGetCategoryConnectionsForProductRequest(server string, id string, params *GetCategoryConnectionsForProductParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateCategoryConnectionRequest calls the generic CreateCategoryConnection builder with application/json body
func NewCreateCategoryConnectionRequest(server string, id string, body CreateCategoryConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCategoryConnectionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateCategoryConnectionRequestWithBody generates requests for CreateCategoryConnection with any type of body
func NewCreateCategoryConnectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCategoryConnectionRequest generates requests for DeleteCategoryConnection
func NewDeleteCategoryConnectionRequest(server string, id string, relationId string, categoryId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/categories/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProductConnectionRequest calls the generic CreateProductConnection builder with application/json body
func NewCreateProductConnectionRequest(server string, id string, body CreateProductConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProductConnectionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateProductConnectionRequestWithBody generates requests for CreateProductConnection with any type of body
func NewCreateProductConnectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRelatedProductsRelationSortingOrderSourceRequest generates requests for UpdateRelatedProductsRelationSortingOrderSource
func NewUpdateRelatedProductsRelationSortingOrderSourceRequest(server string, id string, sortingOrderSource UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sortingOrderSource", runtime.ParamLocationPath, sortingOrderSource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products/order/relations/sortingOrderSource/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProductConnectionsByRelationRequest generates requests for DeleteProductConnectionsByRelation
func NewDeleteProductConnectionsByRelationRequest(server string, id string, relationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductForRelationRequest generates requests for GetProductForRelation
func NewGetProductForRelationRequest(server string, id string, relationId string, params *GetProductForRelationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProductConnectionsRequest calls the generic CreateProductConnections builder with application/json body
func NewCreateProductConnectionsRequest(server string, id string, relationId string, body CreateProductConnectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProductConnectionsRequestWithBody(server, id, relationId, "application/json", bodyReader)
}

// NewCreateProductConnectionsRequestWithBody generates requests for CreateProductConnections with any type of body
func NewCreateProductConnectionsRequestWithBody(server string, id string, relationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteManyProductConnectionsRequest calls the generic DeleteManyProductConnections builder with application/json body
func NewDeleteManyProductConnectionsRequest(server string, id string, relationId string, body DeleteManyProductConnectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteManyProductConnectionsRequestWithBody(server, id, relationId, "application/json", bodyReader)
}

// NewDeleteManyProductConnectionsRequestWithBody generates requests for DeleteManyProductConnections with any type of body
func NewDeleteManyProductConnectionsRequestWithBody(server string, id string, relationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products/%s/bulk", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOrderProductRelationRequest generates requests for UpdateOrderProductRelation
func NewUpdateOrderProductRelationRequest(server string, id string, relationId string, params *UpdateOrderProductRelationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products/%s/order", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProductConnectionRequest generates requests for DeleteProductConnection
func NewDeleteProductConnectionRequest(server string, id string, relationId string, connectedProductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "connectedProductId", runtime.ParamLocationPath, connectedProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrderProductConnectionsRequest generates requests for UpdateOrderProductConnections
func NewUpdateOrderProductConnectionsRequest(server string, id string, relationId string, connectedProductId string, params *UpdateOrderProductConnectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "connectedProductId", runtime.ParamLocationPath, connectedProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/products/%s/%s/order", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConnectionQuantityRequest calls the generic UpdateConnectionQuantity builder with application/json body
func NewUpdateConnectionQuantityRequest(server string, id string, rightProductId string, relationId string, body UpdateConnectionQuantityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConnectionQuantityRequestWithBody(server, id, rightProductId, relationId, "application/json", bodyReader)
}

// NewUpdateConnectionQuantityRequestWithBody generates requests for UpdateConnectionQuantity with any type of body
func NewUpdateConnectionQuantityRequestWithBody(server string, id string, rightProductId string, relationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rightProductId", runtime.ParamLocationPath, rightProductId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "relationId", runtime.ParamLocationPath, relationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/connections/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCopyProductRequest generates requests for CopyProduct
func NewCopyProductRequest(server string, id string, params *CopyProductParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/copy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewFindProductViewsByIdRequest calls the generic FindProductViewsById builder with application/json body
func NewFindProductViewsByIdRequest(server string, id string, params *FindProductViewsByIdParams, body FindProductViewsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindProductViewsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewFindProductViewsByIdRequestWithBody generates requests for FindProductViewsById with any type of body
func NewFindProductViewsByIdRequestWithBody(server string, id string, params *FindProductViewsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/get/views", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetGroupedProductAttributesRequest generates requests for GetGroupedProductAttributes
func NewGetGroupedProductAttributesRequest(server string, id string, params *GetGroupedProductAttributesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/groupedAttributes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetProductsLabelsRequest generates requests for GetProductsLabels
func NewGetProductsLabelsRequest(server string, id string, params *GetProductsLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ArchiveState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archiveState", runtime.ParamLocationQuery, *params.ArchiveState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddLabelsToProductRequest calls the generic AddLabelsToProduct builder with application/json body
func NewAddLabelsToProductRequest(server string, id string, body AddLabelsToProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddLabelsToProductRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddLabelsToProductRequestWithBody generates requests for AddLabelsToProduct with any type of body
func NewAddLabelsToProductRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveLabelFromProductRequest generates requests for RemoveLabelFromProduct
func NewRemoveLabelFromProductRequest(server string, id string, labelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "labelId", runtime.ParamLocationPath, labelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/labels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetProductGroupRequest generates requests for SetProductGroup
func NewSetProductGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/variants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductVariantAttributeRequest generates requests for GetProductVariantAttribute
func NewGetProductVariantAttributeRequest(server string, id string, definitionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/variants/attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProductVariantAttributeRequest calls the generic UpdateProductVariantAttribute builder with application/json body
func NewUpdateProductVariantAttributeRequest(server string, id string, definitionId string, params *UpdateProductVariantAttributeParams, body UpdateProductVariantAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductVariantAttributeRequestWithBody(server, id, definitionId, params, "application/json", bodyReader)
}

// NewUpdateProductVariantAttributeRequestWithBody generates requests for UpdateProductVariantAttribute with any type of body
func NewUpdateProductVariantAttributeRequestWithBody(server string, id string, definitionId string, params *UpdateProductVariantAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/variants/attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ForceVla != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceVla", runtime.ParamLocationQuery, *params.ForceVla); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnassignProductVariantRequest generates requests for UnassignProductVariant
func NewUnassignProductVariantRequest(server string, id string, variantProductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variantProductId", runtime.ParamLocationPath, variantProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/variants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddProductVariantRequest generates requests for AddProductVariant
func NewAddProductVariantRequest(server string, id string, variantProductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variantProductId", runtime.ParamLocationPath, variantProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/variants/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoveProductVariantRequest generates requests for MoveProductVariant
func NewMoveProductVariantRequest(server string, id string, variantProductId string, params *MoveProductVariantParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variantProductId", runtime.ParamLocationPath, variantProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/variants/%s/order", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeStatusRequest generates requests for ChangeStatus
func NewChangeStatusRequest(server string, id string, action ChangeStatusParamsAction, params *ChangeStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "action", runtime.ParamLocationPath, action)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewFindRelationsRequest generates requests for FindRelations
func NewFindRelationsRequest(server string, params *FindRelationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewCreateRelationRequest calls the generic CreateRelation builder with application/json body
func NewCreateRelationRequest(server string, params *CreateRelationParams, body CreateRelationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRelationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateRelationRequestWithBody generates requests for CreateRelation with any type of body
func NewCreateRelationRequestWithBody(server string, params *CreateRelationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewGetFilteredRelationsRequest calls the generic GetFilteredRelations builder with application/json body
func NewGetFilteredRelationsRequest(server string, params *GetFilteredRelationsParams, body GetFilteredRelationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetFilteredRelationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetFilteredRelationsRequestWithBody generates requests for GetFilteredRelations with any type of body
func NewGetFilteredRelationsRequestWithBody(server string, params *GetFilteredRelationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteRequest generates requests for Delete
func NewDeleteRequest(server string, id string, params *DeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindOneRequest generates requests for FindOne
func NewFindOneRequest(server string, id string, params *FindOneParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateRelationRequest calls the generic UpdateRelation builder with application/json body
func NewUpdateRelationRequest(server string, id string, params *UpdateRelationParams, body UpdateRelationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRelationRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateRelationRequestWithBody generates requests for UpdateRelation with any type of body
func NewUpdateRelationRequestWithBody(server string, id string, params *UpdateRelationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

	}

	return req, nil
}

// NewGetCategoryConnectionsByRelationIdRequest generates requests for GetCategoryConnectionsByRelationId
func NewGetCategoryConnectionsByRelationIdRequest(server string, id string, params *GetCategoryConnectionsByRelationIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s/categories/connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewUpdateOrderRelationRequest generates requests for UpdateOrderRelation
func NewUpdateOrderRelationRequest(server string, id string, params *UpdateOrderRelationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s/order", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetPosition", runtime.ParamLocationQuery, params.TargetPosition); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetByRelationIdRequest generates requests for GetByRelationId
func NewGetByRelationIdRequest(server string, id string, params *GetByRelationIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPolicyToRelationRequest calls the generic AddPolicyToRelation builder with application/json body
func NewAddPolicyToRelationRequest(server string, id string, body AddPolicyToRelationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPolicyToRelationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddPolicyToRelationRequestWithBody generates requests for AddPolicyToRelation with any type of body
func NewAddPolicyToRelationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s/policy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolicyForRelationRequest generates requests for DeletePolicyForRelation
func NewDeletePolicyForRelationRequest(server string, id string, policyId string, policyType DeletePolicyForRelationParamsPolicyType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "policyType", runtime.ParamLocationPath, policyType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s/policy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductConnectionsByRelationIdRequest generates requests for GetProductConnectionsByRelationId
func NewGetProductConnectionsByRelationIdRequest(server string, id string, params *GetProductConnectionsByRelationIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relations/%s/products/connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/technical/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateAttributeRequest calls the generic ValidateAttribute builder with application/json body
func NewValidateAttributeRequest(server string, body ValidateAttributeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateAttributeRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateAttributeRequestWithBody generates requests for ValidateAttribute with any type of body
func NewValidateAttributeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/validate/definitions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateProductsRequest calls the generic ValidateProducts builder with application/json body
func NewValidateProductsRequest(server string, params *ValidateProductsParams, body ValidateProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateProductsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewValidateProductsRequestWithBody generates requests for ValidateProducts with any type of body
func NewValidateProductsRequestWithBody(server string, params *ValidateProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/validate/product")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Context != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "context", runtime.ParamLocationHeader, *params.Context)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context", headerParam0)
		}

		if params.ContextFallback != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "context-fallback", runtime.ParamLocationHeader, *params.ContextFallback)
			if err != nil {
				return nil, err
			}

			req.Header.Set("context-fallback", headerParam1)
		}

	}

	return req, nil
}

// NewValidateValueRequest calls the generic ValidateValue builder with application/json body
func NewValidateValueRequest(server string, body ValidateValueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateValueRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateValueRequestWithBody generates requests for ValidateValue with any type of body
func NewValidateValueRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/validate/value")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SynchronizeAssetsWithResponse request
	SynchronizeAssetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SynchronizeAssetsResponse, error)

	// GetJobStatusWithResponse request
	GetJobStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetJobStatusResponse, error)

	// FindAttributeGroupsWithResponse request
	FindAttributeGroupsWithResponse(ctx context.Context, params *FindAttributeGroupsParams, reqEditors ...RequestEditorFn) (*FindAttributeGroupsResponse, error)

	// CreateAttributeGroupWithBodyWithResponse request with any body
	CreateAttributeGroupWithBodyWithResponse(ctx context.Context, params *CreateAttributeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttributeGroupResponse, error)

	CreateAttributeGroupWithResponse(ctx context.Context, params *CreateAttributeGroupParams, body CreateAttributeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttributeGroupResponse, error)

	// FindDefinitionsWithoutGroupWithResponse request
	FindDefinitionsWithoutGroupWithResponse(ctx context.Context, params *FindDefinitionsWithoutGroupParams, reqEditors ...RequestEditorFn) (*FindDefinitionsWithoutGroupResponse, error)

	// SetOtherDefinitionsOrderStrategyWithResponse request
	SetOtherDefinitionsOrderStrategyWithResponse(ctx context.Context, params *SetOtherDefinitionsOrderStrategyParams, reqEditors ...RequestEditorFn) (*SetOtherDefinitionsOrderStrategyResponse, error)

	// MoveAttributeDefinitionInGroupWithResponse request
	MoveAttributeDefinitionInGroupWithResponse(ctx context.Context, definitionId string, params *MoveAttributeDefinitionInGroupParams, reqEditors ...RequestEditorFn) (*MoveAttributeDefinitionInGroupResponse, error)

	// GetAttributeRootGroupWithResponse request
	GetAttributeRootGroupWithResponse(ctx context.Context, params *GetAttributeRootGroupParams, reqEditors ...RequestEditorFn) (*GetAttributeRootGroupResponse, error)

	// DeleteAttributeGroupWithResponse request
	DeleteAttributeGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAttributeGroupResponse, error)

	// MoveGroupWithResponse request
	MoveGroupWithResponse(ctx context.Context, id string, params *MoveGroupParams, reqEditors ...RequestEditorFn) (*MoveGroupResponse, error)

	// FindDefinitionsInGroupWithResponse request
	FindDefinitionsInGroupWithResponse(ctx context.Context, id string, params *FindDefinitionsInGroupParams, reqEditors ...RequestEditorFn) (*FindDefinitionsInGroupResponse, error)

	// SetDefinitionsOrderStrategyInGroupWithResponse request
	SetDefinitionsOrderStrategyInGroupWithResponse(ctx context.Context, id string, params *SetDefinitionsOrderStrategyInGroupParams, reqEditors ...RequestEditorFn) (*SetDefinitionsOrderStrategyInGroupResponse, error)

	// MoveAttributeDefinitionWithResponse request
	MoveAttributeDefinitionWithResponse(ctx context.Context, id string, definitionId string, params *MoveAttributeDefinitionParams, reqEditors ...RequestEditorFn) (*MoveAttributeDefinitionResponse, error)

	// RenameWithBodyWithResponse request with any body
	RenameWithBodyWithResponse(ctx context.Context, id string, params *RenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenameResponse, error)

	RenameWithResponse(ctx context.Context, id string, params *RenameParams, body RenameJSONRequestBody, reqEditors ...RequestEditorFn) (*RenameResponse, error)

	// UpdateNumberWithBodyWithResponse request with any body
	UpdateNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNumberResponse, error)

	UpdateNumberWithResponse(ctx context.Context, id string, body UpdateNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNumberResponse, error)

	// ListCatalogsWithResponse request
	ListCatalogsWithResponse(ctx context.Context, params *ListCatalogsParams, reqEditors ...RequestEditorFn) (*ListCatalogsResponse, error)

	// CreateCategoryWithBodyWithResponse request with any body
	CreateCategoryWithBodyWithResponse(ctx context.Context, params *CreateCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	CreateCategoryWithResponse(ctx context.Context, params *CreateCategoryParams, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	// GetCategoriesByAssetIdWithResponse request
	GetCategoriesByAssetIdWithResponse(ctx context.Context, id string, params *GetCategoriesByAssetIdParams, reqEditors ...RequestEditorFn) (*GetCategoriesByAssetIdResponse, error)

	// FindByCategoryLevelAttributesWithResponse request
	FindByCategoryLevelAttributesWithResponse(ctx context.Context, attributeDefinitionId string, params *FindByCategoryLevelAttributesParams, reqEditors ...RequestEditorFn) (*FindByCategoryLevelAttributesResponse, error)

	// ListWithResponse request
	ListWithResponse(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error)

	// GetFilteredNodesWithBodyWithResponse request with any body
	GetFilteredNodesWithBodyWithResponse(ctx context.Context, params *GetFilteredNodesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFilteredNodesResponse, error)

	GetFilteredNodesWithResponse(ctx context.Context, params *GetFilteredNodesParams, body GetFilteredNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFilteredNodesResponse, error)

	// DeleteCategoryNodeWithResponse request
	DeleteCategoryNodeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCategoryNodeResponse, error)

	// GetNodeWithResponse request
	GetNodeWithResponse(ctx context.Context, id string, params *GetNodeParams, reqEditors ...RequestEditorFn) (*GetNodeResponse, error)

	// UpdateCatalogNodeWithBodyWithResponse request with any body
	UpdateCatalogNodeWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogNodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogNodeResponse, error)

	UpdateCatalogNodeWithResponse(ctx context.Context, id string, params *UpdateCatalogNodeParams, body UpdateCatalogNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogNodeResponse, error)

	// GetCategoryAssetsWithResponse request
	GetCategoryAssetsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCategoryAssetsResponse, error)

	// DisassociateAssetFromCategoryWithResponse request
	DisassociateAssetFromCategoryWithResponse(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*DisassociateAssetFromCategoryResponse, error)

	// AssociateAssetWithCategoryWithResponse request
	AssociateAssetWithCategoryWithResponse(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*AssociateAssetWithCategoryResponse, error)

	// MoveCategoryAssetWithResponse request
	MoveCategoryAssetWithResponse(ctx context.Context, id string, assetId string, params *MoveCategoryAssetParams, reqEditors ...RequestEditorFn) (*MoveCategoryAssetResponse, error)

	// ListAttributesAttachedToGivenNodeWithResponse request
	ListAttributesAttachedToGivenNodeWithResponse(ctx context.Context, id string, params *ListAttributesAttachedToGivenNodeParams, reqEditors ...RequestEditorFn) (*ListAttributesAttachedToGivenNodeResponse, error)

	// DeleteAttributeFromNodeWithResponse request
	DeleteAttributeFromNodeWithResponse(ctx context.Context, id string, attributeDefinitionId string, reqEditors ...RequestEditorFn) (*DeleteAttributeFromNodeResponse, error)

	// UpdateNodeAttributeValueWithBodyWithResponse request with any body
	UpdateNodeAttributeValueWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeValueResponse, error)

	UpdateNodeAttributeValueWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, body UpdateNodeAttributeValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeValueResponse, error)

	// CreateCatalogNodeAttributeWithBodyWithResponse request with any body
	CreateCatalogNodeAttributeWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeResponse, error)

	CreateCatalogNodeAttributeWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, body CreateCatalogNodeAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeResponse, error)

	// CreateCatalogNodeAttributeColumnWithBodyWithResponse request with any body
	CreateCatalogNodeAttributeColumnWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeColumnResponse, error)

	CreateCatalogNodeAttributeColumnWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, body CreateCatalogNodeAttributeColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeColumnResponse, error)

	// UpdateNodeAttributeColumnValueWithBodyWithResponse request with any body
	UpdateNodeAttributeColumnValueWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeColumnValueResponse, error)

	UpdateNodeAttributeColumnValueWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, body UpdateNodeAttributeColumnValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeColumnValueResponse, error)

	// CreateCatalogNodeAttributeCompoundWithResponse request
	CreateCatalogNodeAttributeCompoundWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeCompoundParams, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeCompoundResponse, error)

	// CreateCatalogNodeAttributeDictionaryWithResponse request
	CreateCatalogNodeAttributeDictionaryWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeDictionaryParams, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeDictionaryResponse, error)

	// SetDictionaryAttributeValuesForCategoryWithBodyWithResponse request with any body
	SetDictionaryAttributeValuesForCategoryWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDictionaryAttributeValuesForCategoryResponse, error)

	SetDictionaryAttributeValuesForCategoryWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, body SetDictionaryAttributeValuesForCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDictionaryAttributeValuesForCategoryResponse, error)

	// CreateCatalogNodeAttributeMatrixWithBodyWithResponse request with any body
	CreateCatalogNodeAttributeMatrixWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeMatrixResponse, error)

	CreateCatalogNodeAttributeMatrixWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, body CreateCatalogNodeAttributeMatrixJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeMatrixResponse, error)

	// UpdateNodeAttributeMatrixValueWithBodyWithResponse request with any body
	UpdateNodeAttributeMatrixValueWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeMatrixValueResponse, error)

	UpdateNodeAttributeMatrixValueWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, body UpdateNodeAttributeMatrixValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeMatrixValueResponse, error)

	// GetCatalogNodeChildrenWithResponse request
	GetCatalogNodeChildrenWithResponse(ctx context.Context, id string, params *GetCatalogNodeChildrenParams, reqEditors ...RequestEditorFn) (*GetCatalogNodeChildrenResponse, error)

	// MoveCatalogNodeWithBodyWithResponse request with any body
	MoveCatalogNodeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveCatalogNodeResponse, error)

	MoveCatalogNodeWithResponse(ctx context.Context, id string, body MoveCatalogNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveCatalogNodeResponse, error)

	// UpdateCatalogNodeOrderWithResponse request
	UpdateCatalogNodeOrderWithResponse(ctx context.Context, id string, params *UpdateCatalogNodeOrderParams, reqEditors ...RequestEditorFn) (*UpdateCatalogNodeOrderResponse, error)

	// GetPathToNodeWithResponse request
	GetPathToNodeWithResponse(ctx context.Context, id string, params *GetPathToNodeParams, reqEditors ...RequestEditorFn) (*GetPathToNodeResponse, error)

	// GetByCategoryNodeIdWithResponse request
	GetByCategoryNodeIdWithResponse(ctx context.Context, id string, params *GetByCategoryNodeIdParams, reqEditors ...RequestEditorFn) (*GetByCategoryNodeIdResponse, error)

	// AddPolicyToCategoryNodeWithBodyWithResponse request with any body
	AddPolicyToCategoryNodeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToCategoryNodeResponse, error)

	AddPolicyToCategoryNodeWithResponse(ctx context.Context, id string, body AddPolicyToCategoryNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToCategoryNodeResponse, error)

	// DeletePolicyByCategoryNodeAndPolicyIdWithResponse request
	DeletePolicyByCategoryNodeAndPolicyIdWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyByCategoryNodeAndPolicyIdResponse, error)

	// GetCategoryProductsWithResponse request
	GetCategoryProductsWithResponse(ctx context.Context, id string, params *GetCategoryProductsParams, reqEditors ...RequestEditorFn) (*GetCategoryProductsResponse, error)

	// AddCategoryProductsWithBodyWithResponse request with any body
	AddCategoryProductsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCategoryProductsResponse, error)

	AddCategoryProductsWithResponse(ctx context.Context, id string, body AddCategoryProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCategoryProductsResponse, error)

	// GetPolicyByCategoryNodeIdWithResponse request
	GetPolicyByCategoryNodeIdWithResponse(ctx context.Context, id string, params *GetPolicyByCategoryNodeIdParams, reqEditors ...RequestEditorFn) (*GetPolicyByCategoryNodeIdResponse, error)

	// AddPolicyToProductsForCategoryNodeIdWithBodyWithResponse request with any body
	AddPolicyToProductsForCategoryNodeIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToProductsForCategoryNodeIdResponse, error)

	AddPolicyToProductsForCategoryNodeIdWithResponse(ctx context.Context, id string, body AddPolicyToProductsForCategoryNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToProductsForCategoryNodeIdResponse, error)

	// DeletePolicyFromProductsForCategoryNodeIdWithResponse request
	DeletePolicyFromProductsForCategoryNodeIdWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyFromProductsForCategoryNodeIdResponse, error)

	// DeleteCategoryProductsWithResponse request
	DeleteCategoryProductsWithResponse(ctx context.Context, id string, productId string, reqEditors ...RequestEditorFn) (*DeleteCategoryProductsResponse, error)

	// ArchiveWithResponse request
	ArchiveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveResponse, error)

	// UnarchiveWithResponse request
	UnarchiveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UnarchiveResponse, error)

	// GetCategoryTreeWithResponse request
	GetCategoryTreeWithResponse(ctx context.Context, id string, params *GetCategoryTreeParams, reqEditors ...RequestEditorFn) (*GetCategoryTreeResponse, error)

	// GetPoliciesByCategoryIdWithResponse request
	GetPoliciesByCategoryIdWithResponse(ctx context.Context, id string, params *GetPoliciesByCategoryIdParams, reqEditors ...RequestEditorFn) (*GetPoliciesByCategoryIdResponse, error)

	// AddPolicyToCategoryWithBodyWithResponse request with any body
	AddPolicyToCategoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToCategoryResponse, error)

	AddPolicyToCategoryWithResponse(ctx context.Context, id string, body AddPolicyToCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToCategoryResponse, error)

	// DeletePolicyByCategoryAndPolicyIdWithResponse request
	DeletePolicyByCategoryAndPolicyIdWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyByCategoryAndPolicyIdParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyByCategoryAndPolicyIdResponse, error)

	// GetPolicyByCategoryIdWithResponse request
	GetPolicyByCategoryIdWithResponse(ctx context.Context, id string, params *GetPolicyByCategoryIdParams, reqEditors ...RequestEditorFn) (*GetPolicyByCategoryIdResponse, error)

	// AddPolicyToProductsForCategoryIdWithBodyWithResponse request with any body
	AddPolicyToProductsForCategoryIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToProductsForCategoryIdResponse, error)

	AddPolicyToProductsForCategoryIdWithResponse(ctx context.Context, id string, body AddPolicyToProductsForCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToProductsForCategoryIdResponse, error)

	// DeletePolicyFromProductsForCategoryIdWithResponse request
	DeletePolicyFromProductsForCategoryIdWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyFromProductsForCategoryIdParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyFromProductsForCategoryIdResponse, error)

	// FindAllCompoundDefinitionsWithResponse request
	FindAllCompoundDefinitionsWithResponse(ctx context.Context, params *FindAllCompoundDefinitionsParams, reqEditors ...RequestEditorFn) (*FindAllCompoundDefinitionsResponse, error)

	// CreateCompoundDefinitionWithBodyWithResponse request with any body
	CreateCompoundDefinitionWithBodyWithResponse(ctx context.Context, params *CreateCompoundDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCompoundDefinitionResponse, error)

	CreateCompoundDefinitionWithResponse(ctx context.Context, params *CreateCompoundDefinitionParams, body CreateCompoundDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCompoundDefinitionResponse, error)

	// FindBySubDefinitionsWithResponse request
	FindBySubDefinitionsWithResponse(ctx context.Context, attributeDefinitionId string, params *FindBySubDefinitionsParams, reqEditors ...RequestEditorFn) (*FindBySubDefinitionsResponse, error)

	// DeleteCompoundDefinitionWithResponse request
	DeleteCompoundDefinitionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCompoundDefinitionResponse, error)

	// GetCompoundDefinitionWithResponse request
	GetCompoundDefinitionWithResponse(ctx context.Context, id string, params *GetCompoundDefinitionParams, reqEditors ...RequestEditorFn) (*GetCompoundDefinitionResponse, error)

	// UpdateCompoundDefinitionWithBodyWithResponse request with any body
	UpdateCompoundDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateCompoundDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompoundDefinitionResponse, error)

	UpdateCompoundDefinitionWithResponse(ctx context.Context, id string, params *UpdateCompoundDefinitionParams, body UpdateCompoundDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompoundDefinitionResponse, error)

	// FindAllAttributeDefinitionsWithResponse request
	FindAllAttributeDefinitionsWithResponse(ctx context.Context, params *FindAllAttributeDefinitionsParams, reqEditors ...RequestEditorFn) (*FindAllAttributeDefinitionsResponse, error)

	// CreateAttributeDefinitionWithBodyWithResponse request with any body
	CreateAttributeDefinitionWithBodyWithResponse(ctx context.Context, params *CreateAttributeDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttributeDefinitionResponse, error)

	CreateAttributeDefinitionWithResponse(ctx context.Context, params *CreateAttributeDefinitionParams, body CreateAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttributeDefinitionResponse, error)

	// CreateColumnDefinitionWithBodyWithResponse request with any body
	CreateColumnDefinitionWithBodyWithResponse(ctx context.Context, params *CreateColumnDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateColumnDefinitionResponse, error)

	CreateColumnDefinitionWithResponse(ctx context.Context, params *CreateColumnDefinitionParams, body CreateColumnDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateColumnDefinitionResponse, error)

	// UpdateColumnDefinitionWithBodyWithResponse request with any body
	UpdateColumnDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateColumnDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateColumnDefinitionResponse, error)

	UpdateColumnDefinitionWithResponse(ctx context.Context, id string, params *UpdateColumnDefinitionParams, body UpdateColumnDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateColumnDefinitionResponse, error)

	// UpdateColumnDefinitionDryRunWithBodyWithResponse request with any body
	UpdateColumnDefinitionDryRunWithBodyWithResponse(ctx context.Context, id string, params *UpdateColumnDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateColumnDefinitionDryRunResponse, error)

	UpdateColumnDefinitionDryRunWithResponse(ctx context.Context, id string, params *UpdateColumnDefinitionDryRunParams, body UpdateColumnDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateColumnDefinitionDryRunResponse, error)

	// CreateDictionaryDefinitionWithBodyWithResponse request with any body
	CreateDictionaryDefinitionWithBodyWithResponse(ctx context.Context, params *CreateDictionaryDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDictionaryDefinitionResponse, error)

	CreateDictionaryDefinitionWithResponse(ctx context.Context, params *CreateDictionaryDefinitionParams, body CreateDictionaryDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDictionaryDefinitionResponse, error)

	// DeleteDictionaryDefinitionWithResponse request
	DeleteDictionaryDefinitionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDictionaryDefinitionResponse, error)

	// PatchUpdateWithBodyWithResponse request with any body
	PatchUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUpdateResponse, error)

	PatchUpdateWithResponse(ctx context.Context, id string, body PatchUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUpdateResponse, error)

	// UpdateDictionaryDefinitionWithBodyWithResponse request with any body
	UpdateDictionaryDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateDictionaryDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDictionaryDefinitionResponse, error)

	UpdateDictionaryDefinitionWithResponse(ctx context.Context, id string, params *UpdateDictionaryDefinitionParams, body UpdateDictionaryDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDictionaryDefinitionResponse, error)

	// DeleteDictionaryParentWithResponse request
	DeleteDictionaryParentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDictionaryParentResponse, error)

	// SetDictionaryParentWithResponse request
	SetDictionaryParentWithResponse(ctx context.Context, id string, parentDefinitionId string, reqEditors ...RequestEditorFn) (*SetDictionaryParentResponse, error)

	// CreateDictionaryAttributeWithBodyWithResponse request with any body
	CreateDictionaryAttributeWithBodyWithResponse(ctx context.Context, id string, params *CreateDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDictionaryAttributeResponse, error)

	CreateDictionaryAttributeWithResponse(ctx context.Context, id string, params *CreateDictionaryAttributeParams, body CreateDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDictionaryAttributeResponse, error)

	// CountDictionaryAttributesWithBodyWithResponse request with any body
	CountDictionaryAttributesWithBodyWithResponse(ctx context.Context, id string, params *CountDictionaryAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CountDictionaryAttributesResponse, error)

	CountDictionaryAttributesWithResponse(ctx context.Context, id string, params *CountDictionaryAttributesParams, body CountDictionaryAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*CountDictionaryAttributesResponse, error)

	// FindFilteredDictionaryAttributesWithBodyWithResponse request with any body
	FindFilteredDictionaryAttributesWithBodyWithResponse(ctx context.Context, id string, params *FindFilteredDictionaryAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindFilteredDictionaryAttributesResponse, error)

	FindFilteredDictionaryAttributesWithResponse(ctx context.Context, id string, params *FindFilteredDictionaryAttributesParams, body FindFilteredDictionaryAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*FindFilteredDictionaryAttributesResponse, error)

	// FindFilteredDictionaryDefinitionsWithBodyWithResponse request with any body
	FindFilteredDictionaryDefinitionsWithBodyWithResponse(ctx context.Context, id string, params *FindFilteredDictionaryDefinitionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindFilteredDictionaryDefinitionsResponse, error)

	FindFilteredDictionaryDefinitionsWithResponse(ctx context.Context, id string, params *FindFilteredDictionaryDefinitionsParams, body FindFilteredDictionaryDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*FindFilteredDictionaryDefinitionsResponse, error)

	// DeleteDictionaryAttributeWithResponse request
	DeleteDictionaryAttributeWithResponse(ctx context.Context, id string, valueId string, reqEditors ...RequestEditorFn) (*DeleteDictionaryAttributeResponse, error)

	// GetDictionaryAttributeWithResponse request
	GetDictionaryAttributeWithResponse(ctx context.Context, id string, valueId string, params *GetDictionaryAttributeParams, reqEditors ...RequestEditorFn) (*GetDictionaryAttributeResponse, error)

	// UpdateDictionaryAttributeWithBodyWithResponse request with any body
	UpdateDictionaryAttributeWithBodyWithResponse(ctx context.Context, id string, valueId string, params *UpdateDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDictionaryAttributeResponse, error)

	UpdateDictionaryAttributeWithResponse(ctx context.Context, id string, valueId string, params *UpdateDictionaryAttributeParams, body UpdateDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDictionaryAttributeResponse, error)

	// DeleteDictionaryFilterWithResponse request
	DeleteDictionaryFilterWithResponse(ctx context.Context, id string, valueId string, parentValueId string, reqEditors ...RequestEditorFn) (*DeleteDictionaryFilterResponse, error)

	// CreateDictionaryValueFilterWithResponse request
	CreateDictionaryValueFilterWithResponse(ctx context.Context, id string, valueId string, parentValueId string, reqEditors ...RequestEditorFn) (*CreateDictionaryValueFilterResponse, error)

	// FindFilteredAttributeDefinitionsWithBodyWithResponse request with any body
	FindFilteredAttributeDefinitionsWithBodyWithResponse(ctx context.Context, params *FindFilteredAttributeDefinitionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindFilteredAttributeDefinitionsResponse, error)

	FindFilteredAttributeDefinitionsWithResponse(ctx context.Context, params *FindFilteredAttributeDefinitionsParams, body FindFilteredAttributeDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*FindFilteredAttributeDefinitionsResponse, error)

	// CreateMatrixDefinitionWithBodyWithResponse request with any body
	CreateMatrixDefinitionWithBodyWithResponse(ctx context.Context, params *CreateMatrixDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMatrixDefinitionResponse, error)

	CreateMatrixDefinitionWithResponse(ctx context.Context, params *CreateMatrixDefinitionParams, body CreateMatrixDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMatrixDefinitionResponse, error)

	// UpdateMatrixDefinitionWithBodyWithResponse request with any body
	UpdateMatrixDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateMatrixDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMatrixDefinitionResponse, error)

	UpdateMatrixDefinitionWithResponse(ctx context.Context, id string, params *UpdateMatrixDefinitionParams, body UpdateMatrixDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMatrixDefinitionResponse, error)

	// UpdateMatrixDefinitionDryRunWithBodyWithResponse request with any body
	UpdateMatrixDefinitionDryRunWithBodyWithResponse(ctx context.Context, id string, params *UpdateMatrixDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMatrixDefinitionDryRunResponse, error)

	UpdateMatrixDefinitionDryRunWithResponse(ctx context.Context, id string, params *UpdateMatrixDefinitionDryRunParams, body UpdateMatrixDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMatrixDefinitionDryRunResponse, error)

	// FindSimpleWithResponse request
	FindSimpleWithResponse(ctx context.Context, params *FindSimpleParams, reqEditors ...RequestEditorFn) (*FindSimpleResponse, error)

	// DeleteAttributeDefinitionWithResponse request
	DeleteAttributeDefinitionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAttributeDefinitionResponse, error)

	// GetAttributeDefinitionWithResponse request
	GetAttributeDefinitionWithResponse(ctx context.Context, id string, params *GetAttributeDefinitionParams, reqEditors ...RequestEditorFn) (*GetAttributeDefinitionResponse, error)

	// UpdateMetadataWithBodyWithResponse request with any body
	UpdateMetadataWithBodyWithResponse(ctx context.Context, id string, params *UpdateMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMetadataResponse, error)

	UpdateMetadataWithResponse(ctx context.Context, id string, params *UpdateMetadataParams, body UpdateMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMetadataResponse, error)

	// UpdateAttributeDefinitionWithBodyWithResponse request with any body
	UpdateAttributeDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateAttributeDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAttributeDefinitionResponse, error)

	UpdateAttributeDefinitionWithResponse(ctx context.Context, id string, params *UpdateAttributeDefinitionParams, body UpdateAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAttributeDefinitionResponse, error)

	// DeleteDryRunWithResponse request
	DeleteDryRunWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDryRunResponse, error)

	// UpdateAttributeDefinitionDryRunWithBodyWithResponse request with any body
	UpdateAttributeDefinitionDryRunWithBodyWithResponse(ctx context.Context, id string, params *UpdateAttributeDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAttributeDefinitionDryRunResponse, error)

	UpdateAttributeDefinitionDryRunWithResponse(ctx context.Context, id string, params *UpdateAttributeDefinitionDryRunParams, body UpdateAttributeDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAttributeDefinitionDryRunResponse, error)

	// GetByDefinitionIdWithResponse request
	GetByDefinitionIdWithResponse(ctx context.Context, id string, params *GetByDefinitionIdParams, reqEditors ...RequestEditorFn) (*GetByDefinitionIdResponse, error)

	// AddPolicyToAttributeDefinitionWithBodyWithResponse request with any body
	AddPolicyToAttributeDefinitionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToAttributeDefinitionResponse, error)

	AddPolicyToAttributeDefinitionWithResponse(ctx context.Context, id string, body AddPolicyToAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToAttributeDefinitionResponse, error)

	// DeletePolicyForAttributeDefinitionWithResponse request
	DeletePolicyForAttributeDefinitionWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyForAttributeDefinitionParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyForAttributeDefinitionResponse, error)

	// FindProductsWithResponse request
	FindProductsWithResponse(ctx context.Context, id string, params *FindProductsParams, reqEditors ...RequestEditorFn) (*FindProductsResponse, error)

	// GetCategoriesByPolicyIdWithResponse request
	GetCategoriesByPolicyIdWithResponse(ctx context.Context, id string, params *GetCategoriesByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetCategoriesByPolicyIdResponse, error)

	// GetCategoriesNodeByPolicyIdWithResponse request
	GetCategoriesNodeByPolicyIdWithResponse(ctx context.Context, id string, params *GetCategoriesNodeByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetCategoriesNodeByPolicyIdResponse, error)

	// GetCatalogNodeByPolicyIdWithResponse request
	GetCatalogNodeByPolicyIdWithResponse(ctx context.Context, id string, params *GetCatalogNodeByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetCatalogNodeByPolicyIdResponse, error)

	// GetCatalogByPolicyIdWithResponse request
	GetCatalogByPolicyIdWithResponse(ctx context.Context, id string, params *GetCatalogByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetCatalogByPolicyIdResponse, error)

	// GetAttributeDefinitionsByPolicyIdWithResponse request
	GetAttributeDefinitionsByPolicyIdWithResponse(ctx context.Context, id string, params *GetAttributeDefinitionsByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetAttributeDefinitionsByPolicyIdResponse, error)

	// GetRelationsByPolicyIdWithResponse request
	GetRelationsByPolicyIdWithResponse(ctx context.Context, id string, params *GetRelationsByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetRelationsByPolicyIdResponse, error)

	// GetProductsWithResponse request
	GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// CreateProductWithBodyWithResponse request with any body
	CreateProductWithBodyWithResponse(ctx context.Context, params *CreateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductResponse, error)

	CreateProductWithResponse(ctx context.Context, params *CreateProductParams, body CreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductResponse, error)

	// ArchiveProductsByIdsWithBodyWithResponse request with any body
	ArchiveProductsByIdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArchiveProductsByIdsResponse, error)

	ArchiveProductsByIdsWithResponse(ctx context.Context, body ArchiveProductsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*ArchiveProductsByIdsResponse, error)

	// DeleteProductsAttributeWithBodyWithResponse request with any body
	DeleteProductsAttributeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductsAttributeResponse, error)

	DeleteProductsAttributeWithResponse(ctx context.Context, body DeleteProductsAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductsAttributeResponse, error)

	// CreateOrUpdateWithBodyWithResponse request with any body
	CreateOrUpdateWithBodyWithResponse(ctx context.Context, params *CreateOrUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateResponse, error)

	CreateOrUpdateWithResponse(ctx context.Context, params *CreateOrUpdateParams, body CreateOrUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateResponse, error)

	// AddAttributesByIdsWithBodyWithResponse request with any body
	AddAttributesByIdsWithBodyWithResponse(ctx context.Context, params *AddAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAttributesByIdsResponse, error)

	AddAttributesByIdsWithResponse(ctx context.Context, params *AddAttributesByIdsParams, body AddAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAttributesByIdsResponse, error)

	// UpsertAttributesByIdsWithBodyWithResponse request with any body
	UpsertAttributesByIdsWithBodyWithResponse(ctx context.Context, params *UpsertAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertAttributesByIdsResponse, error)

	UpsertAttributesByIdsWithResponse(ctx context.Context, params *UpsertAttributesByIdsParams, body UpsertAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertAttributesByIdsResponse, error)

	// UpdateAttributesByIdsWithBodyWithResponse request with any body
	UpdateAttributesByIdsWithBodyWithResponse(ctx context.Context, params *UpdateAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAttributesByIdsResponse, error)

	UpdateAttributesByIdsWithResponse(ctx context.Context, params *UpdateAttributesByIdsParams, body UpdateAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAttributesByIdsResponse, error)

	// AssignProductsToCategoryWithBodyWithResponse request with any body
	AssignProductsToCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignProductsToCategoryResponse, error)

	AssignProductsToCategoryWithResponse(ctx context.Context, body AssignProductsToCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignProductsToCategoryResponse, error)

	// CopyAndUpdateProductWithBodyWithResponse request with any body
	CopyAndUpdateProductWithBodyWithResponse(ctx context.Context, params *CopyAndUpdateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CopyAndUpdateProductResponse, error)

	CopyAndUpdateProductWithResponse(ctx context.Context, params *CopyAndUpdateProductParams, body CopyAndUpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CopyAndUpdateProductResponse, error)

	// CountFilteredProductsWithBodyWithResponse request with any body
	CountFilteredProductsWithBodyWithResponse(ctx context.Context, params *CountFilteredProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CountFilteredProductsResponse, error)

	CountFilteredProductsWithResponse(ctx context.Context, params *CountFilteredProductsParams, body CountFilteredProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*CountFilteredProductsResponse, error)

	// GetProductsWithCursorAndViewsWithBodyWithResponse request with any body
	GetProductsWithCursorAndViewsWithBodyWithResponse(ctx context.Context, params *GetProductsWithCursorAndViewsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsWithCursorAndViewsResponse, error)

	GetProductsWithCursorAndViewsWithResponse(ctx context.Context, params *GetProductsWithCursorAndViewsParams, body GetProductsWithCursorAndViewsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsWithCursorAndViewsResponse, error)

	// RemoveLabelFromProductsWithBodyWithResponse request with any body
	RemoveLabelFromProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveLabelFromProductsResponse, error)

	RemoveLabelFromProductsWithResponse(ctx context.Context, body RemoveLabelFromProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveLabelFromProductsResponse, error)

	// AddLabelToProductsWithBodyWithResponse request with any body
	AddLabelToProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddLabelToProductsResponse, error)

	AddLabelToProductsWithResponse(ctx context.Context, body AddLabelToProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddLabelToProductsResponse, error)

	// ListProductsViewsByAssetsWithBodyWithResponse request with any body
	ListProductsViewsByAssetsWithBodyWithResponse(ctx context.Context, params *ListProductsViewsByAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListProductsViewsByAssetsResponse, error)

	ListProductsViewsByAssetsWithResponse(ctx context.Context, params *ListProductsViewsByAssetsParams, body ListProductsViewsByAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListProductsViewsByAssetsResponse, error)

	// ListProductsViewsByIdsWithBodyWithResponse request with any body
	ListProductsViewsByIdsWithBodyWithResponse(ctx context.Context, params *ListProductsViewsByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListProductsViewsByIdsResponse, error)

	ListProductsViewsByIdsWithResponse(ctx context.Context, params *ListProductsViewsByIdsParams, body ListProductsViewsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListProductsViewsByIdsResponse, error)

	// ListProductsViewsByNumbersWithBodyWithResponse request with any body
	ListProductsViewsByNumbersWithBodyWithResponse(ctx context.Context, params *ListProductsViewsByNumbersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListProductsViewsByNumbersResponse, error)

	ListProductsViewsByNumbersWithResponse(ctx context.Context, params *ListProductsViewsByNumbersParams, body ListProductsViewsByNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*ListProductsViewsByNumbersResponse, error)

	// ChangeStatusesByIdsWithBodyWithResponse request with any body
	ChangeStatusesByIdsWithBodyWithResponse(ctx context.Context, params *ChangeStatusesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeStatusesByIdsResponse, error)

	ChangeStatusesByIdsWithResponse(ctx context.Context, params *ChangeStatusesByIdsParams, body ChangeStatusesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeStatusesByIdsResponse, error)

	// FindProductTemplatesWithResponse request
	FindProductTemplatesWithResponse(ctx context.Context, params *FindProductTemplatesParams, reqEditors ...RequestEditorFn) (*FindProductTemplatesResponse, error)

	// DeleteProductTemplateWithResponse request
	DeleteProductTemplateWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*DeleteProductTemplateResponse, error)

	// GetProductTemplateWithResponse request
	GetProductTemplateWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*GetProductTemplateResponse, error)

	// CreateProductTemplateWithBodyWithResponse request with any body
	CreateProductTemplateWithBodyWithResponse(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductTemplateResponse, error)

	CreateProductTemplateWithResponse(ctx context.Context, productId string, body CreateProductTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductTemplateResponse, error)

	// UpdateNameWithBodyWithResponse request with any body
	UpdateNameWithBodyWithResponse(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNameResponse, error)

	UpdateNameWithResponse(ctx context.Context, productId string, body UpdateNameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNameResponse, error)

	// UnarchiveProductsByIdsWithBodyWithResponse request with any body
	UnarchiveProductsByIdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnarchiveProductsByIdsResponse, error)

	UnarchiveProductsByIdsWithResponse(ctx context.Context, body UnarchiveProductsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*UnarchiveProductsByIdsResponse, error)

	// GetProductWithResponse request
	GetProductWithResponse(ctx context.Context, id string, params *GetProductParams, reqEditors ...RequestEditorFn) (*GetProductResponse, error)

	// UpdateProductWithBodyWithResponse request with any body
	UpdateProductWithBodyWithResponse(ctx context.Context, id string, params *UpdateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductResponse, error)

	UpdateProductWithResponse(ctx context.Context, id string, params *UpdateProductParams, body UpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductResponse, error)

	// UpdateProductDetailsWithBodyWithResponse request with any body
	UpdateProductDetailsWithBodyWithResponse(ctx context.Context, id string, params *UpdateProductDetailsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductDetailsResponse, error)

	UpdateProductDetailsWithResponse(ctx context.Context, id string, params *UpdateProductDetailsParams, body UpdateProductDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductDetailsResponse, error)

	// GetProductAssetsWithResponse request
	GetProductAssetsWithResponse(ctx context.Context, id string, params *GetProductAssetsParams, reqEditors ...RequestEditorFn) (*GetProductAssetsResponse, error)

	// AssociateAssetsWithBodyWithResponse request with any body
	AssociateAssetsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateAssetsResponse, error)

	AssociateAssetsWithResponse(ctx context.Context, id string, body AssociateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateAssetsResponse, error)

	// SetProductAssetsWithBodyWithResponse request with any body
	SetProductAssetsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetProductAssetsResponse, error)

	SetProductAssetsWithResponse(ctx context.Context, id string, body SetProductAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetProductAssetsResponse, error)

	// DisassociateAssetFromProductWithResponse request
	DisassociateAssetFromProductWithResponse(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*DisassociateAssetFromProductResponse, error)

	// AssociateAssetWithProductWithResponse request
	AssociateAssetWithProductWithResponse(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*AssociateAssetWithProductResponse, error)

	// MoveProductAssetWithResponse request
	MoveProductAssetWithResponse(ctx context.Context, id string, assetId string, params *MoveProductAssetParams, reqEditors ...RequestEditorFn) (*MoveProductAssetResponse, error)

	// GetProductAttributesWithResponse request
	GetProductAttributesWithResponse(ctx context.Context, id string, params *GetProductAttributesParams, reqEditors ...RequestEditorFn) (*GetProductAttributesResponse, error)

	// AddProductAttributeWithBodyWithResponse request with any body
	AddProductAttributeWithBodyWithResponse(ctx context.Context, id string, params *AddProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProductAttributeResponse, error)

	AddProductAttributeWithResponse(ctx context.Context, id string, params *AddProductAttributeParams, body AddProductAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProductAttributeResponse, error)

	// UpdateProductAttributesWithBodyWithResponse request with any body
	UpdateProductAttributesWithBodyWithResponse(ctx context.Context, id string, params *UpdateProductAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductAttributesResponse, error)

	UpdateProductAttributesWithResponse(ctx context.Context, id string, params *UpdateProductAttributesParams, body UpdateProductAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductAttributesResponse, error)

	// AddColumnAttributeWithBodyWithResponse request with any body
	AddColumnAttributeWithBodyWithResponse(ctx context.Context, id string, params *AddColumnAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddColumnAttributeResponse, error)

	AddColumnAttributeWithResponse(ctx context.Context, id string, params *AddColumnAttributeParams, body AddColumnAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddColumnAttributeResponse, error)

	// UpdateColumnAttributeWithBodyWithResponse request with any body
	UpdateColumnAttributeWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *UpdateColumnAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateColumnAttributeResponse, error)

	UpdateColumnAttributeWithResponse(ctx context.Context, id string, definitionId string, params *UpdateColumnAttributeParams, body UpdateColumnAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateColumnAttributeResponse, error)

	// AddDictionaryAttributeWithBodyWithResponse request with any body
	AddDictionaryAttributeWithBodyWithResponse(ctx context.Context, id string, params *AddDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDictionaryAttributeResponse, error)

	AddDictionaryAttributeWithResponse(ctx context.Context, id string, params *AddDictionaryAttributeParams, body AddDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDictionaryAttributeResponse, error)

	// SetDictionaryAttributeValuesForProductWithBodyWithResponse request with any body
	SetDictionaryAttributeValuesForProductWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDictionaryAttributeValuesForProductResponse, error)

	SetDictionaryAttributeValuesForProductWithResponse(ctx context.Context, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, body SetDictionaryAttributeValuesForProductJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDictionaryAttributeValuesForProductResponse, error)

	// AddMatrixAttributeWithBodyWithResponse request with any body
	AddMatrixAttributeWithBodyWithResponse(ctx context.Context, id string, params *AddMatrixAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMatrixAttributeResponse, error)

	AddMatrixAttributeWithResponse(ctx context.Context, id string, params *AddMatrixAttributeParams, body AddMatrixAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMatrixAttributeResponse, error)

	// UpdateMatrixAttributeWithBodyWithResponse request with any body
	UpdateMatrixAttributeWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *UpdateMatrixAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMatrixAttributeResponse, error)

	UpdateMatrixAttributeWithResponse(ctx context.Context, id string, definitionId string, params *UpdateMatrixAttributeParams, body UpdateMatrixAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMatrixAttributeResponse, error)

	// DeleteProductAttributeWithResponse request
	DeleteProductAttributeWithResponse(ctx context.Context, id string, definitionId string, reqEditors ...RequestEditorFn) (*DeleteProductAttributeResponse, error)

	// UpdateProductAttributeWithBodyWithResponse request with any body
	UpdateProductAttributeWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *UpdateProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductAttributeResponse, error)

	UpdateProductAttributeWithResponse(ctx context.Context, id string, definitionId string, params *UpdateProductAttributeParams, body UpdateProductAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductAttributeResponse, error)

	// CreateProductBundleWithResponse request
	CreateProductBundleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CreateProductBundleResponse, error)

	// DeleteProductFromBundleWithResponse request
	DeleteProductFromBundleWithResponse(ctx context.Context, id string, complementaryProductId string, reqEditors ...RequestEditorFn) (*DeleteProductFromBundleResponse, error)

	// AddProductToBundleWithBodyWithResponse request with any body
	AddProductToBundleWithBodyWithResponse(ctx context.Context, id string, complementaryProductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProductToBundleResponse, error)

	AddProductToBundleWithResponse(ctx context.Context, id string, complementaryProductId string, body AddProductToBundleJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProductToBundleResponse, error)

	// UpdateProductBundleQuantityWithBodyWithResponse request with any body
	UpdateProductBundleQuantityWithBodyWithResponse(ctx context.Context, id string, complementaryProductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductBundleQuantityResponse, error)

	UpdateProductBundleQuantityWithResponse(ctx context.Context, id string, complementaryProductId string, body UpdateProductBundleQuantityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductBundleQuantityResponse, error)

	// MoveProductInBundleWithResponse request
	MoveProductInBundleWithResponse(ctx context.Context, id string, complementaryProductId string, params *MoveProductInBundleParams, reqEditors ...RequestEditorFn) (*MoveProductInBundleResponse, error)

	// GetProductsCategoriesWithResponse request
	GetProductsCategoriesWithResponse(ctx context.Context, id string, params *GetProductsCategoriesParams, reqEditors ...RequestEditorFn) (*GetProductsCategoriesResponse, error)

	// AddProductToCategoriesWithBodyWithResponse request with any body
	AddProductToCategoriesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProductToCategoriesResponse, error)

	AddProductToCategoriesWithResponse(ctx context.Context, id string, body AddProductToCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProductToCategoriesResponse, error)

	// RemoveProductFromCategoryWithResponse request
	RemoveProductFromCategoryWithResponse(ctx context.Context, id string, categoryId string, reqEditors ...RequestEditorFn) (*RemoveProductFromCategoryResponse, error)

	// GetProductRelationsWithResponse request
	GetProductRelationsWithResponse(ctx context.Context, id string, params *GetProductRelationsParams, reqEditors ...RequestEditorFn) (*GetProductRelationsResponse, error)

	// GetCategoryConnectionsForProductWithResponse request
	GetCategoryConnectionsForProductWithResponse(ctx context.Context, id string, params *GetCategoryConnectionsForProductParams, reqEditors ...RequestEditorFn) (*GetCategoryConnectionsForProductResponse, error)

	// CreateCategoryConnectionWithBodyWithResponse request with any body
	CreateCategoryConnectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryConnectionResponse, error)

	CreateCategoryConnectionWithResponse(ctx context.Context, id string, body CreateCategoryConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryConnectionResponse, error)

	// DeleteCategoryConnectionWithResponse request
	DeleteCategoryConnectionWithResponse(ctx context.Context, id string, relationId string, categoryId string, reqEditors ...RequestEditorFn) (*DeleteCategoryConnectionResponse, error)

	// CreateProductConnectionWithBodyWithResponse request with any body
	CreateProductConnectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductConnectionResponse, error)

	CreateProductConnectionWithResponse(ctx context.Context, id string, body CreateProductConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductConnectionResponse, error)

	// UpdateRelatedProductsRelationSortingOrderSourceWithResponse request
	UpdateRelatedProductsRelationSortingOrderSourceWithResponse(ctx context.Context, id string, sortingOrderSource UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource, reqEditors ...RequestEditorFn) (*UpdateRelatedProductsRelationSortingOrderSourceResponse, error)

	// DeleteProductConnectionsByRelationWithResponse request
	DeleteProductConnectionsByRelationWithResponse(ctx context.Context, id string, relationId string, reqEditors ...RequestEditorFn) (*DeleteProductConnectionsByRelationResponse, error)

	// GetProductForRelationWithResponse request
	GetProductForRelationWithResponse(ctx context.Context, id string, relationId string, params *GetProductForRelationParams, reqEditors ...RequestEditorFn) (*GetProductForRelationResponse, error)

	// CreateProductConnectionsWithBodyWithResponse request with any body
	CreateProductConnectionsWithBodyWithResponse(ctx context.Context, id string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductConnectionsResponse, error)

	CreateProductConnectionsWithResponse(ctx context.Context, id string, relationId string, body CreateProductConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductConnectionsResponse, error)

	// DeleteManyProductConnectionsWithBodyWithResponse request with any body
	DeleteManyProductConnectionsWithBodyWithResponse(ctx context.Context, id string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteManyProductConnectionsResponse, error)

	DeleteManyProductConnectionsWithResponse(ctx context.Context, id string, relationId string, body DeleteManyProductConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteManyProductConnectionsResponse, error)

	// UpdateOrderProductRelationWithResponse request
	UpdateOrderProductRelationWithResponse(ctx context.Context, id string, relationId string, params *UpdateOrderProductRelationParams, reqEditors ...RequestEditorFn) (*UpdateOrderProductRelationResponse, error)

	// DeleteProductConnectionWithResponse request
	DeleteProductConnectionWithResponse(ctx context.Context, id string, relationId string, connectedProductId string, reqEditors ...RequestEditorFn) (*DeleteProductConnectionResponse, error)

	// UpdateOrderProductConnectionsWithResponse request
	UpdateOrderProductConnectionsWithResponse(ctx context.Context, id string, relationId string, connectedProductId string, params *UpdateOrderProductConnectionsParams, reqEditors ...RequestEditorFn) (*UpdateOrderProductConnectionsResponse, error)

	// UpdateConnectionQuantityWithBodyWithResponse request with any body
	UpdateConnectionQuantityWithBodyWithResponse(ctx context.Context, id string, rightProductId string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionQuantityResponse, error)

	UpdateConnectionQuantityWithResponse(ctx context.Context, id string, rightProductId string, relationId string, body UpdateConnectionQuantityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionQuantityResponse, error)

	// CopyProductWithResponse request
	CopyProductWithResponse(ctx context.Context, id string, params *CopyProductParams, reqEditors ...RequestEditorFn) (*CopyProductResponse, error)

	// FindProductViewsByIdWithBodyWithResponse request with any body
	FindProductViewsByIdWithBodyWithResponse(ctx context.Context, id string, params *FindProductViewsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindProductViewsByIdResponse, error)

	FindProductViewsByIdWithResponse(ctx context.Context, id string, params *FindProductViewsByIdParams, body FindProductViewsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*FindProductViewsByIdResponse, error)

	// GetGroupedProductAttributesWithResponse request
	GetGroupedProductAttributesWithResponse(ctx context.Context, id string, params *GetGroupedProductAttributesParams, reqEditors ...RequestEditorFn) (*GetGroupedProductAttributesResponse, error)

	// GetProductsLabelsWithResponse request
	GetProductsLabelsWithResponse(ctx context.Context, id string, params *GetProductsLabelsParams, reqEditors ...RequestEditorFn) (*GetProductsLabelsResponse, error)

	// AddLabelsToProductWithBodyWithResponse request with any body
	AddLabelsToProductWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddLabelsToProductResponse, error)

	AddLabelsToProductWithResponse(ctx context.Context, id string, body AddLabelsToProductJSONRequestBody, reqEditors ...RequestEditorFn) (*AddLabelsToProductResponse, error)

	// RemoveLabelFromProductWithResponse request
	RemoveLabelFromProductWithResponse(ctx context.Context, id string, labelId string, reqEditors ...RequestEditorFn) (*RemoveLabelFromProductResponse, error)

	// SetProductGroupWithResponse request
	SetProductGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SetProductGroupResponse, error)

	// GetProductVariantAttributeWithResponse request
	GetProductVariantAttributeWithResponse(ctx context.Context, id string, definitionId string, reqEditors ...RequestEditorFn) (*GetProductVariantAttributeResponse, error)

	// UpdateProductVariantAttributeWithBodyWithResponse request with any body
	UpdateProductVariantAttributeWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *UpdateProductVariantAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductVariantAttributeResponse, error)

	UpdateProductVariantAttributeWithResponse(ctx context.Context, id string, definitionId string, params *UpdateProductVariantAttributeParams, body UpdateProductVariantAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductVariantAttributeResponse, error)

	// UnassignProductVariantWithResponse request
	UnassignProductVariantWithResponse(ctx context.Context, id string, variantProductId string, reqEditors ...RequestEditorFn) (*UnassignProductVariantResponse, error)

	// AddProductVariantWithResponse request
	AddProductVariantWithResponse(ctx context.Context, id string, variantProductId string, reqEditors ...RequestEditorFn) (*AddProductVariantResponse, error)

	// MoveProductVariantWithResponse request
	MoveProductVariantWithResponse(ctx context.Context, id string, variantProductId string, params *MoveProductVariantParams, reqEditors ...RequestEditorFn) (*MoveProductVariantResponse, error)

	// ChangeStatusWithResponse request
	ChangeStatusWithResponse(ctx context.Context, id string, action ChangeStatusParamsAction, params *ChangeStatusParams, reqEditors ...RequestEditorFn) (*ChangeStatusResponse, error)

	// FindRelationsWithResponse request
	FindRelationsWithResponse(ctx context.Context, params *FindRelationsParams, reqEditors ...RequestEditorFn) (*FindRelationsResponse, error)

	// CreateRelationWithBodyWithResponse request with any body
	CreateRelationWithBodyWithResponse(ctx context.Context, params *CreateRelationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRelationResponse, error)

	CreateRelationWithResponse(ctx context.Context, params *CreateRelationParams, body CreateRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRelationResponse, error)

	// GetFilteredRelationsWithBodyWithResponse request with any body
	GetFilteredRelationsWithBodyWithResponse(ctx context.Context, params *GetFilteredRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFilteredRelationsResponse, error)

	GetFilteredRelationsWithResponse(ctx context.Context, params *GetFilteredRelationsParams, body GetFilteredRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFilteredRelationsResponse, error)

	// DeleteWithResponse request
	DeleteWithResponse(ctx context.Context, id string, params *DeleteParams, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// FindOneWithResponse request
	FindOneWithResponse(ctx context.Context, id string, params *FindOneParams, reqEditors ...RequestEditorFn) (*FindOneResponse, error)

	// UpdateRelationWithBodyWithResponse request with any body
	UpdateRelationWithBodyWithResponse(ctx context.Context, id string, params *UpdateRelationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRelationResponse, error)

	UpdateRelationWithResponse(ctx context.Context, id string, params *UpdateRelationParams, body UpdateRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRelationResponse, error)

	// GetCategoryConnectionsByRelationIdWithResponse request
	GetCategoryConnectionsByRelationIdWithResponse(ctx context.Context, id string, params *GetCategoryConnectionsByRelationIdParams, reqEditors ...RequestEditorFn) (*GetCategoryConnectionsByRelationIdResponse, error)

	// UpdateOrderRelationWithResponse request
	UpdateOrderRelationWithResponse(ctx context.Context, id string, params *UpdateOrderRelationParams, reqEditors ...RequestEditorFn) (*UpdateOrderRelationResponse, error)

	// GetByRelationIdWithResponse request
	GetByRelationIdWithResponse(ctx context.Context, id string, params *GetByRelationIdParams, reqEditors ...RequestEditorFn) (*GetByRelationIdResponse, error)

	// AddPolicyToRelationWithBodyWithResponse request with any body
	AddPolicyToRelationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToRelationResponse, error)

	AddPolicyToRelationWithResponse(ctx context.Context, id string, body AddPolicyToRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToRelationResponse, error)

	// DeletePolicyForRelationWithResponse request
	DeletePolicyForRelationWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyForRelationParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyForRelationResponse, error)

	// GetProductConnectionsByRelationIdWithResponse request
	GetProductConnectionsByRelationIdWithResponse(ctx context.Context, id string, params *GetProductConnectionsByRelationIdParams, reqEditors ...RequestEditorFn) (*GetProductConnectionsByRelationIdResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// ValidateAttributeWithBodyWithResponse request with any body
	ValidateAttributeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateAttributeResponse, error)

	ValidateAttributeWithResponse(ctx context.Context, body ValidateAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateAttributeResponse, error)

	// ValidateProductsWithBodyWithResponse request with any body
	ValidateProductsWithBodyWithResponse(ctx context.Context, params *ValidateProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateProductsResponse, error)

	ValidateProductsWithResponse(ctx context.Context, params *ValidateProductsParams, body ValidateProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateProductsResponse, error)

	// ValidateValueWithBodyWithResponse request with any body
	ValidateValueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateValueResponse, error)

	ValidateValueWithResponse(ctx context.Context, body ValidateValueJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateValueResponse, error)
}

type SynchronizeAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SynchronizeAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SynchronizeAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobStatusResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJobStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAttributeGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableAttributeGroupResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindAttributeGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAttributeGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAttributeGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateAttributeGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAttributeGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindDefinitionsWithoutGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableAttributeDefinitionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindDefinitionsWithoutGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindDefinitionsWithoutGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetOtherDefinitionsOrderStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetOtherDefinitionsOrderStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetOtherDefinitionsOrderStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveAttributeDefinitionInGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveAttributeDefinitionInGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveAttributeDefinitionInGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttributeRootGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeGroupResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAttributeRootGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttributeRootGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAttributeGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAttributeGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttributeGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindDefinitionsInGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableAttributeDefinitionResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindDefinitionsInGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindDefinitionsInGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDefinitionsOrderStrategyInGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetDefinitionsOrderStrategyInGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDefinitionsOrderStrategyInGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveAttributeDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveAttributeDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveAttributeDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCatalogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryBasicResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListCatalogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCatalogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesByAssetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryBasicResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoriesByAssetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesByAssetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindByCategoryLevelAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryBasicResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindByCategoryLevelAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindByCategoryLevelAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryAttributeBaseMetadataResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilteredNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryBasicResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFilteredNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilteredNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCategoryNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCategoryNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCategoryNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryBasicResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableString
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoryAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisassociateAssetFromCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DisassociateAssetFromCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisassociateAssetFromCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssociateAssetWithCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AssociateAssetWithCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssociateAssetWithCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveCategoryAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveCategoryAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveCategoryAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAttributesAttachedToGivenNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryAttributeMetadataResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAttributesAttachedToGivenNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAttributesAttachedToGivenNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAttributeFromNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAttributeFromNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttributeFromNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNodeAttributeValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNodeAttributeValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNodeAttributeValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogNodeAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCatalogNodeAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogNodeAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogNodeAttributeColumnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCatalogNodeAttributeColumnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogNodeAttributeColumnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNodeAttributeColumnValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNodeAttributeColumnValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNodeAttributeColumnValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogNodeAttributeCompoundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCatalogNodeAttributeCompoundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogNodeAttributeCompoundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogNodeAttributeDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCatalogNodeAttributeDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogNodeAttributeDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDictionaryAttributeValuesForCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetDictionaryAttributeValuesForCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDictionaryAttributeValuesForCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCatalogNodeAttributeMatrixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCatalogNodeAttributeMatrixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCatalogNodeAttributeMatrixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNodeAttributeMatrixValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNodeAttributeMatrixValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNodeAttributeMatrixValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogNodeChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryBasicResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCatalogNodeChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogNodeChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveCatalogNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveCatalogNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveCatalogNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCatalogNodeOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCatalogNodeOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCatalogNodeOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPathToNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableString
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPathToNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPathToNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetByCategoryNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListablePolicyDto
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetByCategoryNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetByCategoryNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPolicyToCategoryNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddPolicyToCategoryNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPolicyToCategoryNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyByCategoryNodeAndPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePolicyByCategoryNodeAndPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyByCategoryNodeAndPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryProductResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoryProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCategoryProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddCategoryProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCategoryProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyByCategoryNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListablePolicyDto
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPolicyByCategoryNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyByCategoryNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPolicyToProductsForCategoryNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddPolicyToProductsForCategoryNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPolicyToProductsForCategoryNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyFromProductsForCategoryNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePolicyFromProductsForCategoryNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyFromProductsForCategoryNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCategoryProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCategoryProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCategoryProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnarchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnarchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnarchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryWithChildrenResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoryTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPoliciesByCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListablePolicyDto
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPoliciesByCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoliciesByCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPolicyToCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddPolicyToCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPolicyToCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyByCategoryAndPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePolicyByCategoryAndPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyByCategoryAndPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyByCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListablePolicyDto
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPolicyByCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyByCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPolicyToProductsForCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddPolicyToProductsForCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPolicyToProductsForCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyFromProductsForCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePolicyFromProductsForCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyFromProductsForCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAllCompoundDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCompoundAttributeDefinitionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindAllCompoundDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAllCompoundDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCompoundDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCompoundDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCompoundDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindBySubDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCompoundAttributeDefinitionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindBySubDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindBySubDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCompoundDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCompoundDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCompoundDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompoundDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompoundAttributeDefinitionResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCompoundDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompoundDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCompoundDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCompoundDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCompoundDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindAllAttributeDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableAttributeDefinitionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindAllAttributeDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindAllAttributeDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAttributeDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateAttributeDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAttributeDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateColumnDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateColumnDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateColumnDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateColumnDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeDefinitionUpdateResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateColumnDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateColumnDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateColumnDefinitionDryRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeDefinitionUpdateResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateColumnDefinitionDryRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateColumnDefinitionDryRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDictionaryDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDictionaryDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDictionaryDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDictionaryDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDictionaryDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDictionaryDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDictionaryDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDictionaryDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDictionaryDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDictionaryParentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDictionaryParentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDictionaryParentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDictionaryParentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetDictionaryParentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDictionaryParentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDictionaryAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDictionaryAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDictionaryAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CountDictionaryAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CountableLong
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CountDictionaryAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CountDictionaryAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindFilteredDictionaryAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableDictionaryValueFilterResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindFilteredDictionaryAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindFilteredDictionaryAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindFilteredDictionaryDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableDictionaryAttributeResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindFilteredDictionaryDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindFilteredDictionaryDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDictionaryAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDictionaryAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDictionaryAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDictionaryAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DictionaryAttributeResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDictionaryAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDictionaryAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDictionaryAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDictionaryAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDictionaryAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDictionaryFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDictionaryFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDictionaryFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDictionaryValueFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDictionaryValueFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDictionaryValueFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindFilteredAttributeDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableAttributeDefinitionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindFilteredAttributeDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindFilteredAttributeDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMatrixDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateMatrixDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMatrixDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMatrixDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeDefinitionUpdateResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateMatrixDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMatrixDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMatrixDefinitionDryRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeDefinitionUpdateResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateMatrixDefinitionDryRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMatrixDefinitionDryRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindSimpleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableAttributeDefinitionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindSimpleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindSimpleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAttributeDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAttributeDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttributeDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttributeDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeDefinitionResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAttributeDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttributeDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAttributeDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeDefinitionUpdateResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateAttributeDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAttributeDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDryRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeDefinitionDeleteResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDryRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDryRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAttributeDefinitionDryRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeDefinitionUpdateResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateAttributeDefinitionDryRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAttributeDefinitionDryRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetByDefinitionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListablePolicyDto
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetByDefinitionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetByDefinitionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPolicyToAttributeDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddPolicyToAttributeDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPolicyToAttributeDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyForAttributeDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePolicyForAttributeDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyForAttributeDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableProductWithAttributeValuesResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesByPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryFullResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoriesByPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesByPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesNodeByPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryFullResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoriesNodeByPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesNodeByPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogNodeByPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryFullResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCatalogNodeByPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogNodeByPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCatalogByPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryFullResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCatalogByPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCatalogByPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttributeDefinitionsByPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableAttributeDefinitionResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAttributeDefinitionsByPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttributeDefinitionsByPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelationsByPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableRelationResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetRelationsByPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelationsByPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body                   []byte
	HTTPResponse           *http.Response
	ApplicationfullJSON200 *ListableProductAll
	JSON200                *ListableProductAll
	JSON400                *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveProductsByIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ArchiveProductsByIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveProductsByIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductsAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProductsAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductsAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddAttributesByIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddAttributesByIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddAttributesByIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertAttributesByIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpsertAttributesByIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertAttributesByIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAttributesByIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateAttributesByIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAttributesByIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignProductsToCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AssignProductsToCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignProductsToCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CopyAndUpdateProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CopyAndUpdateProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CopyAndUpdateProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CountFilteredProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CountableLong
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CountFilteredProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CountFilteredProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsWithCursorAndViewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableWithCursorProductViewDto
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductsWithCursorAndViewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsWithCursorAndViewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveLabelFromProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveLabelFromProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveLabelFromProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddLabelToProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddLabelToProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddLabelToProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProductsViewsByAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableProductViewDto
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListProductsViewsByAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProductsViewsByAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProductsViewsByIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableProductViewDto
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListProductsViewsByIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProductsViewsByIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProductsViewsByNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableProductViewDto
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListProductsViewsByNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProductsViewsByNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeStatusesByIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *UpdateProductStateResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ChangeStatusesByIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeStatusesByIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindProductTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableProductTemplateResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindProductTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindProductTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProductTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTemplateResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProductTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnarchiveProductsByIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnarchiveProductsByIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnarchiveProductsByIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductResponse struct {
	Body                   []byte
	HTTPResponse           *http.Response
	ApplicationfullJSON200 *ProductAll
	JSON200                *ProductAll
	JSON400                *ErrorResponse
	JSON404                *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProductDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableString
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssociateAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AssociateAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssociateAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetProductAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetProductAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetProductAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisassociateAssetFromProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DisassociateAssetFromProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisassociateAssetFromProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssociateAssetWithProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AssociateAssetWithProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssociateAssetWithProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveProductAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveProductAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveProductAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableAttributeValueAll
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddProductAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddProductAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddProductAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProductAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddColumnAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddColumnAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddColumnAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateColumnAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateColumnAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateColumnAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDictionaryAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddDictionaryAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDictionaryAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDictionaryAttributeValuesForProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetDictionaryAttributeValuesForProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDictionaryAttributeValuesForProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMatrixAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddMatrixAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMatrixAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMatrixAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateMatrixAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMatrixAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProductAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProductAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductBundleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProductBundleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductBundleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductFromBundleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProductFromBundleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductFromBundleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddProductToBundleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddProductToBundleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddProductToBundleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductBundleQuantityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProductBundleQuantityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductBundleQuantityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveProductInBundleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveProductInBundleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveProductInBundleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableString
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductsCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddProductToCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddProductToCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddProductToCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveProductFromCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveProductFromCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveProductFromCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableProductConnectionInfoResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryConnectionsForProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableGroupedCategoryConnectionResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoryConnectionsForProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryConnectionsForProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCategoryConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCategoryConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCategoryConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCategoryConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCategoryConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCategoryConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProductConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRelatedProductsRelationSortingOrderSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateRelatedProductsRelationSortingOrderSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRelatedProductsRelationSortingOrderSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductConnectionsByRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProductConnectionsByRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductConnectionsByRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductForRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableProductConnectionProductResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductForRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductForRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProductConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteManyProductConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteManyProductConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteManyProductConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrderProductRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrderProductRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrderProductRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProductConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrderProductConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrderProductConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrderProductConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConnectionQuantityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateConnectionQuantityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConnectionQuantityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CopyProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CopyProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CopyProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindProductViewsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductViewDto
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindProductViewsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindProductViewsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupedProductAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableGroupedAttributeValuesDto
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGroupedProductAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupedProductAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableString
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductsLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddLabelsToProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddLabelsToProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddLabelsToProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveLabelFromProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RemoveLabelFromProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveLabelFromProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetProductGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetProductGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetProductGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductVariantAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductVariantAttributeDto
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductVariantAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductVariantAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductVariantAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProductVariantAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductVariantAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnassignProductVariantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnassignProductVariantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnassignProductVariantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddProductVariantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddProductVariantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddProductVariantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveProductVariantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveProductVariantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveProductVariantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ChangeStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableRelationResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilteredRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableRelationResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFilteredRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilteredRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindOneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelationResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindOneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindOneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryConnectionsByRelationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableCategoryConnectionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoryConnectionsByRelationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryConnectionsByRelationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrderRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrderRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrderRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetByRelationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListablePolicyDto
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetByRelationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetByRelationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPolicyToRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddPolicyToRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPolicyToRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyForRelationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePolicyForRelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyForRelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductConnectionsByRelationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListableProductConnectionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetProductConnectionsByRelationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductConnectionsByRelationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PimVersion
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValidationResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ValidateAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProductValidationIssueResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ValidateProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueValidationResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ValidateValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SynchronizeAssetsWithResponse request returning *SynchronizeAssetsResponse
func (c *ClientWithResponses) SynchronizeAssetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SynchronizeAssetsResponse, error) {
	rsp, err := c.SynchronizeAssets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSynchronizeAssetsResponse(rsp)
}

// GetJobStatusWithResponse request returning *GetJobStatusResponse
func (c *ClientWithResponses) GetJobStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetJobStatusResponse, error) {
	rsp, err := c.GetJobStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobStatusResponse(rsp)
}

// FindAttributeGroupsWithResponse request returning *FindAttributeGroupsResponse
func (c *ClientWithResponses) FindAttributeGroupsWithResponse(ctx context.Context, params *FindAttributeGroupsParams, reqEditors ...RequestEditorFn) (*FindAttributeGroupsResponse, error) {
	rsp, err := c.FindAttributeGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAttributeGroupsResponse(rsp)
}

// CreateAttributeGroupWithBodyWithResponse request with arbitrary body returning *CreateAttributeGroupResponse
func (c *ClientWithResponses) CreateAttributeGroupWithBodyWithResponse(ctx context.Context, params *CreateAttributeGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttributeGroupResponse, error) {
	rsp, err := c.CreateAttributeGroupWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttributeGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateAttributeGroupWithResponse(ctx context.Context, params *CreateAttributeGroupParams, body CreateAttributeGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttributeGroupResponse, error) {
	rsp, err := c.CreateAttributeGroup(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttributeGroupResponse(rsp)
}

// FindDefinitionsWithoutGroupWithResponse request returning *FindDefinitionsWithoutGroupResponse
func (c *ClientWithResponses) FindDefinitionsWithoutGroupWithResponse(ctx context.Context, params *FindDefinitionsWithoutGroupParams, reqEditors ...RequestEditorFn) (*FindDefinitionsWithoutGroupResponse, error) {
	rsp, err := c.FindDefinitionsWithoutGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindDefinitionsWithoutGroupResponse(rsp)
}

// SetOtherDefinitionsOrderStrategyWithResponse request returning *SetOtherDefinitionsOrderStrategyResponse
func (c *ClientWithResponses) SetOtherDefinitionsOrderStrategyWithResponse(ctx context.Context, params *SetOtherDefinitionsOrderStrategyParams, reqEditors ...RequestEditorFn) (*SetOtherDefinitionsOrderStrategyResponse, error) {
	rsp, err := c.SetOtherDefinitionsOrderStrategy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetOtherDefinitionsOrderStrategyResponse(rsp)
}

// MoveAttributeDefinitionInGroupWithResponse request returning *MoveAttributeDefinitionInGroupResponse
func (c *ClientWithResponses) MoveAttributeDefinitionInGroupWithResponse(ctx context.Context, definitionId string, params *MoveAttributeDefinitionInGroupParams, reqEditors ...RequestEditorFn) (*MoveAttributeDefinitionInGroupResponse, error) {
	rsp, err := c.MoveAttributeDefinitionInGroup(ctx, definitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveAttributeDefinitionInGroupResponse(rsp)
}

// GetAttributeRootGroupWithResponse request returning *GetAttributeRootGroupResponse
func (c *ClientWithResponses) GetAttributeRootGroupWithResponse(ctx context.Context, params *GetAttributeRootGroupParams, reqEditors ...RequestEditorFn) (*GetAttributeRootGroupResponse, error) {
	rsp, err := c.GetAttributeRootGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttributeRootGroupResponse(rsp)
}

// DeleteAttributeGroupWithResponse request returning *DeleteAttributeGroupResponse
func (c *ClientWithResponses) DeleteAttributeGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAttributeGroupResponse, error) {
	rsp, err := c.DeleteAttributeGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttributeGroupResponse(rsp)
}

// MoveGroupWithResponse request returning *MoveGroupResponse
func (c *ClientWithResponses) MoveGroupWithResponse(ctx context.Context, id string, params *MoveGroupParams, reqEditors ...RequestEditorFn) (*MoveGroupResponse, error) {
	rsp, err := c.MoveGroup(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveGroupResponse(rsp)
}

// FindDefinitionsInGroupWithResponse request returning *FindDefinitionsInGroupResponse
func (c *ClientWithResponses) FindDefinitionsInGroupWithResponse(ctx context.Context, id string, params *FindDefinitionsInGroupParams, reqEditors ...RequestEditorFn) (*FindDefinitionsInGroupResponse, error) {
	rsp, err := c.FindDefinitionsInGroup(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindDefinitionsInGroupResponse(rsp)
}

// SetDefinitionsOrderStrategyInGroupWithResponse request returning *SetDefinitionsOrderStrategyInGroupResponse
func (c *ClientWithResponses) SetDefinitionsOrderStrategyInGroupWithResponse(ctx context.Context, id string, params *SetDefinitionsOrderStrategyInGroupParams, reqEditors ...RequestEditorFn) (*SetDefinitionsOrderStrategyInGroupResponse, error) {
	rsp, err := c.SetDefinitionsOrderStrategyInGroup(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDefinitionsOrderStrategyInGroupResponse(rsp)
}

// MoveAttributeDefinitionWithResponse request returning *MoveAttributeDefinitionResponse
func (c *ClientWithResponses) MoveAttributeDefinitionWithResponse(ctx context.Context, id string, definitionId string, params *MoveAttributeDefinitionParams, reqEditors ...RequestEditorFn) (*MoveAttributeDefinitionResponse, error) {
	rsp, err := c.MoveAttributeDefinition(ctx, id, definitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveAttributeDefinitionResponse(rsp)
}

// RenameWithBodyWithResponse request with arbitrary body returning *RenameResponse
func (c *ClientWithResponses) RenameWithBodyWithResponse(ctx context.Context, id string, params *RenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenameResponse, error) {
	rsp, err := c.RenameWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenameResponse(rsp)
}

func (c *ClientWithResponses) RenameWithResponse(ctx context.Context, id string, params *RenameParams, body RenameJSONRequestBody, reqEditors ...RequestEditorFn) (*RenameResponse, error) {
	rsp, err := c.Rename(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenameResponse(rsp)
}

// UpdateNumberWithBodyWithResponse request with arbitrary body returning *UpdateNumberResponse
func (c *ClientWithResponses) UpdateNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNumberResponse, error) {
	rsp, err := c.UpdateNumberWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNumberResponse(rsp)
}

func (c *ClientWithResponses) UpdateNumberWithResponse(ctx context.Context, id string, body UpdateNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNumberResponse, error) {
	rsp, err := c.UpdateNumber(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNumberResponse(rsp)
}

// ListCatalogsWithResponse request returning *ListCatalogsResponse
func (c *ClientWithResponses) ListCatalogsWithResponse(ctx context.Context, params *ListCatalogsParams, reqEditors ...RequestEditorFn) (*ListCatalogsResponse, error) {
	rsp, err := c.ListCatalogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCatalogsResponse(rsp)
}

// CreateCategoryWithBodyWithResponse request with arbitrary body returning *CreateCategoryResponse
func (c *ClientWithResponses) CreateCategoryWithBodyWithResponse(ctx context.Context, params *CreateCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategoryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

func (c *ClientWithResponses) CreateCategoryWithResponse(ctx context.Context, params *CreateCategoryParams, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategory(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

// GetCategoriesByAssetIdWithResponse request returning *GetCategoriesByAssetIdResponse
func (c *ClientWithResponses) GetCategoriesByAssetIdWithResponse(ctx context.Context, id string, params *GetCategoriesByAssetIdParams, reqEditors ...RequestEditorFn) (*GetCategoriesByAssetIdResponse, error) {
	rsp, err := c.GetCategoriesByAssetId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesByAssetIdResponse(rsp)
}

// FindByCategoryLevelAttributesWithResponse request returning *FindByCategoryLevelAttributesResponse
func (c *ClientWithResponses) FindByCategoryLevelAttributesWithResponse(ctx context.Context, attributeDefinitionId string, params *FindByCategoryLevelAttributesParams, reqEditors ...RequestEditorFn) (*FindByCategoryLevelAttributesResponse, error) {
	rsp, err := c.FindByCategoryLevelAttributes(ctx, attributeDefinitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindByCategoryLevelAttributesResponse(rsp)
}

// ListWithResponse request returning *ListResponse
func (c *ClientWithResponses) ListWithResponse(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error) {
	rsp, err := c.List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResponse(rsp)
}

// GetFilteredNodesWithBodyWithResponse request with arbitrary body returning *GetFilteredNodesResponse
func (c *ClientWithResponses) GetFilteredNodesWithBodyWithResponse(ctx context.Context, params *GetFilteredNodesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFilteredNodesResponse, error) {
	rsp, err := c.GetFilteredNodesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilteredNodesResponse(rsp)
}

func (c *ClientWithResponses) GetFilteredNodesWithResponse(ctx context.Context, params *GetFilteredNodesParams, body GetFilteredNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFilteredNodesResponse, error) {
	rsp, err := c.GetFilteredNodes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilteredNodesResponse(rsp)
}

// DeleteCategoryNodeWithResponse request returning *DeleteCategoryNodeResponse
func (c *ClientWithResponses) DeleteCategoryNodeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCategoryNodeResponse, error) {
	rsp, err := c.DeleteCategoryNode(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCategoryNodeResponse(rsp)
}

// GetNodeWithResponse request returning *GetNodeResponse
func (c *ClientWithResponses) GetNodeWithResponse(ctx context.Context, id string, params *GetNodeParams, reqEditors ...RequestEditorFn) (*GetNodeResponse, error) {
	rsp, err := c.GetNode(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeResponse(rsp)
}

// UpdateCatalogNodeWithBodyWithResponse request with arbitrary body returning *UpdateCatalogNodeResponse
func (c *ClientWithResponses) UpdateCatalogNodeWithBodyWithResponse(ctx context.Context, id string, params *UpdateCatalogNodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCatalogNodeResponse, error) {
	rsp, err := c.UpdateCatalogNodeWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogNodeResponse(rsp)
}

func (c *ClientWithResponses) UpdateCatalogNodeWithResponse(ctx context.Context, id string, params *UpdateCatalogNodeParams, body UpdateCatalogNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCatalogNodeResponse, error) {
	rsp, err := c.UpdateCatalogNode(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogNodeResponse(rsp)
}

// GetCategoryAssetsWithResponse request returning *GetCategoryAssetsResponse
func (c *ClientWithResponses) GetCategoryAssetsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCategoryAssetsResponse, error) {
	rsp, err := c.GetCategoryAssets(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryAssetsResponse(rsp)
}

// DisassociateAssetFromCategoryWithResponse request returning *DisassociateAssetFromCategoryResponse
func (c *ClientWithResponses) DisassociateAssetFromCategoryWithResponse(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*DisassociateAssetFromCategoryResponse, error) {
	rsp, err := c.DisassociateAssetFromCategory(ctx, id, assetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisassociateAssetFromCategoryResponse(rsp)
}

// AssociateAssetWithCategoryWithResponse request returning *AssociateAssetWithCategoryResponse
func (c *ClientWithResponses) AssociateAssetWithCategoryWithResponse(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*AssociateAssetWithCategoryResponse, error) {
	rsp, err := c.AssociateAssetWithCategory(ctx, id, assetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateAssetWithCategoryResponse(rsp)
}

// MoveCategoryAssetWithResponse request returning *MoveCategoryAssetResponse
func (c *ClientWithResponses) MoveCategoryAssetWithResponse(ctx context.Context, id string, assetId string, params *MoveCategoryAssetParams, reqEditors ...RequestEditorFn) (*MoveCategoryAssetResponse, error) {
	rsp, err := c.MoveCategoryAsset(ctx, id, assetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveCategoryAssetResponse(rsp)
}

// ListAttributesAttachedToGivenNodeWithResponse request returning *ListAttributesAttachedToGivenNodeResponse
func (c *ClientWithResponses) ListAttributesAttachedToGivenNodeWithResponse(ctx context.Context, id string, params *ListAttributesAttachedToGivenNodeParams, reqEditors ...RequestEditorFn) (*ListAttributesAttachedToGivenNodeResponse, error) {
	rsp, err := c.ListAttributesAttachedToGivenNode(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAttributesAttachedToGivenNodeResponse(rsp)
}

// DeleteAttributeFromNodeWithResponse request returning *DeleteAttributeFromNodeResponse
func (c *ClientWithResponses) DeleteAttributeFromNodeWithResponse(ctx context.Context, id string, attributeDefinitionId string, reqEditors ...RequestEditorFn) (*DeleteAttributeFromNodeResponse, error) {
	rsp, err := c.DeleteAttributeFromNode(ctx, id, attributeDefinitionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttributeFromNodeResponse(rsp)
}

// UpdateNodeAttributeValueWithBodyWithResponse request with arbitrary body returning *UpdateNodeAttributeValueResponse
func (c *ClientWithResponses) UpdateNodeAttributeValueWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeValueResponse, error) {
	rsp, err := c.UpdateNodeAttributeValueWithBody(ctx, id, attributeDefinitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeAttributeValueResponse(rsp)
}

func (c *ClientWithResponses) UpdateNodeAttributeValueWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeValueParams, body UpdateNodeAttributeValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeValueResponse, error) {
	rsp, err := c.UpdateNodeAttributeValue(ctx, id, attributeDefinitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeAttributeValueResponse(rsp)
}

// CreateCatalogNodeAttributeWithBodyWithResponse request with arbitrary body returning *CreateCatalogNodeAttributeResponse
func (c *ClientWithResponses) CreateCatalogNodeAttributeWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeResponse, error) {
	rsp, err := c.CreateCatalogNodeAttributeWithBody(ctx, id, attributeDefinitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogNodeAttributeResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogNodeAttributeWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeParams, body CreateCatalogNodeAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeResponse, error) {
	rsp, err := c.CreateCatalogNodeAttribute(ctx, id, attributeDefinitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogNodeAttributeResponse(rsp)
}

// CreateCatalogNodeAttributeColumnWithBodyWithResponse request with arbitrary body returning *CreateCatalogNodeAttributeColumnResponse
func (c *ClientWithResponses) CreateCatalogNodeAttributeColumnWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeColumnResponse, error) {
	rsp, err := c.CreateCatalogNodeAttributeColumnWithBody(ctx, id, attributeDefinitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogNodeAttributeColumnResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogNodeAttributeColumnWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeColumnParams, body CreateCatalogNodeAttributeColumnJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeColumnResponse, error) {
	rsp, err := c.CreateCatalogNodeAttributeColumn(ctx, id, attributeDefinitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogNodeAttributeColumnResponse(rsp)
}

// UpdateNodeAttributeColumnValueWithBodyWithResponse request with arbitrary body returning *UpdateNodeAttributeColumnValueResponse
func (c *ClientWithResponses) UpdateNodeAttributeColumnValueWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeColumnValueResponse, error) {
	rsp, err := c.UpdateNodeAttributeColumnValueWithBody(ctx, id, attributeDefinitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeAttributeColumnValueResponse(rsp)
}

func (c *ClientWithResponses) UpdateNodeAttributeColumnValueWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeColumnValueParams, body UpdateNodeAttributeColumnValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeColumnValueResponse, error) {
	rsp, err := c.UpdateNodeAttributeColumnValue(ctx, id, attributeDefinitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeAttributeColumnValueResponse(rsp)
}

// CreateCatalogNodeAttributeCompoundWithResponse request returning *CreateCatalogNodeAttributeCompoundResponse
func (c *ClientWithResponses) CreateCatalogNodeAttributeCompoundWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeCompoundParams, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeCompoundResponse, error) {
	rsp, err := c.CreateCatalogNodeAttributeCompound(ctx, id, attributeDefinitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogNodeAttributeCompoundResponse(rsp)
}

// CreateCatalogNodeAttributeDictionaryWithResponse request returning *CreateCatalogNodeAttributeDictionaryResponse
func (c *ClientWithResponses) CreateCatalogNodeAttributeDictionaryWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeDictionaryParams, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeDictionaryResponse, error) {
	rsp, err := c.CreateCatalogNodeAttributeDictionary(ctx, id, attributeDefinitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogNodeAttributeDictionaryResponse(rsp)
}

// SetDictionaryAttributeValuesForCategoryWithBodyWithResponse request with arbitrary body returning *SetDictionaryAttributeValuesForCategoryResponse
func (c *ClientWithResponses) SetDictionaryAttributeValuesForCategoryWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDictionaryAttributeValuesForCategoryResponse, error) {
	rsp, err := c.SetDictionaryAttributeValuesForCategoryWithBody(ctx, id, attributeDefinitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDictionaryAttributeValuesForCategoryResponse(rsp)
}

func (c *ClientWithResponses) SetDictionaryAttributeValuesForCategoryWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *SetDictionaryAttributeValuesForCategoryParams, body SetDictionaryAttributeValuesForCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDictionaryAttributeValuesForCategoryResponse, error) {
	rsp, err := c.SetDictionaryAttributeValuesForCategory(ctx, id, attributeDefinitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDictionaryAttributeValuesForCategoryResponse(rsp)
}

// CreateCatalogNodeAttributeMatrixWithBodyWithResponse request with arbitrary body returning *CreateCatalogNodeAttributeMatrixResponse
func (c *ClientWithResponses) CreateCatalogNodeAttributeMatrixWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeMatrixResponse, error) {
	rsp, err := c.CreateCatalogNodeAttributeMatrixWithBody(ctx, id, attributeDefinitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogNodeAttributeMatrixResponse(rsp)
}

func (c *ClientWithResponses) CreateCatalogNodeAttributeMatrixWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *CreateCatalogNodeAttributeMatrixParams, body CreateCatalogNodeAttributeMatrixJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCatalogNodeAttributeMatrixResponse, error) {
	rsp, err := c.CreateCatalogNodeAttributeMatrix(ctx, id, attributeDefinitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCatalogNodeAttributeMatrixResponse(rsp)
}

// UpdateNodeAttributeMatrixValueWithBodyWithResponse request with arbitrary body returning *UpdateNodeAttributeMatrixValueResponse
func (c *ClientWithResponses) UpdateNodeAttributeMatrixValueWithBodyWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeMatrixValueResponse, error) {
	rsp, err := c.UpdateNodeAttributeMatrixValueWithBody(ctx, id, attributeDefinitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeAttributeMatrixValueResponse(rsp)
}

func (c *ClientWithResponses) UpdateNodeAttributeMatrixValueWithResponse(ctx context.Context, id string, attributeDefinitionId string, params *UpdateNodeAttributeMatrixValueParams, body UpdateNodeAttributeMatrixValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNodeAttributeMatrixValueResponse, error) {
	rsp, err := c.UpdateNodeAttributeMatrixValue(ctx, id, attributeDefinitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeAttributeMatrixValueResponse(rsp)
}

// GetCatalogNodeChildrenWithResponse request returning *GetCatalogNodeChildrenResponse
func (c *ClientWithResponses) GetCatalogNodeChildrenWithResponse(ctx context.Context, id string, params *GetCatalogNodeChildrenParams, reqEditors ...RequestEditorFn) (*GetCatalogNodeChildrenResponse, error) {
	rsp, err := c.GetCatalogNodeChildren(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogNodeChildrenResponse(rsp)
}

// MoveCatalogNodeWithBodyWithResponse request with arbitrary body returning *MoveCatalogNodeResponse
func (c *ClientWithResponses) MoveCatalogNodeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveCatalogNodeResponse, error) {
	rsp, err := c.MoveCatalogNodeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveCatalogNodeResponse(rsp)
}

func (c *ClientWithResponses) MoveCatalogNodeWithResponse(ctx context.Context, id string, body MoveCatalogNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveCatalogNodeResponse, error) {
	rsp, err := c.MoveCatalogNode(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveCatalogNodeResponse(rsp)
}

// UpdateCatalogNodeOrderWithResponse request returning *UpdateCatalogNodeOrderResponse
func (c *ClientWithResponses) UpdateCatalogNodeOrderWithResponse(ctx context.Context, id string, params *UpdateCatalogNodeOrderParams, reqEditors ...RequestEditorFn) (*UpdateCatalogNodeOrderResponse, error) {
	rsp, err := c.UpdateCatalogNodeOrder(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCatalogNodeOrderResponse(rsp)
}

// GetPathToNodeWithResponse request returning *GetPathToNodeResponse
func (c *ClientWithResponses) GetPathToNodeWithResponse(ctx context.Context, id string, params *GetPathToNodeParams, reqEditors ...RequestEditorFn) (*GetPathToNodeResponse, error) {
	rsp, err := c.GetPathToNode(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPathToNodeResponse(rsp)
}

// GetByCategoryNodeIdWithResponse request returning *GetByCategoryNodeIdResponse
func (c *ClientWithResponses) GetByCategoryNodeIdWithResponse(ctx context.Context, id string, params *GetByCategoryNodeIdParams, reqEditors ...RequestEditorFn) (*GetByCategoryNodeIdResponse, error) {
	rsp, err := c.GetByCategoryNodeId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetByCategoryNodeIdResponse(rsp)
}

// AddPolicyToCategoryNodeWithBodyWithResponse request with arbitrary body returning *AddPolicyToCategoryNodeResponse
func (c *ClientWithResponses) AddPolicyToCategoryNodeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToCategoryNodeResponse, error) {
	rsp, err := c.AddPolicyToCategoryNodeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToCategoryNodeResponse(rsp)
}

func (c *ClientWithResponses) AddPolicyToCategoryNodeWithResponse(ctx context.Context, id string, body AddPolicyToCategoryNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToCategoryNodeResponse, error) {
	rsp, err := c.AddPolicyToCategoryNode(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToCategoryNodeResponse(rsp)
}

// DeletePolicyByCategoryNodeAndPolicyIdWithResponse request returning *DeletePolicyByCategoryNodeAndPolicyIdResponse
func (c *ClientWithResponses) DeletePolicyByCategoryNodeAndPolicyIdWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyByCategoryNodeAndPolicyIdParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyByCategoryNodeAndPolicyIdResponse, error) {
	rsp, err := c.DeletePolicyByCategoryNodeAndPolicyId(ctx, id, policyId, policyType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyByCategoryNodeAndPolicyIdResponse(rsp)
}

// GetCategoryProductsWithResponse request returning *GetCategoryProductsResponse
func (c *ClientWithResponses) GetCategoryProductsWithResponse(ctx context.Context, id string, params *GetCategoryProductsParams, reqEditors ...RequestEditorFn) (*GetCategoryProductsResponse, error) {
	rsp, err := c.GetCategoryProducts(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryProductsResponse(rsp)
}

// AddCategoryProductsWithBodyWithResponse request with arbitrary body returning *AddCategoryProductsResponse
func (c *ClientWithResponses) AddCategoryProductsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCategoryProductsResponse, error) {
	rsp, err := c.AddCategoryProductsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCategoryProductsResponse(rsp)
}

func (c *ClientWithResponses) AddCategoryProductsWithResponse(ctx context.Context, id string, body AddCategoryProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCategoryProductsResponse, error) {
	rsp, err := c.AddCategoryProducts(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCategoryProductsResponse(rsp)
}

// GetPolicyByCategoryNodeIdWithResponse request returning *GetPolicyByCategoryNodeIdResponse
func (c *ClientWithResponses) GetPolicyByCategoryNodeIdWithResponse(ctx context.Context, id string, params *GetPolicyByCategoryNodeIdParams, reqEditors ...RequestEditorFn) (*GetPolicyByCategoryNodeIdResponse, error) {
	rsp, err := c.GetPolicyByCategoryNodeId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyByCategoryNodeIdResponse(rsp)
}

// AddPolicyToProductsForCategoryNodeIdWithBodyWithResponse request with arbitrary body returning *AddPolicyToProductsForCategoryNodeIdResponse
func (c *ClientWithResponses) AddPolicyToProductsForCategoryNodeIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToProductsForCategoryNodeIdResponse, error) {
	rsp, err := c.AddPolicyToProductsForCategoryNodeIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToProductsForCategoryNodeIdResponse(rsp)
}

func (c *ClientWithResponses) AddPolicyToProductsForCategoryNodeIdWithResponse(ctx context.Context, id string, body AddPolicyToProductsForCategoryNodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToProductsForCategoryNodeIdResponse, error) {
	rsp, err := c.AddPolicyToProductsForCategoryNodeId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToProductsForCategoryNodeIdResponse(rsp)
}

// DeletePolicyFromProductsForCategoryNodeIdWithResponse request returning *DeletePolicyFromProductsForCategoryNodeIdResponse
func (c *ClientWithResponses) DeletePolicyFromProductsForCategoryNodeIdWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyFromProductsForCategoryNodeIdParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyFromProductsForCategoryNodeIdResponse, error) {
	rsp, err := c.DeletePolicyFromProductsForCategoryNodeId(ctx, id, policyId, policyType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyFromProductsForCategoryNodeIdResponse(rsp)
}

// DeleteCategoryProductsWithResponse request returning *DeleteCategoryProductsResponse
func (c *ClientWithResponses) DeleteCategoryProductsWithResponse(ctx context.Context, id string, productId string, reqEditors ...RequestEditorFn) (*DeleteCategoryProductsResponse, error) {
	rsp, err := c.DeleteCategoryProducts(ctx, id, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCategoryProductsResponse(rsp)
}

// ArchiveWithResponse request returning *ArchiveResponse
func (c *ClientWithResponses) ArchiveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchiveResponse, error) {
	rsp, err := c.Archive(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveResponse(rsp)
}

// UnarchiveWithResponse request returning *UnarchiveResponse
func (c *ClientWithResponses) UnarchiveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UnarchiveResponse, error) {
	rsp, err := c.Unarchive(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnarchiveResponse(rsp)
}

// GetCategoryTreeWithResponse request returning *GetCategoryTreeResponse
func (c *ClientWithResponses) GetCategoryTreeWithResponse(ctx context.Context, id string, params *GetCategoryTreeParams, reqEditors ...RequestEditorFn) (*GetCategoryTreeResponse, error) {
	rsp, err := c.GetCategoryTree(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryTreeResponse(rsp)
}

// GetPoliciesByCategoryIdWithResponse request returning *GetPoliciesByCategoryIdResponse
func (c *ClientWithResponses) GetPoliciesByCategoryIdWithResponse(ctx context.Context, id string, params *GetPoliciesByCategoryIdParams, reqEditors ...RequestEditorFn) (*GetPoliciesByCategoryIdResponse, error) {
	rsp, err := c.GetPoliciesByCategoryId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPoliciesByCategoryIdResponse(rsp)
}

// AddPolicyToCategoryWithBodyWithResponse request with arbitrary body returning *AddPolicyToCategoryResponse
func (c *ClientWithResponses) AddPolicyToCategoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToCategoryResponse, error) {
	rsp, err := c.AddPolicyToCategoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToCategoryResponse(rsp)
}

func (c *ClientWithResponses) AddPolicyToCategoryWithResponse(ctx context.Context, id string, body AddPolicyToCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToCategoryResponse, error) {
	rsp, err := c.AddPolicyToCategory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToCategoryResponse(rsp)
}

// DeletePolicyByCategoryAndPolicyIdWithResponse request returning *DeletePolicyByCategoryAndPolicyIdResponse
func (c *ClientWithResponses) DeletePolicyByCategoryAndPolicyIdWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyByCategoryAndPolicyIdParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyByCategoryAndPolicyIdResponse, error) {
	rsp, err := c.DeletePolicyByCategoryAndPolicyId(ctx, id, policyId, policyType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyByCategoryAndPolicyIdResponse(rsp)
}

// GetPolicyByCategoryIdWithResponse request returning *GetPolicyByCategoryIdResponse
func (c *ClientWithResponses) GetPolicyByCategoryIdWithResponse(ctx context.Context, id string, params *GetPolicyByCategoryIdParams, reqEditors ...RequestEditorFn) (*GetPolicyByCategoryIdResponse, error) {
	rsp, err := c.GetPolicyByCategoryId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyByCategoryIdResponse(rsp)
}

// AddPolicyToProductsForCategoryIdWithBodyWithResponse request with arbitrary body returning *AddPolicyToProductsForCategoryIdResponse
func (c *ClientWithResponses) AddPolicyToProductsForCategoryIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToProductsForCategoryIdResponse, error) {
	rsp, err := c.AddPolicyToProductsForCategoryIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToProductsForCategoryIdResponse(rsp)
}

func (c *ClientWithResponses) AddPolicyToProductsForCategoryIdWithResponse(ctx context.Context, id string, body AddPolicyToProductsForCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToProductsForCategoryIdResponse, error) {
	rsp, err := c.AddPolicyToProductsForCategoryId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToProductsForCategoryIdResponse(rsp)
}

// DeletePolicyFromProductsForCategoryIdWithResponse request returning *DeletePolicyFromProductsForCategoryIdResponse
func (c *ClientWithResponses) DeletePolicyFromProductsForCategoryIdWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyFromProductsForCategoryIdParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyFromProductsForCategoryIdResponse, error) {
	rsp, err := c.DeletePolicyFromProductsForCategoryId(ctx, id, policyId, policyType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyFromProductsForCategoryIdResponse(rsp)
}

// FindAllCompoundDefinitionsWithResponse request returning *FindAllCompoundDefinitionsResponse
func (c *ClientWithResponses) FindAllCompoundDefinitionsWithResponse(ctx context.Context, params *FindAllCompoundDefinitionsParams, reqEditors ...RequestEditorFn) (*FindAllCompoundDefinitionsResponse, error) {
	rsp, err := c.FindAllCompoundDefinitions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAllCompoundDefinitionsResponse(rsp)
}

// CreateCompoundDefinitionWithBodyWithResponse request with arbitrary body returning *CreateCompoundDefinitionResponse
func (c *ClientWithResponses) CreateCompoundDefinitionWithBodyWithResponse(ctx context.Context, params *CreateCompoundDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCompoundDefinitionResponse, error) {
	rsp, err := c.CreateCompoundDefinitionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCompoundDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateCompoundDefinitionWithResponse(ctx context.Context, params *CreateCompoundDefinitionParams, body CreateCompoundDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCompoundDefinitionResponse, error) {
	rsp, err := c.CreateCompoundDefinition(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCompoundDefinitionResponse(rsp)
}

// FindBySubDefinitionsWithResponse request returning *FindBySubDefinitionsResponse
func (c *ClientWithResponses) FindBySubDefinitionsWithResponse(ctx context.Context, attributeDefinitionId string, params *FindBySubDefinitionsParams, reqEditors ...RequestEditorFn) (*FindBySubDefinitionsResponse, error) {
	rsp, err := c.FindBySubDefinitions(ctx, attributeDefinitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindBySubDefinitionsResponse(rsp)
}

// DeleteCompoundDefinitionWithResponse request returning *DeleteCompoundDefinitionResponse
func (c *ClientWithResponses) DeleteCompoundDefinitionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCompoundDefinitionResponse, error) {
	rsp, err := c.DeleteCompoundDefinition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCompoundDefinitionResponse(rsp)
}

// GetCompoundDefinitionWithResponse request returning *GetCompoundDefinitionResponse
func (c *ClientWithResponses) GetCompoundDefinitionWithResponse(ctx context.Context, id string, params *GetCompoundDefinitionParams, reqEditors ...RequestEditorFn) (*GetCompoundDefinitionResponse, error) {
	rsp, err := c.GetCompoundDefinition(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompoundDefinitionResponse(rsp)
}

// UpdateCompoundDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateCompoundDefinitionResponse
func (c *ClientWithResponses) UpdateCompoundDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateCompoundDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCompoundDefinitionResponse, error) {
	rsp, err := c.UpdateCompoundDefinitionWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompoundDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateCompoundDefinitionWithResponse(ctx context.Context, id string, params *UpdateCompoundDefinitionParams, body UpdateCompoundDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCompoundDefinitionResponse, error) {
	rsp, err := c.UpdateCompoundDefinition(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCompoundDefinitionResponse(rsp)
}

// FindAllAttributeDefinitionsWithResponse request returning *FindAllAttributeDefinitionsResponse
func (c *ClientWithResponses) FindAllAttributeDefinitionsWithResponse(ctx context.Context, params *FindAllAttributeDefinitionsParams, reqEditors ...RequestEditorFn) (*FindAllAttributeDefinitionsResponse, error) {
	rsp, err := c.FindAllAttributeDefinitions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindAllAttributeDefinitionsResponse(rsp)
}

// CreateAttributeDefinitionWithBodyWithResponse request with arbitrary body returning *CreateAttributeDefinitionResponse
func (c *ClientWithResponses) CreateAttributeDefinitionWithBodyWithResponse(ctx context.Context, params *CreateAttributeDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttributeDefinitionResponse, error) {
	rsp, err := c.CreateAttributeDefinitionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttributeDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateAttributeDefinitionWithResponse(ctx context.Context, params *CreateAttributeDefinitionParams, body CreateAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttributeDefinitionResponse, error) {
	rsp, err := c.CreateAttributeDefinition(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttributeDefinitionResponse(rsp)
}

// CreateColumnDefinitionWithBodyWithResponse request with arbitrary body returning *CreateColumnDefinitionResponse
func (c *ClientWithResponses) CreateColumnDefinitionWithBodyWithResponse(ctx context.Context, params *CreateColumnDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateColumnDefinitionResponse, error) {
	rsp, err := c.CreateColumnDefinitionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateColumnDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateColumnDefinitionWithResponse(ctx context.Context, params *CreateColumnDefinitionParams, body CreateColumnDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateColumnDefinitionResponse, error) {
	rsp, err := c.CreateColumnDefinition(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateColumnDefinitionResponse(rsp)
}

// UpdateColumnDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateColumnDefinitionResponse
func (c *ClientWithResponses) UpdateColumnDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateColumnDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateColumnDefinitionResponse, error) {
	rsp, err := c.UpdateColumnDefinitionWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateColumnDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateColumnDefinitionWithResponse(ctx context.Context, id string, params *UpdateColumnDefinitionParams, body UpdateColumnDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateColumnDefinitionResponse, error) {
	rsp, err := c.UpdateColumnDefinition(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateColumnDefinitionResponse(rsp)
}

// UpdateColumnDefinitionDryRunWithBodyWithResponse request with arbitrary body returning *UpdateColumnDefinitionDryRunResponse
func (c *ClientWithResponses) UpdateColumnDefinitionDryRunWithBodyWithResponse(ctx context.Context, id string, params *UpdateColumnDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateColumnDefinitionDryRunResponse, error) {
	rsp, err := c.UpdateColumnDefinitionDryRunWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateColumnDefinitionDryRunResponse(rsp)
}

func (c *ClientWithResponses) UpdateColumnDefinitionDryRunWithResponse(ctx context.Context, id string, params *UpdateColumnDefinitionDryRunParams, body UpdateColumnDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateColumnDefinitionDryRunResponse, error) {
	rsp, err := c.UpdateColumnDefinitionDryRun(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateColumnDefinitionDryRunResponse(rsp)
}

// CreateDictionaryDefinitionWithBodyWithResponse request with arbitrary body returning *CreateDictionaryDefinitionResponse
func (c *ClientWithResponses) CreateDictionaryDefinitionWithBodyWithResponse(ctx context.Context, params *CreateDictionaryDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDictionaryDefinitionResponse, error) {
	rsp, err := c.CreateDictionaryDefinitionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDictionaryDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateDictionaryDefinitionWithResponse(ctx context.Context, params *CreateDictionaryDefinitionParams, body CreateDictionaryDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDictionaryDefinitionResponse, error) {
	rsp, err := c.CreateDictionaryDefinition(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDictionaryDefinitionResponse(rsp)
}

// DeleteDictionaryDefinitionWithResponse request returning *DeleteDictionaryDefinitionResponse
func (c *ClientWithResponses) DeleteDictionaryDefinitionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDictionaryDefinitionResponse, error) {
	rsp, err := c.DeleteDictionaryDefinition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDictionaryDefinitionResponse(rsp)
}

// PatchUpdateWithBodyWithResponse request with arbitrary body returning *PatchUpdateResponse
func (c *ClientWithResponses) PatchUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUpdateResponse, error) {
	rsp, err := c.PatchUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUpdateResponse(rsp)
}

func (c *ClientWithResponses) PatchUpdateWithResponse(ctx context.Context, id string, body PatchUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUpdateResponse, error) {
	rsp, err := c.PatchUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUpdateResponse(rsp)
}

// UpdateDictionaryDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateDictionaryDefinitionResponse
func (c *ClientWithResponses) UpdateDictionaryDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateDictionaryDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDictionaryDefinitionResponse, error) {
	rsp, err := c.UpdateDictionaryDefinitionWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDictionaryDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateDictionaryDefinitionWithResponse(ctx context.Context, id string, params *UpdateDictionaryDefinitionParams, body UpdateDictionaryDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDictionaryDefinitionResponse, error) {
	rsp, err := c.UpdateDictionaryDefinition(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDictionaryDefinitionResponse(rsp)
}

// DeleteDictionaryParentWithResponse request returning *DeleteDictionaryParentResponse
func (c *ClientWithResponses) DeleteDictionaryParentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDictionaryParentResponse, error) {
	rsp, err := c.DeleteDictionaryParent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDictionaryParentResponse(rsp)
}

// SetDictionaryParentWithResponse request returning *SetDictionaryParentResponse
func (c *ClientWithResponses) SetDictionaryParentWithResponse(ctx context.Context, id string, parentDefinitionId string, reqEditors ...RequestEditorFn) (*SetDictionaryParentResponse, error) {
	rsp, err := c.SetDictionaryParent(ctx, id, parentDefinitionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDictionaryParentResponse(rsp)
}

// CreateDictionaryAttributeWithBodyWithResponse request with arbitrary body returning *CreateDictionaryAttributeResponse
func (c *ClientWithResponses) CreateDictionaryAttributeWithBodyWithResponse(ctx context.Context, id string, params *CreateDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDictionaryAttributeResponse, error) {
	rsp, err := c.CreateDictionaryAttributeWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDictionaryAttributeResponse(rsp)
}

func (c *ClientWithResponses) CreateDictionaryAttributeWithResponse(ctx context.Context, id string, params *CreateDictionaryAttributeParams, body CreateDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDictionaryAttributeResponse, error) {
	rsp, err := c.CreateDictionaryAttribute(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDictionaryAttributeResponse(rsp)
}

// CountDictionaryAttributesWithBodyWithResponse request with arbitrary body returning *CountDictionaryAttributesResponse
func (c *ClientWithResponses) CountDictionaryAttributesWithBodyWithResponse(ctx context.Context, id string, params *CountDictionaryAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CountDictionaryAttributesResponse, error) {
	rsp, err := c.CountDictionaryAttributesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountDictionaryAttributesResponse(rsp)
}

func (c *ClientWithResponses) CountDictionaryAttributesWithResponse(ctx context.Context, id string, params *CountDictionaryAttributesParams, body CountDictionaryAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*CountDictionaryAttributesResponse, error) {
	rsp, err := c.CountDictionaryAttributes(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountDictionaryAttributesResponse(rsp)
}

// FindFilteredDictionaryAttributesWithBodyWithResponse request with arbitrary body returning *FindFilteredDictionaryAttributesResponse
func (c *ClientWithResponses) FindFilteredDictionaryAttributesWithBodyWithResponse(ctx context.Context, id string, params *FindFilteredDictionaryAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindFilteredDictionaryAttributesResponse, error) {
	rsp, err := c.FindFilteredDictionaryAttributesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFilteredDictionaryAttributesResponse(rsp)
}

func (c *ClientWithResponses) FindFilteredDictionaryAttributesWithResponse(ctx context.Context, id string, params *FindFilteredDictionaryAttributesParams, body FindFilteredDictionaryAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*FindFilteredDictionaryAttributesResponse, error) {
	rsp, err := c.FindFilteredDictionaryAttributes(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFilteredDictionaryAttributesResponse(rsp)
}

// FindFilteredDictionaryDefinitionsWithBodyWithResponse request with arbitrary body returning *FindFilteredDictionaryDefinitionsResponse
func (c *ClientWithResponses) FindFilteredDictionaryDefinitionsWithBodyWithResponse(ctx context.Context, id string, params *FindFilteredDictionaryDefinitionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindFilteredDictionaryDefinitionsResponse, error) {
	rsp, err := c.FindFilteredDictionaryDefinitionsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFilteredDictionaryDefinitionsResponse(rsp)
}

func (c *ClientWithResponses) FindFilteredDictionaryDefinitionsWithResponse(ctx context.Context, id string, params *FindFilteredDictionaryDefinitionsParams, body FindFilteredDictionaryDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*FindFilteredDictionaryDefinitionsResponse, error) {
	rsp, err := c.FindFilteredDictionaryDefinitions(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFilteredDictionaryDefinitionsResponse(rsp)
}

// DeleteDictionaryAttributeWithResponse request returning *DeleteDictionaryAttributeResponse
func (c *ClientWithResponses) DeleteDictionaryAttributeWithResponse(ctx context.Context, id string, valueId string, reqEditors ...RequestEditorFn) (*DeleteDictionaryAttributeResponse, error) {
	rsp, err := c.DeleteDictionaryAttribute(ctx, id, valueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDictionaryAttributeResponse(rsp)
}

// GetDictionaryAttributeWithResponse request returning *GetDictionaryAttributeResponse
func (c *ClientWithResponses) GetDictionaryAttributeWithResponse(ctx context.Context, id string, valueId string, params *GetDictionaryAttributeParams, reqEditors ...RequestEditorFn) (*GetDictionaryAttributeResponse, error) {
	rsp, err := c.GetDictionaryAttribute(ctx, id, valueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDictionaryAttributeResponse(rsp)
}

// UpdateDictionaryAttributeWithBodyWithResponse request with arbitrary body returning *UpdateDictionaryAttributeResponse
func (c *ClientWithResponses) UpdateDictionaryAttributeWithBodyWithResponse(ctx context.Context, id string, valueId string, params *UpdateDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDictionaryAttributeResponse, error) {
	rsp, err := c.UpdateDictionaryAttributeWithBody(ctx, id, valueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDictionaryAttributeResponse(rsp)
}

func (c *ClientWithResponses) UpdateDictionaryAttributeWithResponse(ctx context.Context, id string, valueId string, params *UpdateDictionaryAttributeParams, body UpdateDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDictionaryAttributeResponse, error) {
	rsp, err := c.UpdateDictionaryAttribute(ctx, id, valueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDictionaryAttributeResponse(rsp)
}

// DeleteDictionaryFilterWithResponse request returning *DeleteDictionaryFilterResponse
func (c *ClientWithResponses) DeleteDictionaryFilterWithResponse(ctx context.Context, id string, valueId string, parentValueId string, reqEditors ...RequestEditorFn) (*DeleteDictionaryFilterResponse, error) {
	rsp, err := c.DeleteDictionaryFilter(ctx, id, valueId, parentValueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDictionaryFilterResponse(rsp)
}

// CreateDictionaryValueFilterWithResponse request returning *CreateDictionaryValueFilterResponse
func (c *ClientWithResponses) CreateDictionaryValueFilterWithResponse(ctx context.Context, id string, valueId string, parentValueId string, reqEditors ...RequestEditorFn) (*CreateDictionaryValueFilterResponse, error) {
	rsp, err := c.CreateDictionaryValueFilter(ctx, id, valueId, parentValueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDictionaryValueFilterResponse(rsp)
}

// FindFilteredAttributeDefinitionsWithBodyWithResponse request with arbitrary body returning *FindFilteredAttributeDefinitionsResponse
func (c *ClientWithResponses) FindFilteredAttributeDefinitionsWithBodyWithResponse(ctx context.Context, params *FindFilteredAttributeDefinitionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindFilteredAttributeDefinitionsResponse, error) {
	rsp, err := c.FindFilteredAttributeDefinitionsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFilteredAttributeDefinitionsResponse(rsp)
}

func (c *ClientWithResponses) FindFilteredAttributeDefinitionsWithResponse(ctx context.Context, params *FindFilteredAttributeDefinitionsParams, body FindFilteredAttributeDefinitionsJSONRequestBody, reqEditors ...RequestEditorFn) (*FindFilteredAttributeDefinitionsResponse, error) {
	rsp, err := c.FindFilteredAttributeDefinitions(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFilteredAttributeDefinitionsResponse(rsp)
}

// CreateMatrixDefinitionWithBodyWithResponse request with arbitrary body returning *CreateMatrixDefinitionResponse
func (c *ClientWithResponses) CreateMatrixDefinitionWithBodyWithResponse(ctx context.Context, params *CreateMatrixDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMatrixDefinitionResponse, error) {
	rsp, err := c.CreateMatrixDefinitionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMatrixDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateMatrixDefinitionWithResponse(ctx context.Context, params *CreateMatrixDefinitionParams, body CreateMatrixDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMatrixDefinitionResponse, error) {
	rsp, err := c.CreateMatrixDefinition(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMatrixDefinitionResponse(rsp)
}

// UpdateMatrixDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateMatrixDefinitionResponse
func (c *ClientWithResponses) UpdateMatrixDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateMatrixDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMatrixDefinitionResponse, error) {
	rsp, err := c.UpdateMatrixDefinitionWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMatrixDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateMatrixDefinitionWithResponse(ctx context.Context, id string, params *UpdateMatrixDefinitionParams, body UpdateMatrixDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMatrixDefinitionResponse, error) {
	rsp, err := c.UpdateMatrixDefinition(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMatrixDefinitionResponse(rsp)
}

// UpdateMatrixDefinitionDryRunWithBodyWithResponse request with arbitrary body returning *UpdateMatrixDefinitionDryRunResponse
func (c *ClientWithResponses) UpdateMatrixDefinitionDryRunWithBodyWithResponse(ctx context.Context, id string, params *UpdateMatrixDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMatrixDefinitionDryRunResponse, error) {
	rsp, err := c.UpdateMatrixDefinitionDryRunWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMatrixDefinitionDryRunResponse(rsp)
}

func (c *ClientWithResponses) UpdateMatrixDefinitionDryRunWithResponse(ctx context.Context, id string, params *UpdateMatrixDefinitionDryRunParams, body UpdateMatrixDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMatrixDefinitionDryRunResponse, error) {
	rsp, err := c.UpdateMatrixDefinitionDryRun(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMatrixDefinitionDryRunResponse(rsp)
}

// FindSimpleWithResponse request returning *FindSimpleResponse
func (c *ClientWithResponses) FindSimpleWithResponse(ctx context.Context, params *FindSimpleParams, reqEditors ...RequestEditorFn) (*FindSimpleResponse, error) {
	rsp, err := c.FindSimple(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindSimpleResponse(rsp)
}

// DeleteAttributeDefinitionWithResponse request returning *DeleteAttributeDefinitionResponse
func (c *ClientWithResponses) DeleteAttributeDefinitionWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAttributeDefinitionResponse, error) {
	rsp, err := c.DeleteAttributeDefinition(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttributeDefinitionResponse(rsp)
}

// GetAttributeDefinitionWithResponse request returning *GetAttributeDefinitionResponse
func (c *ClientWithResponses) GetAttributeDefinitionWithResponse(ctx context.Context, id string, params *GetAttributeDefinitionParams, reqEditors ...RequestEditorFn) (*GetAttributeDefinitionResponse, error) {
	rsp, err := c.GetAttributeDefinition(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttributeDefinitionResponse(rsp)
}

// UpdateMetadataWithBodyWithResponse request with arbitrary body returning *UpdateMetadataResponse
func (c *ClientWithResponses) UpdateMetadataWithBodyWithResponse(ctx context.Context, id string, params *UpdateMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMetadataResponse, error) {
	rsp, err := c.UpdateMetadataWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMetadataResponse(rsp)
}

func (c *ClientWithResponses) UpdateMetadataWithResponse(ctx context.Context, id string, params *UpdateMetadataParams, body UpdateMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMetadataResponse, error) {
	rsp, err := c.UpdateMetadata(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMetadataResponse(rsp)
}

// UpdateAttributeDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateAttributeDefinitionResponse
func (c *ClientWithResponses) UpdateAttributeDefinitionWithBodyWithResponse(ctx context.Context, id string, params *UpdateAttributeDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAttributeDefinitionResponse, error) {
	rsp, err := c.UpdateAttributeDefinitionWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAttributeDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateAttributeDefinitionWithResponse(ctx context.Context, id string, params *UpdateAttributeDefinitionParams, body UpdateAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAttributeDefinitionResponse, error) {
	rsp, err := c.UpdateAttributeDefinition(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAttributeDefinitionResponse(rsp)
}

// DeleteDryRunWithResponse request returning *DeleteDryRunResponse
func (c *ClientWithResponses) DeleteDryRunWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteDryRunResponse, error) {
	rsp, err := c.DeleteDryRun(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDryRunResponse(rsp)
}

// UpdateAttributeDefinitionDryRunWithBodyWithResponse request with arbitrary body returning *UpdateAttributeDefinitionDryRunResponse
func (c *ClientWithResponses) UpdateAttributeDefinitionDryRunWithBodyWithResponse(ctx context.Context, id string, params *UpdateAttributeDefinitionDryRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAttributeDefinitionDryRunResponse, error) {
	rsp, err := c.UpdateAttributeDefinitionDryRunWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAttributeDefinitionDryRunResponse(rsp)
}

func (c *ClientWithResponses) UpdateAttributeDefinitionDryRunWithResponse(ctx context.Context, id string, params *UpdateAttributeDefinitionDryRunParams, body UpdateAttributeDefinitionDryRunJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAttributeDefinitionDryRunResponse, error) {
	rsp, err := c.UpdateAttributeDefinitionDryRun(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAttributeDefinitionDryRunResponse(rsp)
}

// GetByDefinitionIdWithResponse request returning *GetByDefinitionIdResponse
func (c *ClientWithResponses) GetByDefinitionIdWithResponse(ctx context.Context, id string, params *GetByDefinitionIdParams, reqEditors ...RequestEditorFn) (*GetByDefinitionIdResponse, error) {
	rsp, err := c.GetByDefinitionId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetByDefinitionIdResponse(rsp)
}

// AddPolicyToAttributeDefinitionWithBodyWithResponse request with arbitrary body returning *AddPolicyToAttributeDefinitionResponse
func (c *ClientWithResponses) AddPolicyToAttributeDefinitionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToAttributeDefinitionResponse, error) {
	rsp, err := c.AddPolicyToAttributeDefinitionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToAttributeDefinitionResponse(rsp)
}

func (c *ClientWithResponses) AddPolicyToAttributeDefinitionWithResponse(ctx context.Context, id string, body AddPolicyToAttributeDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToAttributeDefinitionResponse, error) {
	rsp, err := c.AddPolicyToAttributeDefinition(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToAttributeDefinitionResponse(rsp)
}

// DeletePolicyForAttributeDefinitionWithResponse request returning *DeletePolicyForAttributeDefinitionResponse
func (c *ClientWithResponses) DeletePolicyForAttributeDefinitionWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyForAttributeDefinitionParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyForAttributeDefinitionResponse, error) {
	rsp, err := c.DeletePolicyForAttributeDefinition(ctx, id, policyId, policyType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyForAttributeDefinitionResponse(rsp)
}

// FindProductsWithResponse request returning *FindProductsResponse
func (c *ClientWithResponses) FindProductsWithResponse(ctx context.Context, id string, params *FindProductsParams, reqEditors ...RequestEditorFn) (*FindProductsResponse, error) {
	rsp, err := c.FindProducts(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindProductsResponse(rsp)
}

// GetCategoriesByPolicyIdWithResponse request returning *GetCategoriesByPolicyIdResponse
func (c *ClientWithResponses) GetCategoriesByPolicyIdWithResponse(ctx context.Context, id string, params *GetCategoriesByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetCategoriesByPolicyIdResponse, error) {
	rsp, err := c.GetCategoriesByPolicyId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesByPolicyIdResponse(rsp)
}

// GetCategoriesNodeByPolicyIdWithResponse request returning *GetCategoriesNodeByPolicyIdResponse
func (c *ClientWithResponses) GetCategoriesNodeByPolicyIdWithResponse(ctx context.Context, id string, params *GetCategoriesNodeByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetCategoriesNodeByPolicyIdResponse, error) {
	rsp, err := c.GetCategoriesNodeByPolicyId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesNodeByPolicyIdResponse(rsp)
}

// GetCatalogNodeByPolicyIdWithResponse request returning *GetCatalogNodeByPolicyIdResponse
func (c *ClientWithResponses) GetCatalogNodeByPolicyIdWithResponse(ctx context.Context, id string, params *GetCatalogNodeByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetCatalogNodeByPolicyIdResponse, error) {
	rsp, err := c.GetCatalogNodeByPolicyId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogNodeByPolicyIdResponse(rsp)
}

// GetCatalogByPolicyIdWithResponse request returning *GetCatalogByPolicyIdResponse
func (c *ClientWithResponses) GetCatalogByPolicyIdWithResponse(ctx context.Context, id string, params *GetCatalogByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetCatalogByPolicyIdResponse, error) {
	rsp, err := c.GetCatalogByPolicyId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCatalogByPolicyIdResponse(rsp)
}

// GetAttributeDefinitionsByPolicyIdWithResponse request returning *GetAttributeDefinitionsByPolicyIdResponse
func (c *ClientWithResponses) GetAttributeDefinitionsByPolicyIdWithResponse(ctx context.Context, id string, params *GetAttributeDefinitionsByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetAttributeDefinitionsByPolicyIdResponse, error) {
	rsp, err := c.GetAttributeDefinitionsByPolicyId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttributeDefinitionsByPolicyIdResponse(rsp)
}

// GetRelationsByPolicyIdWithResponse request returning *GetRelationsByPolicyIdResponse
func (c *ClientWithResponses) GetRelationsByPolicyIdWithResponse(ctx context.Context, id string, params *GetRelationsByPolicyIdParams, reqEditors ...RequestEditorFn) (*GetRelationsByPolicyIdResponse, error) {
	rsp, err := c.GetRelationsByPolicyId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelationsByPolicyIdResponse(rsp)
}

// GetProductsWithResponse request returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// CreateProductWithBodyWithResponse request with arbitrary body returning *CreateProductResponse
func (c *ClientWithResponses) CreateProductWithBodyWithResponse(ctx context.Context, params *CreateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductResponse, error) {
	rsp, err := c.CreateProductWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductResponse(rsp)
}

func (c *ClientWithResponses) CreateProductWithResponse(ctx context.Context, params *CreateProductParams, body CreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductResponse, error) {
	rsp, err := c.CreateProduct(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductResponse(rsp)
}

// ArchiveProductsByIdsWithBodyWithResponse request with arbitrary body returning *ArchiveProductsByIdsResponse
func (c *ClientWithResponses) ArchiveProductsByIdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArchiveProductsByIdsResponse, error) {
	rsp, err := c.ArchiveProductsByIdsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveProductsByIdsResponse(rsp)
}

func (c *ClientWithResponses) ArchiveProductsByIdsWithResponse(ctx context.Context, body ArchiveProductsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*ArchiveProductsByIdsResponse, error) {
	rsp, err := c.ArchiveProductsByIds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveProductsByIdsResponse(rsp)
}

// DeleteProductsAttributeWithBodyWithResponse request with arbitrary body returning *DeleteProductsAttributeResponse
func (c *ClientWithResponses) DeleteProductsAttributeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteProductsAttributeResponse, error) {
	rsp, err := c.DeleteProductsAttributeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductsAttributeResponse(rsp)
}

func (c *ClientWithResponses) DeleteProductsAttributeWithResponse(ctx context.Context, body DeleteProductsAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteProductsAttributeResponse, error) {
	rsp, err := c.DeleteProductsAttribute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductsAttributeResponse(rsp)
}

// CreateOrUpdateWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateResponse
func (c *ClientWithResponses) CreateOrUpdateWithBodyWithResponse(ctx context.Context, params *CreateOrUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateResponse, error) {
	rsp, err := c.CreateOrUpdateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateWithResponse(ctx context.Context, params *CreateOrUpdateParams, body CreateOrUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateResponse, error) {
	rsp, err := c.CreateOrUpdate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateResponse(rsp)
}

// AddAttributesByIdsWithBodyWithResponse request with arbitrary body returning *AddAttributesByIdsResponse
func (c *ClientWithResponses) AddAttributesByIdsWithBodyWithResponse(ctx context.Context, params *AddAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddAttributesByIdsResponse, error) {
	rsp, err := c.AddAttributesByIdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAttributesByIdsResponse(rsp)
}

func (c *ClientWithResponses) AddAttributesByIdsWithResponse(ctx context.Context, params *AddAttributesByIdsParams, body AddAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddAttributesByIdsResponse, error) {
	rsp, err := c.AddAttributesByIds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddAttributesByIdsResponse(rsp)
}

// UpsertAttributesByIdsWithBodyWithResponse request with arbitrary body returning *UpsertAttributesByIdsResponse
func (c *ClientWithResponses) UpsertAttributesByIdsWithBodyWithResponse(ctx context.Context, params *UpsertAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertAttributesByIdsResponse, error) {
	rsp, err := c.UpsertAttributesByIdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertAttributesByIdsResponse(rsp)
}

func (c *ClientWithResponses) UpsertAttributesByIdsWithResponse(ctx context.Context, params *UpsertAttributesByIdsParams, body UpsertAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertAttributesByIdsResponse, error) {
	rsp, err := c.UpsertAttributesByIds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertAttributesByIdsResponse(rsp)
}

// UpdateAttributesByIdsWithBodyWithResponse request with arbitrary body returning *UpdateAttributesByIdsResponse
func (c *ClientWithResponses) UpdateAttributesByIdsWithBodyWithResponse(ctx context.Context, params *UpdateAttributesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAttributesByIdsResponse, error) {
	rsp, err := c.UpdateAttributesByIdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAttributesByIdsResponse(rsp)
}

func (c *ClientWithResponses) UpdateAttributesByIdsWithResponse(ctx context.Context, params *UpdateAttributesByIdsParams, body UpdateAttributesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAttributesByIdsResponse, error) {
	rsp, err := c.UpdateAttributesByIds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAttributesByIdsResponse(rsp)
}

// AssignProductsToCategoryWithBodyWithResponse request with arbitrary body returning *AssignProductsToCategoryResponse
func (c *ClientWithResponses) AssignProductsToCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignProductsToCategoryResponse, error) {
	rsp, err := c.AssignProductsToCategoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignProductsToCategoryResponse(rsp)
}

func (c *ClientWithResponses) AssignProductsToCategoryWithResponse(ctx context.Context, body AssignProductsToCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignProductsToCategoryResponse, error) {
	rsp, err := c.AssignProductsToCategory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignProductsToCategoryResponse(rsp)
}

// CopyAndUpdateProductWithBodyWithResponse request with arbitrary body returning *CopyAndUpdateProductResponse
func (c *ClientWithResponses) CopyAndUpdateProductWithBodyWithResponse(ctx context.Context, params *CopyAndUpdateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CopyAndUpdateProductResponse, error) {
	rsp, err := c.CopyAndUpdateProductWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCopyAndUpdateProductResponse(rsp)
}

func (c *ClientWithResponses) CopyAndUpdateProductWithResponse(ctx context.Context, params *CopyAndUpdateProductParams, body CopyAndUpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CopyAndUpdateProductResponse, error) {
	rsp, err := c.CopyAndUpdateProduct(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCopyAndUpdateProductResponse(rsp)
}

// CountFilteredProductsWithBodyWithResponse request with arbitrary body returning *CountFilteredProductsResponse
func (c *ClientWithResponses) CountFilteredProductsWithBodyWithResponse(ctx context.Context, params *CountFilteredProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CountFilteredProductsResponse, error) {
	rsp, err := c.CountFilteredProductsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountFilteredProductsResponse(rsp)
}

func (c *ClientWithResponses) CountFilteredProductsWithResponse(ctx context.Context, params *CountFilteredProductsParams, body CountFilteredProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*CountFilteredProductsResponse, error) {
	rsp, err := c.CountFilteredProducts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountFilteredProductsResponse(rsp)
}

// GetProductsWithCursorAndViewsWithBodyWithResponse request with arbitrary body returning *GetProductsWithCursorAndViewsResponse
func (c *ClientWithResponses) GetProductsWithCursorAndViewsWithBodyWithResponse(ctx context.Context, params *GetProductsWithCursorAndViewsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetProductsWithCursorAndViewsResponse, error) {
	rsp, err := c.GetProductsWithCursorAndViewsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsWithCursorAndViewsResponse(rsp)
}

func (c *ClientWithResponses) GetProductsWithCursorAndViewsWithResponse(ctx context.Context, params *GetProductsWithCursorAndViewsParams, body GetProductsWithCursorAndViewsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetProductsWithCursorAndViewsResponse, error) {
	rsp, err := c.GetProductsWithCursorAndViews(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsWithCursorAndViewsResponse(rsp)
}

// RemoveLabelFromProductsWithBodyWithResponse request with arbitrary body returning *RemoveLabelFromProductsResponse
func (c *ClientWithResponses) RemoveLabelFromProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveLabelFromProductsResponse, error) {
	rsp, err := c.RemoveLabelFromProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveLabelFromProductsResponse(rsp)
}

func (c *ClientWithResponses) RemoveLabelFromProductsWithResponse(ctx context.Context, body RemoveLabelFromProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveLabelFromProductsResponse, error) {
	rsp, err := c.RemoveLabelFromProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveLabelFromProductsResponse(rsp)
}

// AddLabelToProductsWithBodyWithResponse request with arbitrary body returning *AddLabelToProductsResponse
func (c *ClientWithResponses) AddLabelToProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddLabelToProductsResponse, error) {
	rsp, err := c.AddLabelToProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddLabelToProductsResponse(rsp)
}

func (c *ClientWithResponses) AddLabelToProductsWithResponse(ctx context.Context, body AddLabelToProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddLabelToProductsResponse, error) {
	rsp, err := c.AddLabelToProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddLabelToProductsResponse(rsp)
}

// ListProductsViewsByAssetsWithBodyWithResponse request with arbitrary body returning *ListProductsViewsByAssetsResponse
func (c *ClientWithResponses) ListProductsViewsByAssetsWithBodyWithResponse(ctx context.Context, params *ListProductsViewsByAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListProductsViewsByAssetsResponse, error) {
	rsp, err := c.ListProductsViewsByAssetsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProductsViewsByAssetsResponse(rsp)
}

func (c *ClientWithResponses) ListProductsViewsByAssetsWithResponse(ctx context.Context, params *ListProductsViewsByAssetsParams, body ListProductsViewsByAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListProductsViewsByAssetsResponse, error) {
	rsp, err := c.ListProductsViewsByAssets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProductsViewsByAssetsResponse(rsp)
}

// ListProductsViewsByIdsWithBodyWithResponse request with arbitrary body returning *ListProductsViewsByIdsResponse
func (c *ClientWithResponses) ListProductsViewsByIdsWithBodyWithResponse(ctx context.Context, params *ListProductsViewsByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListProductsViewsByIdsResponse, error) {
	rsp, err := c.ListProductsViewsByIdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProductsViewsByIdsResponse(rsp)
}

func (c *ClientWithResponses) ListProductsViewsByIdsWithResponse(ctx context.Context, params *ListProductsViewsByIdsParams, body ListProductsViewsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListProductsViewsByIdsResponse, error) {
	rsp, err := c.ListProductsViewsByIds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProductsViewsByIdsResponse(rsp)
}

// ListProductsViewsByNumbersWithBodyWithResponse request with arbitrary body returning *ListProductsViewsByNumbersResponse
func (c *ClientWithResponses) ListProductsViewsByNumbersWithBodyWithResponse(ctx context.Context, params *ListProductsViewsByNumbersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListProductsViewsByNumbersResponse, error) {
	rsp, err := c.ListProductsViewsByNumbersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProductsViewsByNumbersResponse(rsp)
}

func (c *ClientWithResponses) ListProductsViewsByNumbersWithResponse(ctx context.Context, params *ListProductsViewsByNumbersParams, body ListProductsViewsByNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*ListProductsViewsByNumbersResponse, error) {
	rsp, err := c.ListProductsViewsByNumbers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProductsViewsByNumbersResponse(rsp)
}

// ChangeStatusesByIdsWithBodyWithResponse request with arbitrary body returning *ChangeStatusesByIdsResponse
func (c *ClientWithResponses) ChangeStatusesByIdsWithBodyWithResponse(ctx context.Context, params *ChangeStatusesByIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeStatusesByIdsResponse, error) {
	rsp, err := c.ChangeStatusesByIdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeStatusesByIdsResponse(rsp)
}

func (c *ClientWithResponses) ChangeStatusesByIdsWithResponse(ctx context.Context, params *ChangeStatusesByIdsParams, body ChangeStatusesByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeStatusesByIdsResponse, error) {
	rsp, err := c.ChangeStatusesByIds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeStatusesByIdsResponse(rsp)
}

// FindProductTemplatesWithResponse request returning *FindProductTemplatesResponse
func (c *ClientWithResponses) FindProductTemplatesWithResponse(ctx context.Context, params *FindProductTemplatesParams, reqEditors ...RequestEditorFn) (*FindProductTemplatesResponse, error) {
	rsp, err := c.FindProductTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindProductTemplatesResponse(rsp)
}

// DeleteProductTemplateWithResponse request returning *DeleteProductTemplateResponse
func (c *ClientWithResponses) DeleteProductTemplateWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*DeleteProductTemplateResponse, error) {
	rsp, err := c.DeleteProductTemplate(ctx, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductTemplateResponse(rsp)
}

// GetProductTemplateWithResponse request returning *GetProductTemplateResponse
func (c *ClientWithResponses) GetProductTemplateWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*GetProductTemplateResponse, error) {
	rsp, err := c.GetProductTemplate(ctx, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductTemplateResponse(rsp)
}

// CreateProductTemplateWithBodyWithResponse request with arbitrary body returning *CreateProductTemplateResponse
func (c *ClientWithResponses) CreateProductTemplateWithBodyWithResponse(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductTemplateResponse, error) {
	rsp, err := c.CreateProductTemplateWithBody(ctx, productId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateProductTemplateWithResponse(ctx context.Context, productId string, body CreateProductTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductTemplateResponse, error) {
	rsp, err := c.CreateProductTemplate(ctx, productId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductTemplateResponse(rsp)
}

// UpdateNameWithBodyWithResponse request with arbitrary body returning *UpdateNameResponse
func (c *ClientWithResponses) UpdateNameWithBodyWithResponse(ctx context.Context, productId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNameResponse, error) {
	rsp, err := c.UpdateNameWithBody(ctx, productId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNameResponse(rsp)
}

func (c *ClientWithResponses) UpdateNameWithResponse(ctx context.Context, productId string, body UpdateNameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNameResponse, error) {
	rsp, err := c.UpdateName(ctx, productId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNameResponse(rsp)
}

// UnarchiveProductsByIdsWithBodyWithResponse request with arbitrary body returning *UnarchiveProductsByIdsResponse
func (c *ClientWithResponses) UnarchiveProductsByIdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnarchiveProductsByIdsResponse, error) {
	rsp, err := c.UnarchiveProductsByIdsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnarchiveProductsByIdsResponse(rsp)
}

func (c *ClientWithResponses) UnarchiveProductsByIdsWithResponse(ctx context.Context, body UnarchiveProductsByIdsJSONRequestBody, reqEditors ...RequestEditorFn) (*UnarchiveProductsByIdsResponse, error) {
	rsp, err := c.UnarchiveProductsByIds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnarchiveProductsByIdsResponse(rsp)
}

// GetProductWithResponse request returning *GetProductResponse
func (c *ClientWithResponses) GetProductWithResponse(ctx context.Context, id string, params *GetProductParams, reqEditors ...RequestEditorFn) (*GetProductResponse, error) {
	rsp, err := c.GetProduct(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductResponse(rsp)
}

// UpdateProductWithBodyWithResponse request with arbitrary body returning *UpdateProductResponse
func (c *ClientWithResponses) UpdateProductWithBodyWithResponse(ctx context.Context, id string, params *UpdateProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductResponse, error) {
	rsp, err := c.UpdateProductWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductWithResponse(ctx context.Context, id string, params *UpdateProductParams, body UpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductResponse, error) {
	rsp, err := c.UpdateProduct(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductResponse(rsp)
}

// UpdateProductDetailsWithBodyWithResponse request with arbitrary body returning *UpdateProductDetailsResponse
func (c *ClientWithResponses) UpdateProductDetailsWithBodyWithResponse(ctx context.Context, id string, params *UpdateProductDetailsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductDetailsResponse, error) {
	rsp, err := c.UpdateProductDetailsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductDetailsResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductDetailsWithResponse(ctx context.Context, id string, params *UpdateProductDetailsParams, body UpdateProductDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductDetailsResponse, error) {
	rsp, err := c.UpdateProductDetails(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductDetailsResponse(rsp)
}

// GetProductAssetsWithResponse request returning *GetProductAssetsResponse
func (c *ClientWithResponses) GetProductAssetsWithResponse(ctx context.Context, id string, params *GetProductAssetsParams, reqEditors ...RequestEditorFn) (*GetProductAssetsResponse, error) {
	rsp, err := c.GetProductAssets(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductAssetsResponse(rsp)
}

// AssociateAssetsWithBodyWithResponse request with arbitrary body returning *AssociateAssetsResponse
func (c *ClientWithResponses) AssociateAssetsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateAssetsResponse, error) {
	rsp, err := c.AssociateAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateAssetsResponse(rsp)
}

func (c *ClientWithResponses) AssociateAssetsWithResponse(ctx context.Context, id string, body AssociateAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateAssetsResponse, error) {
	rsp, err := c.AssociateAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateAssetsResponse(rsp)
}

// SetProductAssetsWithBodyWithResponse request with arbitrary body returning *SetProductAssetsResponse
func (c *ClientWithResponses) SetProductAssetsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetProductAssetsResponse, error) {
	rsp, err := c.SetProductAssetsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetProductAssetsResponse(rsp)
}

func (c *ClientWithResponses) SetProductAssetsWithResponse(ctx context.Context, id string, body SetProductAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetProductAssetsResponse, error) {
	rsp, err := c.SetProductAssets(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetProductAssetsResponse(rsp)
}

// DisassociateAssetFromProductWithResponse request returning *DisassociateAssetFromProductResponse
func (c *ClientWithResponses) DisassociateAssetFromProductWithResponse(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*DisassociateAssetFromProductResponse, error) {
	rsp, err := c.DisassociateAssetFromProduct(ctx, id, assetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisassociateAssetFromProductResponse(rsp)
}

// AssociateAssetWithProductWithResponse request returning *AssociateAssetWithProductResponse
func (c *ClientWithResponses) AssociateAssetWithProductWithResponse(ctx context.Context, id string, assetId string, reqEditors ...RequestEditorFn) (*AssociateAssetWithProductResponse, error) {
	rsp, err := c.AssociateAssetWithProduct(ctx, id, assetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateAssetWithProductResponse(rsp)
}

// MoveProductAssetWithResponse request returning *MoveProductAssetResponse
func (c *ClientWithResponses) MoveProductAssetWithResponse(ctx context.Context, id string, assetId string, params *MoveProductAssetParams, reqEditors ...RequestEditorFn) (*MoveProductAssetResponse, error) {
	rsp, err := c.MoveProductAsset(ctx, id, assetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveProductAssetResponse(rsp)
}

// GetProductAttributesWithResponse request returning *GetProductAttributesResponse
func (c *ClientWithResponses) GetProductAttributesWithResponse(ctx context.Context, id string, params *GetProductAttributesParams, reqEditors ...RequestEditorFn) (*GetProductAttributesResponse, error) {
	rsp, err := c.GetProductAttributes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductAttributesResponse(rsp)
}

// AddProductAttributeWithBodyWithResponse request with arbitrary body returning *AddProductAttributeResponse
func (c *ClientWithResponses) AddProductAttributeWithBodyWithResponse(ctx context.Context, id string, params *AddProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProductAttributeResponse, error) {
	rsp, err := c.AddProductAttributeWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProductAttributeResponse(rsp)
}

func (c *ClientWithResponses) AddProductAttributeWithResponse(ctx context.Context, id string, params *AddProductAttributeParams, body AddProductAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProductAttributeResponse, error) {
	rsp, err := c.AddProductAttribute(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProductAttributeResponse(rsp)
}

// UpdateProductAttributesWithBodyWithResponse request with arbitrary body returning *UpdateProductAttributesResponse
func (c *ClientWithResponses) UpdateProductAttributesWithBodyWithResponse(ctx context.Context, id string, params *UpdateProductAttributesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductAttributesResponse, error) {
	rsp, err := c.UpdateProductAttributesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductAttributesResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductAttributesWithResponse(ctx context.Context, id string, params *UpdateProductAttributesParams, body UpdateProductAttributesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductAttributesResponse, error) {
	rsp, err := c.UpdateProductAttributes(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductAttributesResponse(rsp)
}

// AddColumnAttributeWithBodyWithResponse request with arbitrary body returning *AddColumnAttributeResponse
func (c *ClientWithResponses) AddColumnAttributeWithBodyWithResponse(ctx context.Context, id string, params *AddColumnAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddColumnAttributeResponse, error) {
	rsp, err := c.AddColumnAttributeWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddColumnAttributeResponse(rsp)
}

func (c *ClientWithResponses) AddColumnAttributeWithResponse(ctx context.Context, id string, params *AddColumnAttributeParams, body AddColumnAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddColumnAttributeResponse, error) {
	rsp, err := c.AddColumnAttribute(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddColumnAttributeResponse(rsp)
}

// UpdateColumnAttributeWithBodyWithResponse request with arbitrary body returning *UpdateColumnAttributeResponse
func (c *ClientWithResponses) UpdateColumnAttributeWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *UpdateColumnAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateColumnAttributeResponse, error) {
	rsp, err := c.UpdateColumnAttributeWithBody(ctx, id, definitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateColumnAttributeResponse(rsp)
}

func (c *ClientWithResponses) UpdateColumnAttributeWithResponse(ctx context.Context, id string, definitionId string, params *UpdateColumnAttributeParams, body UpdateColumnAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateColumnAttributeResponse, error) {
	rsp, err := c.UpdateColumnAttribute(ctx, id, definitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateColumnAttributeResponse(rsp)
}

// AddDictionaryAttributeWithBodyWithResponse request with arbitrary body returning *AddDictionaryAttributeResponse
func (c *ClientWithResponses) AddDictionaryAttributeWithBodyWithResponse(ctx context.Context, id string, params *AddDictionaryAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDictionaryAttributeResponse, error) {
	rsp, err := c.AddDictionaryAttributeWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDictionaryAttributeResponse(rsp)
}

func (c *ClientWithResponses) AddDictionaryAttributeWithResponse(ctx context.Context, id string, params *AddDictionaryAttributeParams, body AddDictionaryAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDictionaryAttributeResponse, error) {
	rsp, err := c.AddDictionaryAttribute(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDictionaryAttributeResponse(rsp)
}

// SetDictionaryAttributeValuesForProductWithBodyWithResponse request with arbitrary body returning *SetDictionaryAttributeValuesForProductResponse
func (c *ClientWithResponses) SetDictionaryAttributeValuesForProductWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDictionaryAttributeValuesForProductResponse, error) {
	rsp, err := c.SetDictionaryAttributeValuesForProductWithBody(ctx, id, definitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDictionaryAttributeValuesForProductResponse(rsp)
}

func (c *ClientWithResponses) SetDictionaryAttributeValuesForProductWithResponse(ctx context.Context, id string, definitionId string, params *SetDictionaryAttributeValuesForProductParams, body SetDictionaryAttributeValuesForProductJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDictionaryAttributeValuesForProductResponse, error) {
	rsp, err := c.SetDictionaryAttributeValuesForProduct(ctx, id, definitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDictionaryAttributeValuesForProductResponse(rsp)
}

// AddMatrixAttributeWithBodyWithResponse request with arbitrary body returning *AddMatrixAttributeResponse
func (c *ClientWithResponses) AddMatrixAttributeWithBodyWithResponse(ctx context.Context, id string, params *AddMatrixAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMatrixAttributeResponse, error) {
	rsp, err := c.AddMatrixAttributeWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMatrixAttributeResponse(rsp)
}

func (c *ClientWithResponses) AddMatrixAttributeWithResponse(ctx context.Context, id string, params *AddMatrixAttributeParams, body AddMatrixAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMatrixAttributeResponse, error) {
	rsp, err := c.AddMatrixAttribute(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMatrixAttributeResponse(rsp)
}

// UpdateMatrixAttributeWithBodyWithResponse request with arbitrary body returning *UpdateMatrixAttributeResponse
func (c *ClientWithResponses) UpdateMatrixAttributeWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *UpdateMatrixAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMatrixAttributeResponse, error) {
	rsp, err := c.UpdateMatrixAttributeWithBody(ctx, id, definitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMatrixAttributeResponse(rsp)
}

func (c *ClientWithResponses) UpdateMatrixAttributeWithResponse(ctx context.Context, id string, definitionId string, params *UpdateMatrixAttributeParams, body UpdateMatrixAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMatrixAttributeResponse, error) {
	rsp, err := c.UpdateMatrixAttribute(ctx, id, definitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMatrixAttributeResponse(rsp)
}

// DeleteProductAttributeWithResponse request returning *DeleteProductAttributeResponse
func (c *ClientWithResponses) DeleteProductAttributeWithResponse(ctx context.Context, id string, definitionId string, reqEditors ...RequestEditorFn) (*DeleteProductAttributeResponse, error) {
	rsp, err := c.DeleteProductAttribute(ctx, id, definitionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductAttributeResponse(rsp)
}

// UpdateProductAttributeWithBodyWithResponse request with arbitrary body returning *UpdateProductAttributeResponse
func (c *ClientWithResponses) UpdateProductAttributeWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *UpdateProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductAttributeResponse, error) {
	rsp, err := c.UpdateProductAttributeWithBody(ctx, id, definitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductAttributeResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductAttributeWithResponse(ctx context.Context, id string, definitionId string, params *UpdateProductAttributeParams, body UpdateProductAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductAttributeResponse, error) {
	rsp, err := c.UpdateProductAttribute(ctx, id, definitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductAttributeResponse(rsp)
}

// CreateProductBundleWithResponse request returning *CreateProductBundleResponse
func (c *ClientWithResponses) CreateProductBundleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CreateProductBundleResponse, error) {
	rsp, err := c.CreateProductBundle(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductBundleResponse(rsp)
}

// DeleteProductFromBundleWithResponse request returning *DeleteProductFromBundleResponse
func (c *ClientWithResponses) DeleteProductFromBundleWithResponse(ctx context.Context, id string, complementaryProductId string, reqEditors ...RequestEditorFn) (*DeleteProductFromBundleResponse, error) {
	rsp, err := c.DeleteProductFromBundle(ctx, id, complementaryProductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductFromBundleResponse(rsp)
}

// AddProductToBundleWithBodyWithResponse request with arbitrary body returning *AddProductToBundleResponse
func (c *ClientWithResponses) AddProductToBundleWithBodyWithResponse(ctx context.Context, id string, complementaryProductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProductToBundleResponse, error) {
	rsp, err := c.AddProductToBundleWithBody(ctx, id, complementaryProductId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProductToBundleResponse(rsp)
}

func (c *ClientWithResponses) AddProductToBundleWithResponse(ctx context.Context, id string, complementaryProductId string, body AddProductToBundleJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProductToBundleResponse, error) {
	rsp, err := c.AddProductToBundle(ctx, id, complementaryProductId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProductToBundleResponse(rsp)
}

// UpdateProductBundleQuantityWithBodyWithResponse request with arbitrary body returning *UpdateProductBundleQuantityResponse
func (c *ClientWithResponses) UpdateProductBundleQuantityWithBodyWithResponse(ctx context.Context, id string, complementaryProductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductBundleQuantityResponse, error) {
	rsp, err := c.UpdateProductBundleQuantityWithBody(ctx, id, complementaryProductId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductBundleQuantityResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductBundleQuantityWithResponse(ctx context.Context, id string, complementaryProductId string, body UpdateProductBundleQuantityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductBundleQuantityResponse, error) {
	rsp, err := c.UpdateProductBundleQuantity(ctx, id, complementaryProductId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductBundleQuantityResponse(rsp)
}

// MoveProductInBundleWithResponse request returning *MoveProductInBundleResponse
func (c *ClientWithResponses) MoveProductInBundleWithResponse(ctx context.Context, id string, complementaryProductId string, params *MoveProductInBundleParams, reqEditors ...RequestEditorFn) (*MoveProductInBundleResponse, error) {
	rsp, err := c.MoveProductInBundle(ctx, id, complementaryProductId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveProductInBundleResponse(rsp)
}

// GetProductsCategoriesWithResponse request returning *GetProductsCategoriesResponse
func (c *ClientWithResponses) GetProductsCategoriesWithResponse(ctx context.Context, id string, params *GetProductsCategoriesParams, reqEditors ...RequestEditorFn) (*GetProductsCategoriesResponse, error) {
	rsp, err := c.GetProductsCategories(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsCategoriesResponse(rsp)
}

// AddProductToCategoriesWithBodyWithResponse request with arbitrary body returning *AddProductToCategoriesResponse
func (c *ClientWithResponses) AddProductToCategoriesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddProductToCategoriesResponse, error) {
	rsp, err := c.AddProductToCategoriesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProductToCategoriesResponse(rsp)
}

func (c *ClientWithResponses) AddProductToCategoriesWithResponse(ctx context.Context, id string, body AddProductToCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddProductToCategoriesResponse, error) {
	rsp, err := c.AddProductToCategories(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProductToCategoriesResponse(rsp)
}

// RemoveProductFromCategoryWithResponse request returning *RemoveProductFromCategoryResponse
func (c *ClientWithResponses) RemoveProductFromCategoryWithResponse(ctx context.Context, id string, categoryId string, reqEditors ...RequestEditorFn) (*RemoveProductFromCategoryResponse, error) {
	rsp, err := c.RemoveProductFromCategory(ctx, id, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveProductFromCategoryResponse(rsp)
}

// GetProductRelationsWithResponse request returning *GetProductRelationsResponse
func (c *ClientWithResponses) GetProductRelationsWithResponse(ctx context.Context, id string, params *GetProductRelationsParams, reqEditors ...RequestEditorFn) (*GetProductRelationsResponse, error) {
	rsp, err := c.GetProductRelations(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductRelationsResponse(rsp)
}

// GetCategoryConnectionsForProductWithResponse request returning *GetCategoryConnectionsForProductResponse
func (c *ClientWithResponses) GetCategoryConnectionsForProductWithResponse(ctx context.Context, id string, params *GetCategoryConnectionsForProductParams, reqEditors ...RequestEditorFn) (*GetCategoryConnectionsForProductResponse, error) {
	rsp, err := c.GetCategoryConnectionsForProduct(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryConnectionsForProductResponse(rsp)
}

// CreateCategoryConnectionWithBodyWithResponse request with arbitrary body returning *CreateCategoryConnectionResponse
func (c *ClientWithResponses) CreateCategoryConnectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryConnectionResponse, error) {
	rsp, err := c.CreateCategoryConnectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryConnectionResponse(rsp)
}

func (c *ClientWithResponses) CreateCategoryConnectionWithResponse(ctx context.Context, id string, body CreateCategoryConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryConnectionResponse, error) {
	rsp, err := c.CreateCategoryConnection(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryConnectionResponse(rsp)
}

// DeleteCategoryConnectionWithResponse request returning *DeleteCategoryConnectionResponse
func (c *ClientWithResponses) DeleteCategoryConnectionWithResponse(ctx context.Context, id string, relationId string, categoryId string, reqEditors ...RequestEditorFn) (*DeleteCategoryConnectionResponse, error) {
	rsp, err := c.DeleteCategoryConnection(ctx, id, relationId, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCategoryConnectionResponse(rsp)
}

// CreateProductConnectionWithBodyWithResponse request with arbitrary body returning *CreateProductConnectionResponse
func (c *ClientWithResponses) CreateProductConnectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductConnectionResponse, error) {
	rsp, err := c.CreateProductConnectionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductConnectionResponse(rsp)
}

func (c *ClientWithResponses) CreateProductConnectionWithResponse(ctx context.Context, id string, body CreateProductConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductConnectionResponse, error) {
	rsp, err := c.CreateProductConnection(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductConnectionResponse(rsp)
}

// UpdateRelatedProductsRelationSortingOrderSourceWithResponse request returning *UpdateRelatedProductsRelationSortingOrderSourceResponse
func (c *ClientWithResponses) UpdateRelatedProductsRelationSortingOrderSourceWithResponse(ctx context.Context, id string, sortingOrderSource UpdateRelatedProductsRelationSortingOrderSourceParamsSortingOrderSource, reqEditors ...RequestEditorFn) (*UpdateRelatedProductsRelationSortingOrderSourceResponse, error) {
	rsp, err := c.UpdateRelatedProductsRelationSortingOrderSource(ctx, id, sortingOrderSource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRelatedProductsRelationSortingOrderSourceResponse(rsp)
}

// DeleteProductConnectionsByRelationWithResponse request returning *DeleteProductConnectionsByRelationResponse
func (c *ClientWithResponses) DeleteProductConnectionsByRelationWithResponse(ctx context.Context, id string, relationId string, reqEditors ...RequestEditorFn) (*DeleteProductConnectionsByRelationResponse, error) {
	rsp, err := c.DeleteProductConnectionsByRelation(ctx, id, relationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductConnectionsByRelationResponse(rsp)
}

// GetProductForRelationWithResponse request returning *GetProductForRelationResponse
func (c *ClientWithResponses) GetProductForRelationWithResponse(ctx context.Context, id string, relationId string, params *GetProductForRelationParams, reqEditors ...RequestEditorFn) (*GetProductForRelationResponse, error) {
	rsp, err := c.GetProductForRelation(ctx, id, relationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductForRelationResponse(rsp)
}

// CreateProductConnectionsWithBodyWithResponse request with arbitrary body returning *CreateProductConnectionsResponse
func (c *ClientWithResponses) CreateProductConnectionsWithBodyWithResponse(ctx context.Context, id string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductConnectionsResponse, error) {
	rsp, err := c.CreateProductConnectionsWithBody(ctx, id, relationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductConnectionsResponse(rsp)
}

func (c *ClientWithResponses) CreateProductConnectionsWithResponse(ctx context.Context, id string, relationId string, body CreateProductConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductConnectionsResponse, error) {
	rsp, err := c.CreateProductConnections(ctx, id, relationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductConnectionsResponse(rsp)
}

// DeleteManyProductConnectionsWithBodyWithResponse request with arbitrary body returning *DeleteManyProductConnectionsResponse
func (c *ClientWithResponses) DeleteManyProductConnectionsWithBodyWithResponse(ctx context.Context, id string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteManyProductConnectionsResponse, error) {
	rsp, err := c.DeleteManyProductConnectionsWithBody(ctx, id, relationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteManyProductConnectionsResponse(rsp)
}

func (c *ClientWithResponses) DeleteManyProductConnectionsWithResponse(ctx context.Context, id string, relationId string, body DeleteManyProductConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteManyProductConnectionsResponse, error) {
	rsp, err := c.DeleteManyProductConnections(ctx, id, relationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteManyProductConnectionsResponse(rsp)
}

// UpdateOrderProductRelationWithResponse request returning *UpdateOrderProductRelationResponse
func (c *ClientWithResponses) UpdateOrderProductRelationWithResponse(ctx context.Context, id string, relationId string, params *UpdateOrderProductRelationParams, reqEditors ...RequestEditorFn) (*UpdateOrderProductRelationResponse, error) {
	rsp, err := c.UpdateOrderProductRelation(ctx, id, relationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderProductRelationResponse(rsp)
}

// DeleteProductConnectionWithResponse request returning *DeleteProductConnectionResponse
func (c *ClientWithResponses) DeleteProductConnectionWithResponse(ctx context.Context, id string, relationId string, connectedProductId string, reqEditors ...RequestEditorFn) (*DeleteProductConnectionResponse, error) {
	rsp, err := c.DeleteProductConnection(ctx, id, relationId, connectedProductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductConnectionResponse(rsp)
}

// UpdateOrderProductConnectionsWithResponse request returning *UpdateOrderProductConnectionsResponse
func (c *ClientWithResponses) UpdateOrderProductConnectionsWithResponse(ctx context.Context, id string, relationId string, connectedProductId string, params *UpdateOrderProductConnectionsParams, reqEditors ...RequestEditorFn) (*UpdateOrderProductConnectionsResponse, error) {
	rsp, err := c.UpdateOrderProductConnections(ctx, id, relationId, connectedProductId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderProductConnectionsResponse(rsp)
}

// UpdateConnectionQuantityWithBodyWithResponse request with arbitrary body returning *UpdateConnectionQuantityResponse
func (c *ClientWithResponses) UpdateConnectionQuantityWithBodyWithResponse(ctx context.Context, id string, rightProductId string, relationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionQuantityResponse, error) {
	rsp, err := c.UpdateConnectionQuantityWithBody(ctx, id, rightProductId, relationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionQuantityResponse(rsp)
}

func (c *ClientWithResponses) UpdateConnectionQuantityWithResponse(ctx context.Context, id string, rightProductId string, relationId string, body UpdateConnectionQuantityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionQuantityResponse, error) {
	rsp, err := c.UpdateConnectionQuantity(ctx, id, rightProductId, relationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionQuantityResponse(rsp)
}

// CopyProductWithResponse request returning *CopyProductResponse
func (c *ClientWithResponses) CopyProductWithResponse(ctx context.Context, id string, params *CopyProductParams, reqEditors ...RequestEditorFn) (*CopyProductResponse, error) {
	rsp, err := c.CopyProduct(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCopyProductResponse(rsp)
}

// FindProductViewsByIdWithBodyWithResponse request with arbitrary body returning *FindProductViewsByIdResponse
func (c *ClientWithResponses) FindProductViewsByIdWithBodyWithResponse(ctx context.Context, id string, params *FindProductViewsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindProductViewsByIdResponse, error) {
	rsp, err := c.FindProductViewsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindProductViewsByIdResponse(rsp)
}

func (c *ClientWithResponses) FindProductViewsByIdWithResponse(ctx context.Context, id string, params *FindProductViewsByIdParams, body FindProductViewsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*FindProductViewsByIdResponse, error) {
	rsp, err := c.FindProductViewsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindProductViewsByIdResponse(rsp)
}

// GetGroupedProductAttributesWithResponse request returning *GetGroupedProductAttributesResponse
func (c *ClientWithResponses) GetGroupedProductAttributesWithResponse(ctx context.Context, id string, params *GetGroupedProductAttributesParams, reqEditors ...RequestEditorFn) (*GetGroupedProductAttributesResponse, error) {
	rsp, err := c.GetGroupedProductAttributes(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupedProductAttributesResponse(rsp)
}

// GetProductsLabelsWithResponse request returning *GetProductsLabelsResponse
func (c *ClientWithResponses) GetProductsLabelsWithResponse(ctx context.Context, id string, params *GetProductsLabelsParams, reqEditors ...RequestEditorFn) (*GetProductsLabelsResponse, error) {
	rsp, err := c.GetProductsLabels(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsLabelsResponse(rsp)
}

// AddLabelsToProductWithBodyWithResponse request with arbitrary body returning *AddLabelsToProductResponse
func (c *ClientWithResponses) AddLabelsToProductWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddLabelsToProductResponse, error) {
	rsp, err := c.AddLabelsToProductWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddLabelsToProductResponse(rsp)
}

func (c *ClientWithResponses) AddLabelsToProductWithResponse(ctx context.Context, id string, body AddLabelsToProductJSONRequestBody, reqEditors ...RequestEditorFn) (*AddLabelsToProductResponse, error) {
	rsp, err := c.AddLabelsToProduct(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddLabelsToProductResponse(rsp)
}

// RemoveLabelFromProductWithResponse request returning *RemoveLabelFromProductResponse
func (c *ClientWithResponses) RemoveLabelFromProductWithResponse(ctx context.Context, id string, labelId string, reqEditors ...RequestEditorFn) (*RemoveLabelFromProductResponse, error) {
	rsp, err := c.RemoveLabelFromProduct(ctx, id, labelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveLabelFromProductResponse(rsp)
}

// SetProductGroupWithResponse request returning *SetProductGroupResponse
func (c *ClientWithResponses) SetProductGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SetProductGroupResponse, error) {
	rsp, err := c.SetProductGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetProductGroupResponse(rsp)
}

// GetProductVariantAttributeWithResponse request returning *GetProductVariantAttributeResponse
func (c *ClientWithResponses) GetProductVariantAttributeWithResponse(ctx context.Context, id string, definitionId string, reqEditors ...RequestEditorFn) (*GetProductVariantAttributeResponse, error) {
	rsp, err := c.GetProductVariantAttribute(ctx, id, definitionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductVariantAttributeResponse(rsp)
}

// UpdateProductVariantAttributeWithBodyWithResponse request with arbitrary body returning *UpdateProductVariantAttributeResponse
func (c *ClientWithResponses) UpdateProductVariantAttributeWithBodyWithResponse(ctx context.Context, id string, definitionId string, params *UpdateProductVariantAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductVariantAttributeResponse, error) {
	rsp, err := c.UpdateProductVariantAttributeWithBody(ctx, id, definitionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductVariantAttributeResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductVariantAttributeWithResponse(ctx context.Context, id string, definitionId string, params *UpdateProductVariantAttributeParams, body UpdateProductVariantAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductVariantAttributeResponse, error) {
	rsp, err := c.UpdateProductVariantAttribute(ctx, id, definitionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductVariantAttributeResponse(rsp)
}

// UnassignProductVariantWithResponse request returning *UnassignProductVariantResponse
func (c *ClientWithResponses) UnassignProductVariantWithResponse(ctx context.Context, id string, variantProductId string, reqEditors ...RequestEditorFn) (*UnassignProductVariantResponse, error) {
	rsp, err := c.UnassignProductVariant(ctx, id, variantProductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnassignProductVariantResponse(rsp)
}

// AddProductVariantWithResponse request returning *AddProductVariantResponse
func (c *ClientWithResponses) AddProductVariantWithResponse(ctx context.Context, id string, variantProductId string, reqEditors ...RequestEditorFn) (*AddProductVariantResponse, error) {
	rsp, err := c.AddProductVariant(ctx, id, variantProductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddProductVariantResponse(rsp)
}

// MoveProductVariantWithResponse request returning *MoveProductVariantResponse
func (c *ClientWithResponses) MoveProductVariantWithResponse(ctx context.Context, id string, variantProductId string, params *MoveProductVariantParams, reqEditors ...RequestEditorFn) (*MoveProductVariantResponse, error) {
	rsp, err := c.MoveProductVariant(ctx, id, variantProductId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveProductVariantResponse(rsp)
}

// ChangeStatusWithResponse request returning *ChangeStatusResponse
func (c *ClientWithResponses) ChangeStatusWithResponse(ctx context.Context, id string, action ChangeStatusParamsAction, params *ChangeStatusParams, reqEditors ...RequestEditorFn) (*ChangeStatusResponse, error) {
	rsp, err := c.ChangeStatus(ctx, id, action, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeStatusResponse(rsp)
}

// FindRelationsWithResponse request returning *FindRelationsResponse
func (c *ClientWithResponses) FindRelationsWithResponse(ctx context.Context, params *FindRelationsParams, reqEditors ...RequestEditorFn) (*FindRelationsResponse, error) {
	rsp, err := c.FindRelations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindRelationsResponse(rsp)
}

// CreateRelationWithBodyWithResponse request with arbitrary body returning *CreateRelationResponse
func (c *ClientWithResponses) CreateRelationWithBodyWithResponse(ctx context.Context, params *CreateRelationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRelationResponse, error) {
	rsp, err := c.CreateRelationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRelationResponse(rsp)
}

func (c *ClientWithResponses) CreateRelationWithResponse(ctx context.Context, params *CreateRelationParams, body CreateRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRelationResponse, error) {
	rsp, err := c.CreateRelation(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRelationResponse(rsp)
}

// GetFilteredRelationsWithBodyWithResponse request with arbitrary body returning *GetFilteredRelationsResponse
func (c *ClientWithResponses) GetFilteredRelationsWithBodyWithResponse(ctx context.Context, params *GetFilteredRelationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetFilteredRelationsResponse, error) {
	rsp, err := c.GetFilteredRelationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilteredRelationsResponse(rsp)
}

func (c *ClientWithResponses) GetFilteredRelationsWithResponse(ctx context.Context, params *GetFilteredRelationsParams, body GetFilteredRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetFilteredRelationsResponse, error) {
	rsp, err := c.GetFilteredRelations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilteredRelationsResponse(rsp)
}

// DeleteWithResponse request returning *DeleteResponse
func (c *ClientWithResponses) DeleteWithResponse(ctx context.Context, id string, params *DeleteParams, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.Delete(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResponse(rsp)
}

// FindOneWithResponse request returning *FindOneResponse
func (c *ClientWithResponses) FindOneWithResponse(ctx context.Context, id string, params *FindOneParams, reqEditors ...RequestEditorFn) (*FindOneResponse, error) {
	rsp, err := c.FindOne(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindOneResponse(rsp)
}

// UpdateRelationWithBodyWithResponse request with arbitrary body returning *UpdateRelationResponse
func (c *ClientWithResponses) UpdateRelationWithBodyWithResponse(ctx context.Context, id string, params *UpdateRelationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRelationResponse, error) {
	rsp, err := c.UpdateRelationWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRelationResponse(rsp)
}

func (c *ClientWithResponses) UpdateRelationWithResponse(ctx context.Context, id string, params *UpdateRelationParams, body UpdateRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRelationResponse, error) {
	rsp, err := c.UpdateRelation(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRelationResponse(rsp)
}

// GetCategoryConnectionsByRelationIdWithResponse request returning *GetCategoryConnectionsByRelationIdResponse
func (c *ClientWithResponses) GetCategoryConnectionsByRelationIdWithResponse(ctx context.Context, id string, params *GetCategoryConnectionsByRelationIdParams, reqEditors ...RequestEditorFn) (*GetCategoryConnectionsByRelationIdResponse, error) {
	rsp, err := c.GetCategoryConnectionsByRelationId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryConnectionsByRelationIdResponse(rsp)
}

// UpdateOrderRelationWithResponse request returning *UpdateOrderRelationResponse
func (c *ClientWithResponses) UpdateOrderRelationWithResponse(ctx context.Context, id string, params *UpdateOrderRelationParams, reqEditors ...RequestEditorFn) (*UpdateOrderRelationResponse, error) {
	rsp, err := c.UpdateOrderRelation(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderRelationResponse(rsp)
}

// GetByRelationIdWithResponse request returning *GetByRelationIdResponse
func (c *ClientWithResponses) GetByRelationIdWithResponse(ctx context.Context, id string, params *GetByRelationIdParams, reqEditors ...RequestEditorFn) (*GetByRelationIdResponse, error) {
	rsp, err := c.GetByRelationId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetByRelationIdResponse(rsp)
}

// AddPolicyToRelationWithBodyWithResponse request with arbitrary body returning *AddPolicyToRelationResponse
func (c *ClientWithResponses) AddPolicyToRelationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPolicyToRelationResponse, error) {
	rsp, err := c.AddPolicyToRelationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToRelationResponse(rsp)
}

func (c *ClientWithResponses) AddPolicyToRelationWithResponse(ctx context.Context, id string, body AddPolicyToRelationJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPolicyToRelationResponse, error) {
	rsp, err := c.AddPolicyToRelation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPolicyToRelationResponse(rsp)
}

// DeletePolicyForRelationWithResponse request returning *DeletePolicyForRelationResponse
func (c *ClientWithResponses) DeletePolicyForRelationWithResponse(ctx context.Context, id string, policyId string, policyType DeletePolicyForRelationParamsPolicyType, reqEditors ...RequestEditorFn) (*DeletePolicyForRelationResponse, error) {
	rsp, err := c.DeletePolicyForRelation(ctx, id, policyId, policyType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyForRelationResponse(rsp)
}

// GetProductConnectionsByRelationIdWithResponse request returning *GetProductConnectionsByRelationIdResponse
func (c *ClientWithResponses) GetProductConnectionsByRelationIdWithResponse(ctx context.Context, id string, params *GetProductConnectionsByRelationIdParams, reqEditors ...RequestEditorFn) (*GetProductConnectionsByRelationIdResponse, error) {
	rsp, err := c.GetProductConnectionsByRelationId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductConnectionsByRelationIdResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ValidateAttributeWithBodyWithResponse request with arbitrary body returning *ValidateAttributeResponse
func (c *ClientWithResponses) ValidateAttributeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateAttributeResponse, error) {
	rsp, err := c.ValidateAttributeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateAttributeResponse(rsp)
}

func (c *ClientWithResponses) ValidateAttributeWithResponse(ctx context.Context, body ValidateAttributeJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateAttributeResponse, error) {
	rsp, err := c.ValidateAttribute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateAttributeResponse(rsp)
}

// ValidateProductsWithBodyWithResponse request with arbitrary body returning *ValidateProductsResponse
func (c *ClientWithResponses) ValidateProductsWithBodyWithResponse(ctx context.Context, params *ValidateProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateProductsResponse, error) {
	rsp, err := c.ValidateProductsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateProductsResponse(rsp)
}

func (c *ClientWithResponses) ValidateProductsWithResponse(ctx context.Context, params *ValidateProductsParams, body ValidateProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateProductsResponse, error) {
	rsp, err := c.ValidateProducts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateProductsResponse(rsp)
}

// ValidateValueWithBodyWithResponse request with arbitrary body returning *ValidateValueResponse
func (c *ClientWithResponses) ValidateValueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateValueResponse, error) {
	rsp, err := c.ValidateValueWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateValueResponse(rsp)
}

func (c *ClientWithResponses) ValidateValueWithResponse(ctx context.Context, body ValidateValueJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateValueResponse, error) {
	rsp, err := c.ValidateValue(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateValueResponse(rsp)
}

// ParseSynchronizeAssetsResponse parses an HTTP response from a SynchronizeAssetsWithResponse call
func ParseSynchronizeAssetsResponse(rsp *http.Response) (*SynchronizeAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SynchronizeAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetJobStatusResponse parses an HTTP response from a GetJobStatusWithResponse call
func ParseGetJobStatusResponse(rsp *http.Response) (*GetJobStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindAttributeGroupsResponse parses an HTTP response from a FindAttributeGroupsWithResponse call
func ParseFindAttributeGroupsResponse(rsp *http.Response) (*FindAttributeGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindAttributeGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableAttributeGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateAttributeGroupResponse parses an HTTP response from a CreateAttributeGroupWithResponse call
func ParseCreateAttributeGroupResponse(rsp *http.Response) (*CreateAttributeGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAttributeGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindDefinitionsWithoutGroupResponse parses an HTTP response from a FindDefinitionsWithoutGroupWithResponse call
func ParseFindDefinitionsWithoutGroupResponse(rsp *http.Response) (*FindDefinitionsWithoutGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindDefinitionsWithoutGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetOtherDefinitionsOrderStrategyResponse parses an HTTP response from a SetOtherDefinitionsOrderStrategyWithResponse call
func ParseSetOtherDefinitionsOrderStrategyResponse(rsp *http.Response) (*SetOtherDefinitionsOrderStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetOtherDefinitionsOrderStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMoveAttributeDefinitionInGroupResponse parses an HTTP response from a MoveAttributeDefinitionInGroupWithResponse call
func ParseMoveAttributeDefinitionInGroupResponse(rsp *http.Response) (*MoveAttributeDefinitionInGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveAttributeDefinitionInGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAttributeRootGroupResponse parses an HTTP response from a GetAttributeRootGroupWithResponse call
func ParseGetAttributeRootGroupResponse(rsp *http.Response) (*GetAttributeRootGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttributeRootGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteAttributeGroupResponse parses an HTTP response from a DeleteAttributeGroupWithResponse call
func ParseDeleteAttributeGroupResponse(rsp *http.Response) (*DeleteAttributeGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttributeGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMoveGroupResponse parses an HTTP response from a MoveGroupWithResponse call
func ParseMoveGroupResponse(rsp *http.Response) (*MoveGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindDefinitionsInGroupResponse parses an HTTP response from a FindDefinitionsInGroupWithResponse call
func ParseFindDefinitionsInGroupResponse(rsp *http.Response) (*FindDefinitionsInGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindDefinitionsInGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetDefinitionsOrderStrategyInGroupResponse parses an HTTP response from a SetDefinitionsOrderStrategyInGroupWithResponse call
func ParseSetDefinitionsOrderStrategyInGroupResponse(rsp *http.Response) (*SetDefinitionsOrderStrategyInGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDefinitionsOrderStrategyInGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMoveAttributeDefinitionResponse parses an HTTP response from a MoveAttributeDefinitionWithResponse call
func ParseMoveAttributeDefinitionResponse(rsp *http.Response) (*MoveAttributeDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveAttributeDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRenameResponse parses an HTTP response from a RenameWithResponse call
func ParseRenameResponse(rsp *http.Response) (*RenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateNumberResponse parses an HTTP response from a UpdateNumberWithResponse call
func ParseUpdateNumberResponse(rsp *http.Response) (*UpdateNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListCatalogsResponse parses an HTTP response from a ListCatalogsWithResponse call
func ParseListCatalogsResponse(rsp *http.Response) (*ListCatalogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCatalogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryBasicResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateCategoryResponse parses an HTTP response from a CreateCategoryWithResponse call
func ParseCreateCategoryResponse(rsp *http.Response) (*CreateCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetCategoriesByAssetIdResponse parses an HTTP response from a GetCategoriesByAssetIdWithResponse call
func ParseGetCategoriesByAssetIdResponse(rsp *http.Response) (*GetCategoriesByAssetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesByAssetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryBasicResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindByCategoryLevelAttributesResponse parses an HTTP response from a FindByCategoryLevelAttributesWithResponse call
func ParseFindByCategoryLevelAttributesResponse(rsp *http.Response) (*FindByCategoryLevelAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindByCategoryLevelAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryBasicResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListResponse parses an HTTP response from a ListWithResponse call
func ParseListResponse(rsp *http.Response) (*ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryAttributeBaseMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetFilteredNodesResponse parses an HTTP response from a GetFilteredNodesWithResponse call
func ParseGetFilteredNodesResponse(rsp *http.Response) (*GetFilteredNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilteredNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryBasicResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteCategoryNodeResponse parses an HTTP response from a DeleteCategoryNodeWithResponse call
func ParseDeleteCategoryNodeResponse(rsp *http.Response) (*DeleteCategoryNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCategoryNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetNodeResponse parses an HTTP response from a GetNodeWithResponse call
func ParseGetNodeResponse(rsp *http.Response) (*GetNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryBasicResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCatalogNodeResponse parses an HTTP response from a UpdateCatalogNodeWithResponse call
func ParseUpdateCatalogNodeResponse(rsp *http.Response) (*UpdateCatalogNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetCategoryAssetsResponse parses an HTTP response from a GetCategoryAssetsWithResponse call
func ParseGetCategoryAssetsResponse(rsp *http.Response) (*GetCategoryAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDisassociateAssetFromCategoryResponse parses an HTTP response from a DisassociateAssetFromCategoryWithResponse call
func ParseDisassociateAssetFromCategoryResponse(rsp *http.Response) (*DisassociateAssetFromCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisassociateAssetFromCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAssociateAssetWithCategoryResponse parses an HTTP response from a AssociateAssetWithCategoryWithResponse call
func ParseAssociateAssetWithCategoryResponse(rsp *http.Response) (*AssociateAssetWithCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssociateAssetWithCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMoveCategoryAssetResponse parses an HTTP response from a MoveCategoryAssetWithResponse call
func ParseMoveCategoryAssetResponse(rsp *http.Response) (*MoveCategoryAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveCategoryAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListAttributesAttachedToGivenNodeResponse parses an HTTP response from a ListAttributesAttachedToGivenNodeWithResponse call
func ParseListAttributesAttachedToGivenNodeResponse(rsp *http.Response) (*ListAttributesAttachedToGivenNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAttributesAttachedToGivenNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryAttributeMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteAttributeFromNodeResponse parses an HTTP response from a DeleteAttributeFromNodeWithResponse call
func ParseDeleteAttributeFromNodeResponse(rsp *http.Response) (*DeleteAttributeFromNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttributeFromNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateNodeAttributeValueResponse parses an HTTP response from a UpdateNodeAttributeValueWithResponse call
func ParseUpdateNodeAttributeValueResponse(rsp *http.Response) (*UpdateNodeAttributeValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNodeAttributeValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateCatalogNodeAttributeResponse parses an HTTP response from a CreateCatalogNodeAttributeWithResponse call
func ParseCreateCatalogNodeAttributeResponse(rsp *http.Response) (*CreateCatalogNodeAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogNodeAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCreateCatalogNodeAttributeColumnResponse parses an HTTP response from a CreateCatalogNodeAttributeColumnWithResponse call
func ParseCreateCatalogNodeAttributeColumnResponse(rsp *http.Response) (*CreateCatalogNodeAttributeColumnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogNodeAttributeColumnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUpdateNodeAttributeColumnValueResponse parses an HTTP response from a UpdateNodeAttributeColumnValueWithResponse call
func ParseUpdateNodeAttributeColumnValueResponse(rsp *http.Response) (*UpdateNodeAttributeColumnValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNodeAttributeColumnValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateCatalogNodeAttributeCompoundResponse parses an HTTP response from a CreateCatalogNodeAttributeCompoundWithResponse call
func ParseCreateCatalogNodeAttributeCompoundResponse(rsp *http.Response) (*CreateCatalogNodeAttributeCompoundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogNodeAttributeCompoundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCreateCatalogNodeAttributeDictionaryResponse parses an HTTP response from a CreateCatalogNodeAttributeDictionaryWithResponse call
func ParseCreateCatalogNodeAttributeDictionaryResponse(rsp *http.Response) (*CreateCatalogNodeAttributeDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogNodeAttributeDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseSetDictionaryAttributeValuesForCategoryResponse parses an HTTP response from a SetDictionaryAttributeValuesForCategoryWithResponse call
func ParseSetDictionaryAttributeValuesForCategoryResponse(rsp *http.Response) (*SetDictionaryAttributeValuesForCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDictionaryAttributeValuesForCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateCatalogNodeAttributeMatrixResponse parses an HTTP response from a CreateCatalogNodeAttributeMatrixWithResponse call
func ParseCreateCatalogNodeAttributeMatrixResponse(rsp *http.Response) (*CreateCatalogNodeAttributeMatrixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCatalogNodeAttributeMatrixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUpdateNodeAttributeMatrixValueResponse parses an HTTP response from a UpdateNodeAttributeMatrixValueWithResponse call
func ParseUpdateNodeAttributeMatrixValueResponse(rsp *http.Response) (*UpdateNodeAttributeMatrixValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNodeAttributeMatrixValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCatalogNodeChildrenResponse parses an HTTP response from a GetCatalogNodeChildrenWithResponse call
func ParseGetCatalogNodeChildrenResponse(rsp *http.Response) (*GetCatalogNodeChildrenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogNodeChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryBasicResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMoveCatalogNodeResponse parses an HTTP response from a MoveCatalogNodeWithResponse call
func ParseMoveCatalogNodeResponse(rsp *http.Response) (*MoveCatalogNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveCatalogNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCatalogNodeOrderResponse parses an HTTP response from a UpdateCatalogNodeOrderWithResponse call
func ParseUpdateCatalogNodeOrderResponse(rsp *http.Response) (*UpdateCatalogNodeOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCatalogNodeOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPathToNodeResponse parses an HTTP response from a GetPathToNodeWithResponse call
func ParseGetPathToNodeResponse(rsp *http.Response) (*GetPathToNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPathToNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetByCategoryNodeIdResponse parses an HTTP response from a GetByCategoryNodeIdWithResponse call
func ParseGetByCategoryNodeIdResponse(rsp *http.Response) (*GetByCategoryNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetByCategoryNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListablePolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddPolicyToCategoryNodeResponse parses an HTTP response from a AddPolicyToCategoryNodeWithResponse call
func ParseAddPolicyToCategoryNodeResponse(rsp *http.Response) (*AddPolicyToCategoryNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPolicyToCategoryNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePolicyByCategoryNodeAndPolicyIdResponse parses an HTTP response from a DeletePolicyByCategoryNodeAndPolicyIdWithResponse call
func ParseDeletePolicyByCategoryNodeAndPolicyIdResponse(rsp *http.Response) (*DeletePolicyByCategoryNodeAndPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyByCategoryNodeAndPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCategoryProductsResponse parses an HTTP response from a GetCategoryProductsWithResponse call
func ParseGetCategoryProductsResponse(rsp *http.Response) (*GetCategoryProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddCategoryProductsResponse parses an HTTP response from a AddCategoryProductsWithResponse call
func ParseAddCategoryProductsResponse(rsp *http.Response) (*AddCategoryProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCategoryProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPolicyByCategoryNodeIdResponse parses an HTTP response from a GetPolicyByCategoryNodeIdWithResponse call
func ParseGetPolicyByCategoryNodeIdResponse(rsp *http.Response) (*GetPolicyByCategoryNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyByCategoryNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListablePolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddPolicyToProductsForCategoryNodeIdResponse parses an HTTP response from a AddPolicyToProductsForCategoryNodeIdWithResponse call
func ParseAddPolicyToProductsForCategoryNodeIdResponse(rsp *http.Response) (*AddPolicyToProductsForCategoryNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPolicyToProductsForCategoryNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeletePolicyFromProductsForCategoryNodeIdResponse parses an HTTP response from a DeletePolicyFromProductsForCategoryNodeIdWithResponse call
func ParseDeletePolicyFromProductsForCategoryNodeIdResponse(rsp *http.Response) (*DeletePolicyFromProductsForCategoryNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyFromProductsForCategoryNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteCategoryProductsResponse parses an HTTP response from a DeleteCategoryProductsWithResponse call
func ParseDeleteCategoryProductsResponse(rsp *http.Response) (*DeleteCategoryProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCategoryProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseArchiveResponse parses an HTTP response from a ArchiveWithResponse call
func ParseArchiveResponse(rsp *http.Response) (*ArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUnarchiveResponse parses an HTTP response from a UnarchiveWithResponse call
func ParseUnarchiveResponse(rsp *http.Response) (*UnarchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnarchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCategoryTreeResponse parses an HTTP response from a GetCategoryTreeWithResponse call
func ParseGetCategoryTreeResponse(rsp *http.Response) (*GetCategoryTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryWithChildrenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPoliciesByCategoryIdResponse parses an HTTP response from a GetPoliciesByCategoryIdWithResponse call
func ParseGetPoliciesByCategoryIdResponse(rsp *http.Response) (*GetPoliciesByCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPoliciesByCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListablePolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddPolicyToCategoryResponse parses an HTTP response from a AddPolicyToCategoryWithResponse call
func ParseAddPolicyToCategoryResponse(rsp *http.Response) (*AddPolicyToCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPolicyToCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePolicyByCategoryAndPolicyIdResponse parses an HTTP response from a DeletePolicyByCategoryAndPolicyIdWithResponse call
func ParseDeletePolicyByCategoryAndPolicyIdResponse(rsp *http.Response) (*DeletePolicyByCategoryAndPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyByCategoryAndPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPolicyByCategoryIdResponse parses an HTTP response from a GetPolicyByCategoryIdWithResponse call
func ParseGetPolicyByCategoryIdResponse(rsp *http.Response) (*GetPolicyByCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyByCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListablePolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddPolicyToProductsForCategoryIdResponse parses an HTTP response from a AddPolicyToProductsForCategoryIdWithResponse call
func ParseAddPolicyToProductsForCategoryIdResponse(rsp *http.Response) (*AddPolicyToProductsForCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPolicyToProductsForCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeletePolicyFromProductsForCategoryIdResponse parses an HTTP response from a DeletePolicyFromProductsForCategoryIdWithResponse call
func ParseDeletePolicyFromProductsForCategoryIdResponse(rsp *http.Response) (*DeletePolicyFromProductsForCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyFromProductsForCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindAllCompoundDefinitionsResponse parses an HTTP response from a FindAllCompoundDefinitionsWithResponse call
func ParseFindAllCompoundDefinitionsResponse(rsp *http.Response) (*FindAllCompoundDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindAllCompoundDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCompoundAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateCompoundDefinitionResponse parses an HTTP response from a CreateCompoundDefinitionWithResponse call
func ParseCreateCompoundDefinitionResponse(rsp *http.Response) (*CreateCompoundDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCompoundDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseFindBySubDefinitionsResponse parses an HTTP response from a FindBySubDefinitionsWithResponse call
func ParseFindBySubDefinitionsResponse(rsp *http.Response) (*FindBySubDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindBySubDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCompoundAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteCompoundDefinitionResponse parses an HTTP response from a DeleteCompoundDefinitionWithResponse call
func ParseDeleteCompoundDefinitionResponse(rsp *http.Response) (*DeleteCompoundDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCompoundDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCompoundDefinitionResponse parses an HTTP response from a GetCompoundDefinitionWithResponse call
func ParseGetCompoundDefinitionResponse(rsp *http.Response) (*GetCompoundDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompoundDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompoundAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateCompoundDefinitionResponse parses an HTTP response from a UpdateCompoundDefinitionWithResponse call
func ParseUpdateCompoundDefinitionResponse(rsp *http.Response) (*UpdateCompoundDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCompoundDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseFindAllAttributeDefinitionsResponse parses an HTTP response from a FindAllAttributeDefinitionsWithResponse call
func ParseFindAllAttributeDefinitionsResponse(rsp *http.Response) (*FindAllAttributeDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindAllAttributeDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateAttributeDefinitionResponse parses an HTTP response from a CreateAttributeDefinitionWithResponse call
func ParseCreateAttributeDefinitionResponse(rsp *http.Response) (*CreateAttributeDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAttributeDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCreateColumnDefinitionResponse parses an HTTP response from a CreateColumnDefinitionWithResponse call
func ParseCreateColumnDefinitionResponse(rsp *http.Response) (*CreateColumnDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateColumnDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateColumnDefinitionResponse parses an HTTP response from a UpdateColumnDefinitionWithResponse call
func ParseUpdateColumnDefinitionResponse(rsp *http.Response) (*UpdateColumnDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateColumnDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeDefinitionUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateColumnDefinitionDryRunResponse parses an HTTP response from a UpdateColumnDefinitionDryRunWithResponse call
func ParseUpdateColumnDefinitionDryRunResponse(rsp *http.Response) (*UpdateColumnDefinitionDryRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateColumnDefinitionDryRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeDefinitionUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateDictionaryDefinitionResponse parses an HTTP response from a CreateDictionaryDefinitionWithResponse call
func ParseCreateDictionaryDefinitionResponse(rsp *http.Response) (*CreateDictionaryDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDictionaryDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteDictionaryDefinitionResponse parses an HTTP response from a DeleteDictionaryDefinitionWithResponse call
func ParseDeleteDictionaryDefinitionResponse(rsp *http.Response) (*DeleteDictionaryDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDictionaryDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePatchUpdateResponse parses an HTTP response from a PatchUpdateWithResponse call
func ParsePatchUpdateResponse(rsp *http.Response) (*PatchUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateDictionaryDefinitionResponse parses an HTTP response from a UpdateDictionaryDefinitionWithResponse call
func ParseUpdateDictionaryDefinitionResponse(rsp *http.Response) (*UpdateDictionaryDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDictionaryDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteDictionaryParentResponse parses an HTTP response from a DeleteDictionaryParentWithResponse call
func ParseDeleteDictionaryParentResponse(rsp *http.Response) (*DeleteDictionaryParentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDictionaryParentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetDictionaryParentResponse parses an HTTP response from a SetDictionaryParentWithResponse call
func ParseSetDictionaryParentResponse(rsp *http.Response) (*SetDictionaryParentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDictionaryParentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateDictionaryAttributeResponse parses an HTTP response from a CreateDictionaryAttributeWithResponse call
func ParseCreateDictionaryAttributeResponse(rsp *http.Response) (*CreateDictionaryAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDictionaryAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCountDictionaryAttributesResponse parses an HTTP response from a CountDictionaryAttributesWithResponse call
func ParseCountDictionaryAttributesResponse(rsp *http.Response) (*CountDictionaryAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CountDictionaryAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CountableLong
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFindFilteredDictionaryAttributesResponse parses an HTTP response from a FindFilteredDictionaryAttributesWithResponse call
func ParseFindFilteredDictionaryAttributesResponse(rsp *http.Response) (*FindFilteredDictionaryAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindFilteredDictionaryAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableDictionaryValueFilterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindFilteredDictionaryDefinitionsResponse parses an HTTP response from a FindFilteredDictionaryDefinitionsWithResponse call
func ParseFindFilteredDictionaryDefinitionsResponse(rsp *http.Response) (*FindFilteredDictionaryDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindFilteredDictionaryDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableDictionaryAttributeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteDictionaryAttributeResponse parses an HTTP response from a DeleteDictionaryAttributeWithResponse call
func ParseDeleteDictionaryAttributeResponse(rsp *http.Response) (*DeleteDictionaryAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDictionaryAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDictionaryAttributeResponse parses an HTTP response from a GetDictionaryAttributeWithResponse call
func ParseGetDictionaryAttributeResponse(rsp *http.Response) (*GetDictionaryAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDictionaryAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DictionaryAttributeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateDictionaryAttributeResponse parses an HTTP response from a UpdateDictionaryAttributeWithResponse call
func ParseUpdateDictionaryAttributeResponse(rsp *http.Response) (*UpdateDictionaryAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDictionaryAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteDictionaryFilterResponse parses an HTTP response from a DeleteDictionaryFilterWithResponse call
func ParseDeleteDictionaryFilterResponse(rsp *http.Response) (*DeleteDictionaryFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDictionaryFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateDictionaryValueFilterResponse parses an HTTP response from a CreateDictionaryValueFilterWithResponse call
func ParseCreateDictionaryValueFilterResponse(rsp *http.Response) (*CreateDictionaryValueFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDictionaryValueFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseFindFilteredAttributeDefinitionsResponse parses an HTTP response from a FindFilteredAttributeDefinitionsWithResponse call
func ParseFindFilteredAttributeDefinitionsResponse(rsp *http.Response) (*FindFilteredAttributeDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindFilteredAttributeDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateMatrixDefinitionResponse parses an HTTP response from a CreateMatrixDefinitionWithResponse call
func ParseCreateMatrixDefinitionResponse(rsp *http.Response) (*CreateMatrixDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMatrixDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUpdateMatrixDefinitionResponse parses an HTTP response from a UpdateMatrixDefinitionWithResponse call
func ParseUpdateMatrixDefinitionResponse(rsp *http.Response) (*UpdateMatrixDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMatrixDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeDefinitionUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateMatrixDefinitionDryRunResponse parses an HTTP response from a UpdateMatrixDefinitionDryRunWithResponse call
func ParseUpdateMatrixDefinitionDryRunResponse(rsp *http.Response) (*UpdateMatrixDefinitionDryRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMatrixDefinitionDryRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeDefinitionUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFindSimpleResponse parses an HTTP response from a FindSimpleWithResponse call
func ParseFindSimpleResponse(rsp *http.Response) (*FindSimpleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindSimpleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteAttributeDefinitionResponse parses an HTTP response from a DeleteAttributeDefinitionWithResponse call
func ParseDeleteAttributeDefinitionResponse(rsp *http.Response) (*DeleteAttributeDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttributeDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAttributeDefinitionResponse parses an HTTP response from a GetAttributeDefinitionWithResponse call
func ParseGetAttributeDefinitionResponse(rsp *http.Response) (*GetAttributeDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttributeDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateMetadataResponse parses an HTTP response from a UpdateMetadataWithResponse call
func ParseUpdateMetadataResponse(rsp *http.Response) (*UpdateMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUpdateAttributeDefinitionResponse parses an HTTP response from a UpdateAttributeDefinitionWithResponse call
func ParseUpdateAttributeDefinitionResponse(rsp *http.Response) (*UpdateAttributeDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAttributeDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeDefinitionUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteDryRunResponse parses an HTTP response from a DeleteDryRunWithResponse call
func ParseDeleteDryRunResponse(rsp *http.Response) (*DeleteDryRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDryRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeDefinitionDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateAttributeDefinitionDryRunResponse parses an HTTP response from a UpdateAttributeDefinitionDryRunWithResponse call
func ParseUpdateAttributeDefinitionDryRunResponse(rsp *http.Response) (*UpdateAttributeDefinitionDryRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAttributeDefinitionDryRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeDefinitionUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetByDefinitionIdResponse parses an HTTP response from a GetByDefinitionIdWithResponse call
func ParseGetByDefinitionIdResponse(rsp *http.Response) (*GetByDefinitionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetByDefinitionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListablePolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddPolicyToAttributeDefinitionResponse parses an HTTP response from a AddPolicyToAttributeDefinitionWithResponse call
func ParseAddPolicyToAttributeDefinitionResponse(rsp *http.Response) (*AddPolicyToAttributeDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPolicyToAttributeDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeletePolicyForAttributeDefinitionResponse parses an HTTP response from a DeletePolicyForAttributeDefinitionWithResponse call
func ParseDeletePolicyForAttributeDefinitionResponse(rsp *http.Response) (*DeletePolicyForAttributeDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyForAttributeDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFindProductsResponse parses an HTTP response from a FindProductsWithResponse call
func ParseFindProductsResponse(rsp *http.Response) (*FindProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableProductWithAttributeValuesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCategoriesByPolicyIdResponse parses an HTTP response from a GetCategoriesByPolicyIdWithResponse call
func ParseGetCategoriesByPolicyIdResponse(rsp *http.Response) (*GetCategoriesByPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesByPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryFullResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCategoriesNodeByPolicyIdResponse parses an HTTP response from a GetCategoriesNodeByPolicyIdWithResponse call
func ParseGetCategoriesNodeByPolicyIdResponse(rsp *http.Response) (*GetCategoriesNodeByPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesNodeByPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryFullResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCatalogNodeByPolicyIdResponse parses an HTTP response from a GetCatalogNodeByPolicyIdWithResponse call
func ParseGetCatalogNodeByPolicyIdResponse(rsp *http.Response) (*GetCatalogNodeByPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogNodeByPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryFullResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCatalogByPolicyIdResponse parses an HTTP response from a GetCatalogByPolicyIdWithResponse call
func ParseGetCatalogByPolicyIdResponse(rsp *http.Response) (*GetCatalogByPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCatalogByPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryFullResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAttributeDefinitionsByPolicyIdResponse parses an HTTP response from a GetAttributeDefinitionsByPolicyIdWithResponse call
func ParseGetAttributeDefinitionsByPolicyIdResponse(rsp *http.Response) (*GetAttributeDefinitionsByPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttributeDefinitionsByPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableAttributeDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRelationsByPolicyIdResponse parses an HTTP response from a GetRelationsByPolicyIdWithResponse call
func ParseGetRelationsByPolicyIdResponse(rsp *http.Response) (*GetRelationsByPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelationsByPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableRelationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/full+json" && rsp.StatusCode == 200:
		var dest ListableProductAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationfullJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest ListableProductAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateProductResponse parses an HTTP response from a CreateProductWithResponse call
func ParseCreateProductResponse(rsp *http.Response) (*CreateProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseArchiveProductsByIdsResponse parses an HTTP response from a ArchiveProductsByIdsWithResponse call
func ParseArchiveProductsByIdsResponse(rsp *http.Response) (*ArchiveProductsByIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveProductsByIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteProductsAttributeResponse parses an HTTP response from a DeleteProductsAttributeWithResponse call
func ParseDeleteProductsAttributeResponse(rsp *http.Response) (*DeleteProductsAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductsAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateResponse parses an HTTP response from a CreateOrUpdateWithResponse call
func ParseCreateOrUpdateResponse(rsp *http.Response) (*CreateOrUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddAttributesByIdsResponse parses an HTTP response from a AddAttributesByIdsWithResponse call
func ParseAddAttributesByIdsResponse(rsp *http.Response) (*AddAttributesByIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddAttributesByIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpsertAttributesByIdsResponse parses an HTTP response from a UpsertAttributesByIdsWithResponse call
func ParseUpsertAttributesByIdsResponse(rsp *http.Response) (*UpsertAttributesByIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertAttributesByIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateAttributesByIdsResponse parses an HTTP response from a UpdateAttributesByIdsWithResponse call
func ParseUpdateAttributesByIdsResponse(rsp *http.Response) (*UpdateAttributesByIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAttributesByIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAssignProductsToCategoryResponse parses an HTTP response from a AssignProductsToCategoryWithResponse call
func ParseAssignProductsToCategoryResponse(rsp *http.Response) (*AssignProductsToCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignProductsToCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCopyAndUpdateProductResponse parses an HTTP response from a CopyAndUpdateProductWithResponse call
func ParseCopyAndUpdateProductResponse(rsp *http.Response) (*CopyAndUpdateProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CopyAndUpdateProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCountFilteredProductsResponse parses an HTTP response from a CountFilteredProductsWithResponse call
func ParseCountFilteredProductsResponse(rsp *http.Response) (*CountFilteredProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CountFilteredProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CountableLong
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProductsWithCursorAndViewsResponse parses an HTTP response from a GetProductsWithCursorAndViewsWithResponse call
func ParseGetProductsWithCursorAndViewsResponse(rsp *http.Response) (*GetProductsWithCursorAndViewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsWithCursorAndViewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableWithCursorProductViewDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRemoveLabelFromProductsResponse parses an HTTP response from a RemoveLabelFromProductsWithResponse call
func ParseRemoveLabelFromProductsResponse(rsp *http.Response) (*RemoveLabelFromProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveLabelFromProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddLabelToProductsResponse parses an HTTP response from a AddLabelToProductsWithResponse call
func ParseAddLabelToProductsResponse(rsp *http.Response) (*AddLabelToProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddLabelToProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListProductsViewsByAssetsResponse parses an HTTP response from a ListProductsViewsByAssetsWithResponse call
func ParseListProductsViewsByAssetsResponse(rsp *http.Response) (*ListProductsViewsByAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProductsViewsByAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableProductViewDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListProductsViewsByIdsResponse parses an HTTP response from a ListProductsViewsByIdsWithResponse call
func ParseListProductsViewsByIdsResponse(rsp *http.Response) (*ListProductsViewsByIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProductsViewsByIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableProductViewDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListProductsViewsByNumbersResponse parses an HTTP response from a ListProductsViewsByNumbersWithResponse call
func ParseListProductsViewsByNumbersResponse(rsp *http.Response) (*ListProductsViewsByNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProductsViewsByNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableProductViewDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseChangeStatusesByIdsResponse parses an HTTP response from a ChangeStatusesByIdsWithResponse call
func ParseChangeStatusesByIdsResponse(rsp *http.Response) (*ChangeStatusesByIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeStatusesByIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdateProductStateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseFindProductTemplatesResponse parses an HTTP response from a FindProductTemplatesWithResponse call
func ParseFindProductTemplatesResponse(rsp *http.Response) (*FindProductTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindProductTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableProductTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteProductTemplateResponse parses an HTTP response from a DeleteProductTemplateWithResponse call
func ParseDeleteProductTemplateResponse(rsp *http.Response) (*DeleteProductTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProductTemplateResponse parses an HTTP response from a GetProductTemplateWithResponse call
func ParseGetProductTemplateResponse(rsp *http.Response) (*GetProductTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateProductTemplateResponse parses an HTTP response from a CreateProductTemplateWithResponse call
func ParseCreateProductTemplateResponse(rsp *http.Response) (*CreateProductTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUpdateNameResponse parses an HTTP response from a UpdateNameWithResponse call
func ParseUpdateNameResponse(rsp *http.Response) (*UpdateNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUnarchiveProductsByIdsResponse parses an HTTP response from a UnarchiveProductsByIdsWithResponse call
func ParseUnarchiveProductsByIdsResponse(rsp *http.Response) (*UnarchiveProductsByIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnarchiveProductsByIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetProductResponse parses an HTTP response from a GetProductWithResponse call
func ParseGetProductResponse(rsp *http.Response) (*GetProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/full+json" && rsp.StatusCode == 200:
		var dest ProductAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationfullJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest ProductAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateProductResponse parses an HTTP response from a UpdateProductWithResponse call
func ParseUpdateProductResponse(rsp *http.Response) (*UpdateProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUpdateProductDetailsResponse parses an HTTP response from a UpdateProductDetailsWithResponse call
func ParseUpdateProductDetailsResponse(rsp *http.Response) (*UpdateProductDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetProductAssetsResponse parses an HTTP response from a GetProductAssetsWithResponse call
func ParseGetProductAssetsResponse(rsp *http.Response) (*GetProductAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAssociateAssetsResponse parses an HTTP response from a AssociateAssetsWithResponse call
func ParseAssociateAssetsResponse(rsp *http.Response) (*AssociateAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssociateAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetProductAssetsResponse parses an HTTP response from a SetProductAssetsWithResponse call
func ParseSetProductAssetsResponse(rsp *http.Response) (*SetProductAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetProductAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDisassociateAssetFromProductResponse parses an HTTP response from a DisassociateAssetFromProductWithResponse call
func ParseDisassociateAssetFromProductResponse(rsp *http.Response) (*DisassociateAssetFromProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisassociateAssetFromProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAssociateAssetWithProductResponse parses an HTTP response from a AssociateAssetWithProductWithResponse call
func ParseAssociateAssetWithProductResponse(rsp *http.Response) (*AssociateAssetWithProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssociateAssetWithProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMoveProductAssetResponse parses an HTTP response from a MoveProductAssetWithResponse call
func ParseMoveProductAssetResponse(rsp *http.Response) (*MoveProductAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveProductAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProductAttributesResponse parses an HTTP response from a GetProductAttributesWithResponse call
func ParseGetProductAttributesResponse(rsp *http.Response) (*GetProductAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableAttributeValueAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddProductAttributeResponse parses an HTTP response from a AddProductAttributeWithResponse call
func ParseAddProductAttributeResponse(rsp *http.Response) (*AddProductAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddProductAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateProductAttributesResponse parses an HTTP response from a UpdateProductAttributesWithResponse call
func ParseUpdateProductAttributesResponse(rsp *http.Response) (*UpdateProductAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddColumnAttributeResponse parses an HTTP response from a AddColumnAttributeWithResponse call
func ParseAddColumnAttributeResponse(rsp *http.Response) (*AddColumnAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddColumnAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateColumnAttributeResponse parses an HTTP response from a UpdateColumnAttributeWithResponse call
func ParseUpdateColumnAttributeResponse(rsp *http.Response) (*UpdateColumnAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateColumnAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddDictionaryAttributeResponse parses an HTTP response from a AddDictionaryAttributeWithResponse call
func ParseAddDictionaryAttributeResponse(rsp *http.Response) (*AddDictionaryAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddDictionaryAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetDictionaryAttributeValuesForProductResponse parses an HTTP response from a SetDictionaryAttributeValuesForProductWithResponse call
func ParseSetDictionaryAttributeValuesForProductResponse(rsp *http.Response) (*SetDictionaryAttributeValuesForProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDictionaryAttributeValuesForProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddMatrixAttributeResponse parses an HTTP response from a AddMatrixAttributeWithResponse call
func ParseAddMatrixAttributeResponse(rsp *http.Response) (*AddMatrixAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMatrixAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateMatrixAttributeResponse parses an HTTP response from a UpdateMatrixAttributeWithResponse call
func ParseUpdateMatrixAttributeResponse(rsp *http.Response) (*UpdateMatrixAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMatrixAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteProductAttributeResponse parses an HTTP response from a DeleteProductAttributeWithResponse call
func ParseDeleteProductAttributeResponse(rsp *http.Response) (*DeleteProductAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateProductAttributeResponse parses an HTTP response from a UpdateProductAttributeWithResponse call
func ParseUpdateProductAttributeResponse(rsp *http.Response) (*UpdateProductAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateProductBundleResponse parses an HTTP response from a CreateProductBundleWithResponse call
func ParseCreateProductBundleResponse(rsp *http.Response) (*CreateProductBundleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductBundleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteProductFromBundleResponse parses an HTTP response from a DeleteProductFromBundleWithResponse call
func ParseDeleteProductFromBundleResponse(rsp *http.Response) (*DeleteProductFromBundleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductFromBundleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddProductToBundleResponse parses an HTTP response from a AddProductToBundleWithResponse call
func ParseAddProductToBundleResponse(rsp *http.Response) (*AddProductToBundleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddProductToBundleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateProductBundleQuantityResponse parses an HTTP response from a UpdateProductBundleQuantityWithResponse call
func ParseUpdateProductBundleQuantityResponse(rsp *http.Response) (*UpdateProductBundleQuantityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductBundleQuantityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMoveProductInBundleResponse parses an HTTP response from a MoveProductInBundleWithResponse call
func ParseMoveProductInBundleResponse(rsp *http.Response) (*MoveProductInBundleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveProductInBundleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProductsCategoriesResponse parses an HTTP response from a GetProductsCategoriesWithResponse call
func ParseGetProductsCategoriesResponse(rsp *http.Response) (*GetProductsCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddProductToCategoriesResponse parses an HTTP response from a AddProductToCategoriesWithResponse call
func ParseAddProductToCategoriesResponse(rsp *http.Response) (*AddProductToCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddProductToCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRemoveProductFromCategoryResponse parses an HTTP response from a RemoveProductFromCategoryWithResponse call
func ParseRemoveProductFromCategoryResponse(rsp *http.Response) (*RemoveProductFromCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveProductFromCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProductRelationsResponse parses an HTTP response from a GetProductRelationsWithResponse call
func ParseGetProductRelationsResponse(rsp *http.Response) (*GetProductRelationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableProductConnectionInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCategoryConnectionsForProductResponse parses an HTTP response from a GetCategoryConnectionsForProductWithResponse call
func ParseGetCategoryConnectionsForProductResponse(rsp *http.Response) (*GetCategoryConnectionsForProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryConnectionsForProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableGroupedCategoryConnectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateCategoryConnectionResponse parses an HTTP response from a CreateCategoryConnectionWithResponse call
func ParseCreateCategoryConnectionResponse(rsp *http.Response) (*CreateCategoryConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCategoryConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteCategoryConnectionResponse parses an HTTP response from a DeleteCategoryConnectionWithResponse call
func ParseDeleteCategoryConnectionResponse(rsp *http.Response) (*DeleteCategoryConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCategoryConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateProductConnectionResponse parses an HTTP response from a CreateProductConnectionWithResponse call
func ParseCreateProductConnectionResponse(rsp *http.Response) (*CreateProductConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRelatedProductsRelationSortingOrderSourceResponse parses an HTTP response from a UpdateRelatedProductsRelationSortingOrderSourceWithResponse call
func ParseUpdateRelatedProductsRelationSortingOrderSourceResponse(rsp *http.Response) (*UpdateRelatedProductsRelationSortingOrderSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRelatedProductsRelationSortingOrderSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteProductConnectionsByRelationResponse parses an HTTP response from a DeleteProductConnectionsByRelationWithResponse call
func ParseDeleteProductConnectionsByRelationResponse(rsp *http.Response) (*DeleteProductConnectionsByRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductConnectionsByRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProductForRelationResponse parses an HTTP response from a GetProductForRelationWithResponse call
func ParseGetProductForRelationResponse(rsp *http.Response) (*GetProductForRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductForRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableProductConnectionProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateProductConnectionsResponse parses an HTTP response from a CreateProductConnectionsWithResponse call
func ParseCreateProductConnectionsResponse(rsp *http.Response) (*CreateProductConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteManyProductConnectionsResponse parses an HTTP response from a DeleteManyProductConnectionsWithResponse call
func ParseDeleteManyProductConnectionsResponse(rsp *http.Response) (*DeleteManyProductConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteManyProductConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateOrderProductRelationResponse parses an HTTP response from a UpdateOrderProductRelationWithResponse call
func ParseUpdateOrderProductRelationResponse(rsp *http.Response) (*UpdateOrderProductRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrderProductRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteProductConnectionResponse parses an HTTP response from a DeleteProductConnectionWithResponse call
func ParseDeleteProductConnectionResponse(rsp *http.Response) (*DeleteProductConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateOrderProductConnectionsResponse parses an HTTP response from a UpdateOrderProductConnectionsWithResponse call
func ParseUpdateOrderProductConnectionsResponse(rsp *http.Response) (*UpdateOrderProductConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrderProductConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateConnectionQuantityResponse parses an HTTP response from a UpdateConnectionQuantityWithResponse call
func ParseUpdateConnectionQuantityResponse(rsp *http.Response) (*UpdateConnectionQuantityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConnectionQuantityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCopyProductResponse parses an HTTP response from a CopyProductWithResponse call
func ParseCopyProductResponse(rsp *http.Response) (*CopyProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CopyProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseFindProductViewsByIdResponse parses an HTTP response from a FindProductViewsByIdWithResponse call
func ParseFindProductViewsByIdResponse(rsp *http.Response) (*FindProductViewsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindProductViewsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductViewDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetGroupedProductAttributesResponse parses an HTTP response from a GetGroupedProductAttributesWithResponse call
func ParseGetGroupedProductAttributesResponse(rsp *http.Response) (*GetGroupedProductAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupedProductAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableGroupedAttributeValuesDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProductsLabelsResponse parses an HTTP response from a GetProductsLabelsWithResponse call
func ParseGetProductsLabelsResponse(rsp *http.Response) (*GetProductsLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddLabelsToProductResponse parses an HTTP response from a AddLabelsToProductWithResponse call
func ParseAddLabelsToProductResponse(rsp *http.Response) (*AddLabelsToProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddLabelsToProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRemoveLabelFromProductResponse parses an HTTP response from a RemoveLabelFromProductWithResponse call
func ParseRemoveLabelFromProductResponse(rsp *http.Response) (*RemoveLabelFromProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveLabelFromProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetProductGroupResponse parses an HTTP response from a SetProductGroupWithResponse call
func ParseSetProductGroupResponse(rsp *http.Response) (*SetProductGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetProductGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProductVariantAttributeResponse parses an HTTP response from a GetProductVariantAttributeWithResponse call
func ParseGetProductVariantAttributeResponse(rsp *http.Response) (*GetProductVariantAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductVariantAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductVariantAttributeDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateProductVariantAttributeResponse parses an HTTP response from a UpdateProductVariantAttributeWithResponse call
func ParseUpdateProductVariantAttributeResponse(rsp *http.Response) (*UpdateProductVariantAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductVariantAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUnassignProductVariantResponse parses an HTTP response from a UnassignProductVariantWithResponse call
func ParseUnassignProductVariantResponse(rsp *http.Response) (*UnassignProductVariantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnassignProductVariantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddProductVariantResponse parses an HTTP response from a AddProductVariantWithResponse call
func ParseAddProductVariantResponse(rsp *http.Response) (*AddProductVariantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddProductVariantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMoveProductVariantResponse parses an HTTP response from a MoveProductVariantWithResponse call
func ParseMoveProductVariantResponse(rsp *http.Response) (*MoveProductVariantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveProductVariantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseChangeStatusResponse parses an HTTP response from a ChangeStatusWithResponse call
func ParseChangeStatusResponse(rsp *http.Response) (*ChangeStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseFindRelationsResponse parses an HTTP response from a FindRelationsWithResponse call
func ParseFindRelationsResponse(rsp *http.Response) (*FindRelationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableRelationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateRelationResponse parses an HTTP response from a CreateRelationWithResponse call
func ParseCreateRelationResponse(rsp *http.Response) (*CreateRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetFilteredRelationsResponse parses an HTTP response from a GetFilteredRelationsWithResponse call
func ParseGetFilteredRelationsResponse(rsp *http.Response) (*GetFilteredRelationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilteredRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableRelationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteResponse parses an HTTP response from a DeleteWithResponse call
func ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFindOneResponse parses an HTTP response from a FindOneWithResponse call
func ParseFindOneResponse(rsp *http.Response) (*FindOneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindOneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRelationResponse parses an HTTP response from a UpdateRelationWithResponse call
func ParseUpdateRelationResponse(rsp *http.Response) (*UpdateRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetCategoryConnectionsByRelationIdResponse parses an HTTP response from a GetCategoryConnectionsByRelationIdWithResponse call
func ParseGetCategoryConnectionsByRelationIdResponse(rsp *http.Response) (*GetCategoryConnectionsByRelationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryConnectionsByRelationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableCategoryConnectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateOrderRelationResponse parses an HTTP response from a UpdateOrderRelationWithResponse call
func ParseUpdateOrderRelationResponse(rsp *http.Response) (*UpdateOrderRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrderRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetByRelationIdResponse parses an HTTP response from a GetByRelationIdWithResponse call
func ParseGetByRelationIdResponse(rsp *http.Response) (*GetByRelationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetByRelationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListablePolicyDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddPolicyToRelationResponse parses an HTTP response from a AddPolicyToRelationWithResponse call
func ParseAddPolicyToRelationResponse(rsp *http.Response) (*AddPolicyToRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPolicyToRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeletePolicyForRelationResponse parses an HTTP response from a DeletePolicyForRelationWithResponse call
func ParseDeletePolicyForRelationResponse(rsp *http.Response) (*DeletePolicyForRelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyForRelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProductConnectionsByRelationIdResponse parses an HTTP response from a GetProductConnectionsByRelationIdWithResponse call
func ParseGetProductConnectionsByRelationIdResponse(rsp *http.Response) (*GetProductConnectionsByRelationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductConnectionsByRelationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListableProductConnectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PimVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseValidateAttributeResponse parses an HTTP response from a ValidateAttributeWithResponse call
func ParseValidateAttributeResponse(rsp *http.Response) (*ValidateAttributeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValidationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseValidateProductsResponse parses an HTTP response from a ValidateProductsWithResponse call
func ParseValidateProductsResponse(rsp *http.Response) (*ValidateProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProductValidationIssueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseValidateValueResponse parses an HTTP response from a ValidateValueWithResponse call
func ParseValidateValueResponse(rsp *http.Response) (*ValidateValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueValidationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
