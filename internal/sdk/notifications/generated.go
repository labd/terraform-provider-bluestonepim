// Package notifications provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package notifications

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	MapiKeyScopes = "mapiKey.Scopes"
)

// Defines values for AggregationFrequencyRequestDayOfWeek.
const (
	AggregationFrequencyRequestDayOfWeekFRIDAY    AggregationFrequencyRequestDayOfWeek = "FRIDAY"
	AggregationFrequencyRequestDayOfWeekMONDAY    AggregationFrequencyRequestDayOfWeek = "MONDAY"
	AggregationFrequencyRequestDayOfWeekSATURDAY  AggregationFrequencyRequestDayOfWeek = "SATURDAY"
	AggregationFrequencyRequestDayOfWeekSUNDAY    AggregationFrequencyRequestDayOfWeek = "SUNDAY"
	AggregationFrequencyRequestDayOfWeekTHURSDAY  AggregationFrequencyRequestDayOfWeek = "THURSDAY"
	AggregationFrequencyRequestDayOfWeekTUESDAY   AggregationFrequencyRequestDayOfWeek = "TUESDAY"
	AggregationFrequencyRequestDayOfWeekWEDNESDAY AggregationFrequencyRequestDayOfWeek = "WEDNESDAY"
)

// Defines values for AggregationFrequencyRequestFrequencyType.
const (
	AggregationFrequencyRequestFrequencyTypeDAILY  AggregationFrequencyRequestFrequencyType = "DAILY"
	AggregationFrequencyRequestFrequencyTypeHOURLY AggregationFrequencyRequestFrequencyType = "HOURLY"
	AggregationFrequencyRequestFrequencyTypeWEEKLY AggregationFrequencyRequestFrequencyType = "WEEKLY"
)

// Defines values for AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek.
const (
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeekFRIDAY    AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek = "FRIDAY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeekMONDAY    AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek = "MONDAY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeekSATURDAY  AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek = "SATURDAY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeekSUNDAY    AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek = "SUNDAY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeekTHURSDAY  AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek = "THURSDAY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeekTUESDAY   AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek = "TUESDAY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeekWEDNESDAY AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek = "WEDNESDAY"
)

// Defines values for AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth.
const (
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthAPRIL     AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "APRIL"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthAUGUST    AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "AUGUST"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthDECEMBER  AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "DECEMBER"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthFEBRUARY  AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "FEBRUARY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthJANUARY   AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "JANUARY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthJULY      AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "JULY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthJUNE      AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "JUNE"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthMARCH     AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "MARCH"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthMAY       AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "MAY"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthNOVEMBER  AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "NOVEMBER"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthOCTOBER   AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "OCTOBER"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonthSEPTEMBER AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth = "SEPTEMBER"
)

// Defines values for AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinition.
const (
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinitionSTANDARD AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinition = "STANDARD"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinitionUTC      AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinition = "UTC"
	AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinitionWALL     AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinition = "WALL"
)

// Defines values for AggregationFrequencyResponseDayOfWeek.
const (
	AggregationFrequencyResponseDayOfWeekFRIDAY    AggregationFrequencyResponseDayOfWeek = "FRIDAY"
	AggregationFrequencyResponseDayOfWeekMONDAY    AggregationFrequencyResponseDayOfWeek = "MONDAY"
	AggregationFrequencyResponseDayOfWeekSATURDAY  AggregationFrequencyResponseDayOfWeek = "SATURDAY"
	AggregationFrequencyResponseDayOfWeekSUNDAY    AggregationFrequencyResponseDayOfWeek = "SUNDAY"
	AggregationFrequencyResponseDayOfWeekTHURSDAY  AggregationFrequencyResponseDayOfWeek = "THURSDAY"
	AggregationFrequencyResponseDayOfWeekTUESDAY   AggregationFrequencyResponseDayOfWeek = "TUESDAY"
	AggregationFrequencyResponseDayOfWeekWEDNESDAY AggregationFrequencyResponseDayOfWeek = "WEDNESDAY"
)

// Defines values for AggregationFrequencyResponseFrequencyType.
const (
	AggregationFrequencyResponseFrequencyTypeDAILY  AggregationFrequencyResponseFrequencyType = "DAILY"
	AggregationFrequencyResponseFrequencyTypeHOURLY AggregationFrequencyResponseFrequencyType = "HOURLY"
	AggregationFrequencyResponseFrequencyTypeWEEKLY AggregationFrequencyResponseFrequencyType = "WEEKLY"
)

// Defines values for AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek.
const (
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeekFRIDAY    AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek = "FRIDAY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeekMONDAY    AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek = "MONDAY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeekSATURDAY  AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek = "SATURDAY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeekSUNDAY    AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek = "SUNDAY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeekTHURSDAY  AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek = "THURSDAY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeekTUESDAY   AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek = "TUESDAY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeekWEDNESDAY AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek = "WEDNESDAY"
)

// Defines values for AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth.
const (
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthAPRIL     AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "APRIL"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthAUGUST    AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "AUGUST"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthDECEMBER  AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "DECEMBER"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthFEBRUARY  AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "FEBRUARY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthJANUARY   AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "JANUARY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthJULY      AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "JULY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthJUNE      AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "JUNE"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthMARCH     AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "MARCH"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthMAY       AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "MAY"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthNOVEMBER  AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "NOVEMBER"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthOCTOBER   AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "OCTOBER"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonthSEPTEMBER AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth = "SEPTEMBER"
)

// Defines values for AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinition.
const (
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinitionSTANDARD AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinition = "STANDARD"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinitionUTC      AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinition = "UTC"
	AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinitionWALL     AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinition = "WALL"
)

// Defines values for EmailMessageResponseDeliveryStatus.
const (
	EmailMessageResponseDeliveryStatusERROR      EmailMessageResponseDeliveryStatus = "ERROR"
	EmailMessageResponseDeliveryStatusINPROGRESS EmailMessageResponseDeliveryStatus = "IN_PROGRESS"
	EmailMessageResponseDeliveryStatusSENT       EmailMessageResponseDeliveryStatus = "SENT"
	EmailMessageResponseDeliveryStatusTOBESENT   EmailMessageResponseDeliveryStatus = "TO_BE_SENT"
)

// Defines values for InAppMessageSearchRequestStatus.
const (
	InAppMessageSearchRequestStatusNOTREAD InAppMessageSearchRequestStatus = "NOT_READ"
	InAppMessageSearchRequestStatusREAD    InAppMessageSearchRequestStatus = "READ"
)

// Defines values for InAppRecipientMessageStatus.
const (
	InAppRecipientMessageStatusNOTREAD InAppRecipientMessageStatus = "NOT_READ"
	InAppRecipientMessageStatusREAD    InAppRecipientMessageStatus = "READ"
)

// Defines values for InAppUserMessageResponseStatus.
const (
	NOTREAD InAppUserMessageResponseStatus = "NOT_READ"
	READ    InAppUserMessageResponseStatus = "READ"
)

// Defines values for SubscriptionResponseEventTypes.
const (
	SubscriptionResponseEventTypesCATEGORYCREATED                     SubscriptionResponseEventTypes = "CATEGORY_CREATED"
	SubscriptionResponseEventTypesCATEGORYREMOVED                     SubscriptionResponseEventTypes = "CATEGORY_REMOVED"
	SubscriptionResponseEventTypesCATEGORYWATCH                       SubscriptionResponseEventTypes = "CATEGORY_WATCH"
	SubscriptionResponseEventTypesCATEGORYWATCHARCHIVESTATE           SubscriptionResponseEventTypes = "CATEGORY_WATCH_ARCHIVE_STATE"
	SubscriptionResponseEventTypesCATEGORYWATCHATTRIBUTE              SubscriptionResponseEventTypes = "CATEGORY_WATCH_ATTRIBUTE"
	SubscriptionResponseEventTypesCATEGORYWATCHMETADATADESCRIPTION    SubscriptionResponseEventTypes = "CATEGORY_WATCH_METADATA_DESCRIPTION"
	SubscriptionResponseEventTypesCATEGORYWATCHMETADATANAME           SubscriptionResponseEventTypes = "CATEGORY_WATCH_METADATA_NAME"
	SubscriptionResponseEventTypesCATEGORYWATCHMETADATANUMBER         SubscriptionResponseEventTypes = "CATEGORY_WATCH_METADATA_NUMBER"
	SubscriptionResponseEventTypesCATEGORYWATCHMOVE                   SubscriptionResponseEventTypes = "CATEGORY_WATCH_MOVE"
	SubscriptionResponseEventTypesCATEGORYWATCHORDER                  SubscriptionResponseEventTypes = "CATEGORY_WATCH_ORDER"
	SubscriptionResponseEventTypesNEWCOMMENTASSIGNEDTOTASK            SubscriptionResponseEventTypes = "NEW_COMMENT_ASSIGNED_TO_TASK"
	SubscriptionResponseEventTypesPRODUCTCREATED                      SubscriptionResponseEventTypes = "PRODUCT_CREATED"
	SubscriptionResponseEventTypesPRODUCTSYNCDONE                     SubscriptionResponseEventTypes = "PRODUCT_SYNC_DONE"
	SubscriptionResponseEventTypesPRODUCTWATCH                        SubscriptionResponseEventTypes = "PRODUCT_WATCH"
	SubscriptionResponseEventTypesPRODUCTWATCHASSET                   SubscriptionResponseEventTypes = "PRODUCT_WATCH_ASSET"
	SubscriptionResponseEventTypesPRODUCTWATCHATTRIBUTE               SubscriptionResponseEventTypes = "PRODUCT_WATCH_ATTRIBUTE"
	SubscriptionResponseEventTypesPRODUCTWATCHATTRIBUTEASSOCIATION    SubscriptionResponseEventTypes = "PRODUCT_WATCH_ATTRIBUTE_ASSOCIATION"
	SubscriptionResponseEventTypesPRODUCTWATCHATTRIBUTEDISASSOCIATION SubscriptionResponseEventTypes = "PRODUCT_WATCH_ATTRIBUTE_DISASSOCIATION"
	SubscriptionResponseEventTypesPRODUCTWATCHATTRIBUTEUPDATEVALUE    SubscriptionResponseEventTypes = "PRODUCT_WATCH_ATTRIBUTE_UPDATE_VALUE"
	SubscriptionResponseEventTypesPRODUCTWATCHBUNDLE                  SubscriptionResponseEventTypes = "PRODUCT_WATCH_BUNDLE"
	SubscriptionResponseEventTypesPRODUCTWATCHBUNDLEQUANTITY          SubscriptionResponseEventTypes = "PRODUCT_WATCH_BUNDLE_QUANTITY"
	SubscriptionResponseEventTypesPRODUCTWATCHCATEGORY                SubscriptionResponseEventTypes = "PRODUCT_WATCH_CATEGORY"
	SubscriptionResponseEventTypesPRODUCTWATCHLABEL                   SubscriptionResponseEventTypes = "PRODUCT_WATCH_LABEL"
	SubscriptionResponseEventTypesPRODUCTWATCHMETADATADESCRIPTION     SubscriptionResponseEventTypes = "PRODUCT_WATCH_METADATA_DESCRIPTION"
	SubscriptionResponseEventTypesPRODUCTWATCHMETADATANAME            SubscriptionResponseEventTypes = "PRODUCT_WATCH_METADATA_NAME"
	SubscriptionResponseEventTypesPRODUCTWATCHMETADATANUMBER          SubscriptionResponseEventTypes = "PRODUCT_WATCH_METADATA_NUMBER"
	SubscriptionResponseEventTypesPRODUCTWATCHRELATION                SubscriptionResponseEventTypes = "PRODUCT_WATCH_RELATION"
	SubscriptionResponseEventTypesPRODUCTWATCHSTATE                   SubscriptionResponseEventTypes = "PRODUCT_WATCH_STATE"
	SubscriptionResponseEventTypesPRODUCTWATCHVARIANT                 SubscriptionResponseEventTypes = "PRODUCT_WATCH_VARIANT"
	SubscriptionResponseEventTypesTASKDEADLINEREACHED                 SubscriptionResponseEventTypes = "TASK_DEADLINE_REACHED"
	SubscriptionResponseEventTypesTASKDEADLINEREMINDER                SubscriptionResponseEventTypes = "TASK_DEADLINE_REMINDER"
	SubscriptionResponseEventTypesTASKDUEDATEUPDATED                  SubscriptionResponseEventTypes = "TASK_DUE_DATE_UPDATED"
	SubscriptionResponseEventTypesTASKISASSIGNEDTOUSER                SubscriptionResponseEventTypes = "TASK_IS_ASSIGNED_TO_USER"
	SubscriptionResponseEventTypesTASKMETADATAISUPDATED               SubscriptionResponseEventTypes = "TASK_METADATA_IS_UPDATED"
	SubscriptionResponseEventTypesTASKREPORTEDBYMEISCLOSED            SubscriptionResponseEventTypes = "TASK_REPORTED_BY_ME_IS_CLOSED"
	SubscriptionResponseEventTypesTASKSCOPEISUPDATED                  SubscriptionResponseEventTypes = "TASK_SCOPE_IS_UPDATED"
)

// Defines values for UserEventTypeListRequestEventTypes.
const (
	UserEventTypeListRequestEventTypesNEWCOMMENTASSIGNEDTOTASK UserEventTypeListRequestEventTypes = "NEW_COMMENT_ASSIGNED_TO_TASK"
	UserEventTypeListRequestEventTypesPRODUCTWATCH             UserEventTypeListRequestEventTypes = "PRODUCT_WATCH"
	UserEventTypeListRequestEventTypesTASKDEADLINEREACHED      UserEventTypeListRequestEventTypes = "TASK_DEADLINE_REACHED"
	UserEventTypeListRequestEventTypesTASKDEADLINEREMINDER     UserEventTypeListRequestEventTypes = "TASK_DEADLINE_REMINDER"
	UserEventTypeListRequestEventTypesTASKDUEDATEUPDATED       UserEventTypeListRequestEventTypes = "TASK_DUE_DATE_UPDATED"
	UserEventTypeListRequestEventTypesTASKISASSIGNEDTOUSER     UserEventTypeListRequestEventTypes = "TASK_IS_ASSIGNED_TO_USER"
	UserEventTypeListRequestEventTypesTASKMETADATAISUPDATED    UserEventTypeListRequestEventTypes = "TASK_METADATA_IS_UPDATED"
	UserEventTypeListRequestEventTypesTASKREPORTEDBYMEISCLOSED UserEventTypeListRequestEventTypes = "TASK_REPORTED_BY_ME_IS_CLOSED"
	UserEventTypeListRequestEventTypesTASKSCOPEISUPDATED       UserEventTypeListRequestEventTypes = "TASK_SCOPE_IS_UPDATED"
)

// Defines values for WebhookEventTypeListRequestEventTypes.
const (
	WebhookEventTypeListRequestEventTypesCATEGORYCREATED                     WebhookEventTypeListRequestEventTypes = "CATEGORY_CREATED"
	WebhookEventTypeListRequestEventTypesCATEGORYREMOVED                     WebhookEventTypeListRequestEventTypes = "CATEGORY_REMOVED"
	WebhookEventTypeListRequestEventTypesCATEGORYWATCHARCHIVESTATE           WebhookEventTypeListRequestEventTypes = "CATEGORY_WATCH_ARCHIVE_STATE"
	WebhookEventTypeListRequestEventTypesCATEGORYWATCHATTRIBUTE              WebhookEventTypeListRequestEventTypes = "CATEGORY_WATCH_ATTRIBUTE"
	WebhookEventTypeListRequestEventTypesCATEGORYWATCHMETADATADESCRIPTION    WebhookEventTypeListRequestEventTypes = "CATEGORY_WATCH_METADATA_DESCRIPTION"
	WebhookEventTypeListRequestEventTypesCATEGORYWATCHMETADATANAME           WebhookEventTypeListRequestEventTypes = "CATEGORY_WATCH_METADATA_NAME"
	WebhookEventTypeListRequestEventTypesCATEGORYWATCHMETADATANUMBER         WebhookEventTypeListRequestEventTypes = "CATEGORY_WATCH_METADATA_NUMBER"
	WebhookEventTypeListRequestEventTypesCATEGORYWATCHMOVE                   WebhookEventTypeListRequestEventTypes = "CATEGORY_WATCH_MOVE"
	WebhookEventTypeListRequestEventTypesCATEGORYWATCHORDER                  WebhookEventTypeListRequestEventTypes = "CATEGORY_WATCH_ORDER"
	WebhookEventTypeListRequestEventTypesPRODUCTCREATED                      WebhookEventTypeListRequestEventTypes = "PRODUCT_CREATED"
	WebhookEventTypeListRequestEventTypesPRODUCTSYNCDONE                     WebhookEventTypeListRequestEventTypes = "PRODUCT_SYNC_DONE"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHASSET                   WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_ASSET"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHATTRIBUTE               WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_ATTRIBUTE"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHATTRIBUTEASSOCIATION    WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_ATTRIBUTE_ASSOCIATION"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHATTRIBUTEDISASSOCIATION WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_ATTRIBUTE_DISASSOCIATION"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHATTRIBUTEUPDATEVALUE    WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_ATTRIBUTE_UPDATE_VALUE"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHBUNDLE                  WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_BUNDLE"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHBUNDLEQUANTITY          WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_BUNDLE_QUANTITY"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHCATEGORY                WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_CATEGORY"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHLABEL                   WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_LABEL"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHMETADATADESCRIPTION     WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_METADATA_DESCRIPTION"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHMETADATANAME            WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_METADATA_NAME"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHMETADATANUMBER          WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_METADATA_NUMBER"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHRELATION                WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_RELATION"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHSTATE                   WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_STATE"
	WebhookEventTypeListRequestEventTypesPRODUCTWATCHVARIANT                 WebhookEventTypeListRequestEventTypes = "PRODUCT_WATCH_VARIANT"
)

// Defines values for WebhookMessageResponseEventType.
const (
	WebhookMessageResponseEventTypeCATEGORYCREATED                     WebhookMessageResponseEventType = "CATEGORY_CREATED"
	WebhookMessageResponseEventTypeCATEGORYREMOVED                     WebhookMessageResponseEventType = "CATEGORY_REMOVED"
	WebhookMessageResponseEventTypeCATEGORYWATCH                       WebhookMessageResponseEventType = "CATEGORY_WATCH"
	WebhookMessageResponseEventTypeCATEGORYWATCHARCHIVESTATE           WebhookMessageResponseEventType = "CATEGORY_WATCH_ARCHIVE_STATE"
	WebhookMessageResponseEventTypeCATEGORYWATCHATTRIBUTE              WebhookMessageResponseEventType = "CATEGORY_WATCH_ATTRIBUTE"
	WebhookMessageResponseEventTypeCATEGORYWATCHMETADATADESCRIPTION    WebhookMessageResponseEventType = "CATEGORY_WATCH_METADATA_DESCRIPTION"
	WebhookMessageResponseEventTypeCATEGORYWATCHMETADATANAME           WebhookMessageResponseEventType = "CATEGORY_WATCH_METADATA_NAME"
	WebhookMessageResponseEventTypeCATEGORYWATCHMETADATANUMBER         WebhookMessageResponseEventType = "CATEGORY_WATCH_METADATA_NUMBER"
	WebhookMessageResponseEventTypeCATEGORYWATCHMOVE                   WebhookMessageResponseEventType = "CATEGORY_WATCH_MOVE"
	WebhookMessageResponseEventTypeCATEGORYWATCHORDER                  WebhookMessageResponseEventType = "CATEGORY_WATCH_ORDER"
	WebhookMessageResponseEventTypeNEWCOMMENTASSIGNEDTOTASK            WebhookMessageResponseEventType = "NEW_COMMENT_ASSIGNED_TO_TASK"
	WebhookMessageResponseEventTypePRODUCTCREATED                      WebhookMessageResponseEventType = "PRODUCT_CREATED"
	WebhookMessageResponseEventTypePRODUCTSYNCDONE                     WebhookMessageResponseEventType = "PRODUCT_SYNC_DONE"
	WebhookMessageResponseEventTypePRODUCTWATCH                        WebhookMessageResponseEventType = "PRODUCT_WATCH"
	WebhookMessageResponseEventTypePRODUCTWATCHASSET                   WebhookMessageResponseEventType = "PRODUCT_WATCH_ASSET"
	WebhookMessageResponseEventTypePRODUCTWATCHATTRIBUTE               WebhookMessageResponseEventType = "PRODUCT_WATCH_ATTRIBUTE"
	WebhookMessageResponseEventTypePRODUCTWATCHATTRIBUTEASSOCIATION    WebhookMessageResponseEventType = "PRODUCT_WATCH_ATTRIBUTE_ASSOCIATION"
	WebhookMessageResponseEventTypePRODUCTWATCHATTRIBUTEDISASSOCIATION WebhookMessageResponseEventType = "PRODUCT_WATCH_ATTRIBUTE_DISASSOCIATION"
	WebhookMessageResponseEventTypePRODUCTWATCHATTRIBUTEUPDATEVALUE    WebhookMessageResponseEventType = "PRODUCT_WATCH_ATTRIBUTE_UPDATE_VALUE"
	WebhookMessageResponseEventTypePRODUCTWATCHBUNDLE                  WebhookMessageResponseEventType = "PRODUCT_WATCH_BUNDLE"
	WebhookMessageResponseEventTypePRODUCTWATCHBUNDLEQUANTITY          WebhookMessageResponseEventType = "PRODUCT_WATCH_BUNDLE_QUANTITY"
	WebhookMessageResponseEventTypePRODUCTWATCHCATEGORY                WebhookMessageResponseEventType = "PRODUCT_WATCH_CATEGORY"
	WebhookMessageResponseEventTypePRODUCTWATCHLABEL                   WebhookMessageResponseEventType = "PRODUCT_WATCH_LABEL"
	WebhookMessageResponseEventTypePRODUCTWATCHMETADATADESCRIPTION     WebhookMessageResponseEventType = "PRODUCT_WATCH_METADATA_DESCRIPTION"
	WebhookMessageResponseEventTypePRODUCTWATCHMETADATANAME            WebhookMessageResponseEventType = "PRODUCT_WATCH_METADATA_NAME"
	WebhookMessageResponseEventTypePRODUCTWATCHMETADATANUMBER          WebhookMessageResponseEventType = "PRODUCT_WATCH_METADATA_NUMBER"
	WebhookMessageResponseEventTypePRODUCTWATCHRELATION                WebhookMessageResponseEventType = "PRODUCT_WATCH_RELATION"
	WebhookMessageResponseEventTypePRODUCTWATCHSTATE                   WebhookMessageResponseEventType = "PRODUCT_WATCH_STATE"
	WebhookMessageResponseEventTypePRODUCTWATCHVARIANT                 WebhookMessageResponseEventType = "PRODUCT_WATCH_VARIANT"
	WebhookMessageResponseEventTypeTASKDEADLINEREACHED                 WebhookMessageResponseEventType = "TASK_DEADLINE_REACHED"
	WebhookMessageResponseEventTypeTASKDEADLINEREMINDER                WebhookMessageResponseEventType = "TASK_DEADLINE_REMINDER"
	WebhookMessageResponseEventTypeTASKDUEDATEUPDATED                  WebhookMessageResponseEventType = "TASK_DUE_DATE_UPDATED"
	WebhookMessageResponseEventTypeTASKISASSIGNEDTOUSER                WebhookMessageResponseEventType = "TASK_IS_ASSIGNED_TO_USER"
	WebhookMessageResponseEventTypeTASKMETADATAISUPDATED               WebhookMessageResponseEventType = "TASK_METADATA_IS_UPDATED"
	WebhookMessageResponseEventTypeTASKREPORTEDBYMEISCLOSED            WebhookMessageResponseEventType = "TASK_REPORTED_BY_ME_IS_CLOSED"
	WebhookMessageResponseEventTypeTASKSCOPEISUPDATED                  WebhookMessageResponseEventType = "TASK_SCOPE_IS_UPDATED"
)

// Defines values for WebhookMessageResponseStatus.
const (
	WebhookMessageResponseStatusERROR           WebhookMessageResponseStatus = "ERROR"
	WebhookMessageResponseStatusINPROGRESS      WebhookMessageResponseStatus = "IN_PROGRESS"
	WebhookMessageResponseStatusSENT            WebhookMessageResponseStatus = "SENT"
	WebhookMessageResponseStatusTOBESENT        WebhookMessageResponseStatus = "TO_BE_SENT"
	WebhookMessageResponseStatusWEBHOOKINACTIVE WebhookMessageResponseStatus = "WEBHOOK_INACTIVE"
)

// Defines values for WebhookMessageSearchRequestStatus.
const (
	ERROR           WebhookMessageSearchRequestStatus = "ERROR"
	INPROGRESS      WebhookMessageSearchRequestStatus = "IN_PROGRESS"
	SENT            WebhookMessageSearchRequestStatus = "SENT"
	TOBESENT        WebhookMessageSearchRequestStatus = "TO_BE_SENT"
	WEBHOOKINACTIVE WebhookMessageSearchRequestStatus = "WEBHOOK_INACTIVE"
)

// Defines values for FindConfigurationParamsEntityType.
const (
	FindConfigurationParamsEntityTypeCATEGORY FindConfigurationParamsEntityType = "CATEGORY"
	FindConfigurationParamsEntityTypePRODUCT  FindConfigurationParamsEntityType = "PRODUCT"
	FindConfigurationParamsEntityTypeTASK     FindConfigurationParamsEntityType = "TASK"
)

// Defines values for UpdateEmailFrequencyParamsEntityType.
const (
	UpdateEmailFrequencyParamsEntityTypeCATEGORY UpdateEmailFrequencyParamsEntityType = "CATEGORY"
	UpdateEmailFrequencyParamsEntityTypePRODUCT  UpdateEmailFrequencyParamsEntityType = "PRODUCT"
	UpdateEmailFrequencyParamsEntityTypeTASK     UpdateEmailFrequencyParamsEntityType = "TASK"
)

// Defines values for UnsubscribeFromEntityParamsEventType.
const (
	UnsubscribeFromEntityParamsEventTypePRODUCTWATCH UnsubscribeFromEntityParamsEventType = "PRODUCT_WATCH"
)

// Defines values for FindWatchedEntitiesParamsEventType.
const (
	FindWatchedEntitiesParamsEventTypePRODUCTWATCH FindWatchedEntitiesParamsEventType = "PRODUCT_WATCH"
)

// Defines values for SubscribeToEntityParamsEventType.
const (
	PRODUCTWATCH SubscribeToEntityParamsEventType = "PRODUCT_WATCH"
)

// AggregationFrequencyRequest defines model for AggregationFrequencyRequest.
type AggregationFrequencyRequest struct {
	DayOfWeek     AggregationFrequencyRequestDayOfWeek     `json:"dayOfWeek"`
	FrequencyType AggregationFrequencyRequestFrequencyType `json:"frequencyType"`
	Hour          int32                                    `json:"hour"`
	TimeZoneId    struct {
		Id    *string `json:"id,omitempty"`
		Rules *struct {
			FixedOffset     *bool `json:"fixedOffset,omitempty"`
			TransitionRules *[]struct {
				DayOfMonthIndicator *int32                                                              `json:"dayOfMonthIndicator,omitempty"`
				DayOfWeek           *AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek `json:"dayOfWeek,omitempty"`
				LocalTime           *LocalTime                                                          `json:"localTime,omitempty"`
				MidnightEndOfDay    *bool                                                               `json:"midnightEndOfDay,omitempty"`
				Month               *AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth     `json:"month,omitempty"`
				OffsetAfter         *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"offsetAfter,omitempty"`
				OffsetBefore *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"offsetBefore,omitempty"`
				StandardOffset *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"standardOffset,omitempty"`
				TimeDefinition *AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinition `json:"timeDefinition,omitempty"`
			} `json:"transitionRules,omitempty"`
			Transitions *[]struct {
				DateTimeAfter  *time.Time `json:"dateTimeAfter,omitempty"`
				DateTimeBefore *time.Time `json:"dateTimeBefore,omitempty"`
				Duration       *struct {
					Nano     *int32 `json:"nano,omitempty"`
					Negative *bool  `json:"negative,omitempty"`
					Seconds  *int64 `json:"seconds,omitempty"`
					Units    *[]struct {
						DateBased         *bool `json:"dateBased,omitempty"`
						DurationEstimated *bool `json:"durationEstimated,omitempty"`
						TimeBased         *bool `json:"timeBased,omitempty"`
					} `json:"units,omitempty"`
					Zero *bool `json:"zero,omitempty"`
				} `json:"duration,omitempty"`
				Gap         *bool      `json:"gap,omitempty"`
				Instant     *time.Time `json:"instant,omitempty"`
				OffsetAfter *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"offsetAfter,omitempty"`
				OffsetBefore *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"offsetBefore,omitempty"`
				Overlap *bool `json:"overlap,omitempty"`
			} `json:"transitions,omitempty"`
		} `json:"rules,omitempty"`
	} `json:"timeZoneId"`
}

// AggregationFrequencyRequestDayOfWeek defines model for AggregationFrequencyRequest.DayOfWeek.
type AggregationFrequencyRequestDayOfWeek string

// AggregationFrequencyRequestFrequencyType defines model for AggregationFrequencyRequest.FrequencyType.
type AggregationFrequencyRequestFrequencyType string

// AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek defines model for AggregationFrequencyRequest.TimeZoneId.Rules.TransitionRules.DayOfWeek.
type AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesDayOfWeek string

// AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth defines model for AggregationFrequencyRequest.TimeZoneId.Rules.TransitionRules.Month.
type AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesMonth string

// AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinition defines model for AggregationFrequencyRequest.TimeZoneId.Rules.TransitionRules.TimeDefinition.
type AggregationFrequencyRequestTimeZoneIdRulesTransitionRulesTimeDefinition string

// AggregationFrequencyResponse defines model for AggregationFrequencyResponse.
type AggregationFrequencyResponse struct {
	DayOfWeek     AggregationFrequencyResponseDayOfWeek     `json:"dayOfWeek"`
	FrequencyType AggregationFrequencyResponseFrequencyType `json:"frequencyType"`
	Hour          int32                                     `json:"hour"`
	TimeZoneId    struct {
		Id    *string `json:"id,omitempty"`
		Rules *struct {
			FixedOffset     *bool `json:"fixedOffset,omitempty"`
			TransitionRules *[]struct {
				DayOfMonthIndicator *int32                                                               `json:"dayOfMonthIndicator,omitempty"`
				DayOfWeek           *AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek `json:"dayOfWeek,omitempty"`
				LocalTime           *LocalTime                                                           `json:"localTime,omitempty"`
				MidnightEndOfDay    *bool                                                                `json:"midnightEndOfDay,omitempty"`
				Month               *AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth     `json:"month,omitempty"`
				OffsetAfter         *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"offsetAfter,omitempty"`
				OffsetBefore *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"offsetBefore,omitempty"`
				StandardOffset *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"standardOffset,omitempty"`
				TimeDefinition *AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinition `json:"timeDefinition,omitempty"`
			} `json:"transitionRules,omitempty"`
			Transitions *[]struct {
				DateTimeAfter  *time.Time `json:"dateTimeAfter,omitempty"`
				DateTimeBefore *time.Time `json:"dateTimeBefore,omitempty"`
				Duration       *struct {
					Nano     *int32 `json:"nano,omitempty"`
					Negative *bool  `json:"negative,omitempty"`
					Seconds  *int64 `json:"seconds,omitempty"`
					Units    *[]struct {
						DateBased         *bool `json:"dateBased,omitempty"`
						DurationEstimated *bool `json:"durationEstimated,omitempty"`
						TimeBased         *bool `json:"timeBased,omitempty"`
					} `json:"units,omitempty"`
					Zero *bool `json:"zero,omitempty"`
				} `json:"duration,omitempty"`
				Gap         *bool      `json:"gap,omitempty"`
				Instant     *time.Time `json:"instant,omitempty"`
				OffsetAfter *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"offsetAfter,omitempty"`
				OffsetBefore *struct {
					Id           *string `json:"id,omitempty"`
					TotalSeconds *int32  `json:"totalSeconds,omitempty"`
				} `json:"offsetBefore,omitempty"`
				Overlap *bool `json:"overlap,omitempty"`
			} `json:"transitions,omitempty"`
		} `json:"rules,omitempty"`
	} `json:"timeZoneId"`
}

// AggregationFrequencyResponseDayOfWeek defines model for AggregationFrequencyResponse.DayOfWeek.
type AggregationFrequencyResponseDayOfWeek string

// AggregationFrequencyResponseFrequencyType defines model for AggregationFrequencyResponse.FrequencyType.
type AggregationFrequencyResponseFrequencyType string

// AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek defines model for AggregationFrequencyResponse.TimeZoneId.Rules.TransitionRules.DayOfWeek.
type AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesDayOfWeek string

// AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth defines model for AggregationFrequencyResponse.TimeZoneId.Rules.TransitionRules.Month.
type AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesMonth string

// AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinition defines model for AggregationFrequencyResponse.TimeZoneId.Rules.TransitionRules.TimeDefinition.
type AggregationFrequencyResponseTimeZoneIdRulesTransitionRulesTimeDefinition string

// EmailMessageListResponse defines model for EmailMessageListResponse.
type EmailMessageListResponse struct {
	Data []EmailMessageResponse `json:"data"`
}

// EmailMessageResponse defines model for EmailMessageResponse.
type EmailMessageResponse struct {
	Content        string                             `json:"content"`
	ContentType    *string                            `json:"contentType,omitempty"`
	CreateDate     *int64                             `json:"createDate,omitempty"`
	DeliveryStatus EmailMessageResponseDeliveryStatus `json:"deliveryStatus"`
	Id             string                             `json:"id"`
	Recipient      []EmailRecipient                   `json:"recipient"`
	Subject        string                             `json:"subject"`
}

// EmailMessageResponseDeliveryStatus defines model for EmailMessageResponse.DeliveryStatus.
type EmailMessageResponseDeliveryStatus string

// EmailMessageSearchRequest defines model for EmailMessageSearchRequest.
type EmailMessageSearchRequest struct {
	FromCreationDate *int64    `json:"fromCreationDate,omitempty"`
	Ids              *[]string `json:"ids,omitempty"`
	Page             int64     `json:"page"`
	PageSize         int32     `json:"pageSize"`
	ToCreationDate   *int64    `json:"toCreationDate,omitempty"`
}

// EmailRecipient defines model for EmailRecipient.
type EmailRecipient struct {
	EmailAddress string `json:"emailAddress"`
}

// EntityWatchRequest defines model for EntityWatchRequest.
type EntityWatchRequest struct {
	EntityIds []string `json:"entityIds"`
}

// EntityWatchResponse defines model for EntityWatchResponse.
type EntityWatchResponse struct {
	EntityIds *[]string `json:"entityIds,omitempty"`
}

// ErrorDetails defines model for ErrorDetails.
type ErrorDetails struct {
	Field         *string `json:"field,omitempty"`
	Message       *string `json:"message,omitempty"`
	RejectedValue *string `json:"rejectedValue,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error        *string         `json:"error,omitempty"`
	ErrorDetails *[]ErrorDetails `json:"errorDetails,omitempty"`
	RequestId    *string         `json:"requestId,omitempty"`
	Status       *int32          `json:"status,omitempty"`
	Timestamp    *int64          `json:"timestamp,omitempty"`
}

// FrequencyConfigRequest defines model for FrequencyConfigRequest.
type FrequencyConfigRequest struct {
	Aggregated           bool                        `json:"aggregated"`
	AggregationFrequency AggregationFrequencyRequest `json:"aggregationFrequency"`
	Immediately          bool                        `json:"immediately"`
}

// FrequencyConfigResponse defines model for FrequencyConfigResponse.
type FrequencyConfigResponse struct {
	Aggregated           bool                         `json:"aggregated"`
	AggregationFrequency AggregationFrequencyResponse `json:"aggregationFrequency"`
	Immediately          bool                         `json:"immediately"`
}

// InAppMessageListResponse defines model for InAppMessageListResponse.
type InAppMessageListResponse struct {
	Data []InAppMessageResponse `json:"data"`
}

// InAppMessageResponse defines model for InAppMessageResponse.
type InAppMessageResponse struct {
	Content     string           `json:"content"`
	ContentType *string          `json:"contentType,omitempty"`
	CreateDate  *int64           `json:"createDate,omitempty"`
	Id          string           `json:"id"`
	Recipient   []InAppRecipient `json:"recipient"`
}

// InAppMessageSearchRequest defines model for InAppMessageSearchRequest.
type InAppMessageSearchRequest struct {
	FromCreationDate *int64                           `json:"fromCreationDate,omitempty"`
	Ids              *[]string                        `json:"ids,omitempty"`
	Page             int64                            `json:"page"`
	PageSize         int32                            `json:"pageSize"`
	Status           *InAppMessageSearchRequestStatus `json:"status,omitempty"`
	ToCreationDate   *int64                           `json:"toCreationDate,omitempty"`
}

// InAppMessageSearchRequestStatus defines model for InAppMessageSearchRequest.Status.
type InAppMessageSearchRequestStatus string

// InAppRecipient defines model for InAppRecipient.
type InAppRecipient struct {
	Id            string                      `json:"id"`
	MessageStatus InAppRecipientMessageStatus `json:"messageStatus"`
}

// InAppRecipientMessageStatus defines model for InAppRecipient.MessageStatus.
type InAppRecipientMessageStatus string

// InAppUserMessageListResponse defines model for InAppUserMessageListResponse.
type InAppUserMessageListResponse struct {
	Data []InAppUserMessageResponse `json:"data"`
}

// InAppUserMessageResponse defines model for InAppUserMessageResponse.
type InAppUserMessageResponse struct {
	Content     string                          `json:"content"`
	ContentType *string                         `json:"contentType,omitempty"`
	CreateDate  *int64                          `json:"createDate,omitempty"`
	Id          string                          `json:"id"`
	Status      *InAppUserMessageResponseStatus `json:"status,omitempty"`
}

// InAppUserMessageResponseStatus defines model for InAppUserMessageResponse.Status.
type InAppUserMessageResponseStatus string

// LocalTime defines model for LocalTime.
type LocalTime struct {
	Hour   *int32 `json:"hour,omitempty"`
	Minute *int32 `json:"minute,omitempty"`
	Nano   *int32 `json:"nano,omitempty"`
	Second *int32 `json:"second,omitempty"`
}

// PropertyUpdateString defines model for PropertyUpdateString.
type PropertyUpdateString struct {
	Value *string `json:"value,omitempty"`
}

// SubscriptionResponse defines model for SubscriptionResponse.
type SubscriptionResponse struct {
	EventTypes []SubscriptionResponseEventTypes `json:"eventTypes"`
}

// SubscriptionResponseEventTypes defines model for SubscriptionResponse.EventTypes.
type SubscriptionResponseEventTypes string

// Unit defines model for Unit.
type Unit = map[string]interface{}

// UserConfigurationRequest defines model for UserConfigurationRequest.
type UserConfigurationRequest struct {
	UserEmail *PropertyUpdateString `json:"userEmail,omitempty"`
}

// UserConfigurationResponse defines model for UserConfigurationResponse.
type UserConfigurationResponse struct {
	UserEmail *string `json:"userEmail,omitempty"`
}

// UserEventTypeListRequest defines model for UserEventTypeListRequest.
type UserEventTypeListRequest struct {
	EventTypes []UserEventTypeListRequestEventTypes `json:"eventTypes"`
}

// UserEventTypeListRequestEventTypes defines model for UserEventTypeListRequest.EventTypes.
type UserEventTypeListRequestEventTypes string

// WebhookAppsQueueResponse defines model for WebhookAppsQueueResponse.
type WebhookAppsQueueResponse struct {
	Enabled bool `json:"enabled"`
}

// WebhookAppsQueueUpdateRequest defines model for WebhookAppsQueueUpdateRequest.
type WebhookAppsQueueUpdateRequest struct {
	Enabled bool `json:"enabled"`
}

// WebhookCall defines model for WebhookCall.
type WebhookCall struct {
	Request   WebhookRequest  `json:"request"`
	Response  WebhookResponse `json:"response"`
	Timestamp int64           `json:"timestamp"`
}

// WebhookCreateRequest defines model for WebhookCreateRequest.
type WebhookCreateRequest struct {
	Active bool   `json:"active"`
	Secret string `json:"secret"`
	Url    string `json:"url"`
}

// WebhookEventTypeListRequest defines model for WebhookEventTypeListRequest.
type WebhookEventTypeListRequest struct {
	EventTypes []WebhookEventTypeListRequestEventTypes `json:"eventTypes"`
}

// WebhookEventTypeListRequestEventTypes defines model for WebhookEventTypeListRequest.EventTypes.
type WebhookEventTypeListRequestEventTypes string

// WebhookListResponse defines model for WebhookListResponse.
type WebhookListResponse struct {
	Data []WebhookResponse `json:"data"`
}

// WebhookMessageResponse defines model for WebhookMessageResponse.
type WebhookMessageResponse struct {
	Calls     *[]WebhookCall                   `json:"calls,omitempty"`
	Content   string                           `json:"content"`
	CreatedAt int64                            `json:"createdAt"`
	EventType *WebhookMessageResponseEventType `json:"eventType,omitempty"`
	Id        string                           `json:"id"`
	Status    WebhookMessageResponseStatus     `json:"status"`
	WebhookId string                           `json:"webhookId"`
}

// WebhookMessageResponseEventType defines model for WebhookMessageResponse.EventType.
type WebhookMessageResponseEventType string

// WebhookMessageResponseStatus defines model for WebhookMessageResponse.Status.
type WebhookMessageResponseStatus string

// WebhookMessageSearchRequest defines model for WebhookMessageSearchRequest.
type WebhookMessageSearchRequest struct {
	Page      int64                              `json:"page"`
	PageSize  int32                              `json:"pageSize"`
	Status    *WebhookMessageSearchRequestStatus `json:"status,omitempty"`
	WebhookId string                             `json:"webhookId"`
}

// WebhookMessageSearchRequestStatus defines model for WebhookMessageSearchRequest.Status.
type WebhookMessageSearchRequestStatus string

// WebhookRequest defines model for WebhookRequest.
type WebhookRequest struct {
	Headers    *[]string `json:"headers,omitempty"`
	HttpMethod string    `json:"httpMethod"`
	Payload    string    `json:"payload"`
	Url        string    `json:"url"`
}

// WebhookResponse defines model for WebhookResponse.
type WebhookResponse struct {
	Active        bool   `json:"active"`
	Id            string `json:"id"`
	RetryAttempts int32  `json:"retryAttempts"`
	Secret        string `json:"secret"`
	Url           string `json:"url"`
}

// WebhookSearchRequest defines model for WebhookSearchRequest.
type WebhookSearchRequest struct {
	Page     int64 `json:"page"`
	PageSize int32 `json:"pageSize"`
}

// WebhookUpdateRequest defines model for WebhookUpdateRequest.
type WebhookUpdateRequest struct {
	Active *bool   `json:"active,omitempty"`
	Secret *string `json:"secret,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// PingWebhookParams defines parameters for PingWebhook.
type PingWebhookParams struct {
	Url    string `form:"url" json:"url"`
	Secret string `form:"secret" json:"secret"`
}

// FindConfigurationParamsEntityType defines parameters for FindConfiguration.
type FindConfigurationParamsEntityType string

// UpdateEmailFrequencyParamsEntityType defines parameters for UpdateEmailFrequency.
type UpdateEmailFrequencyParamsEntityType string

// UnsubscribeFromEntityParamsEventType defines parameters for UnsubscribeFromEntity.
type UnsubscribeFromEntityParamsEventType string

// FindWatchedEntitiesParamsEventType defines parameters for FindWatchedEntities.
type FindWatchedEntitiesParamsEventType string

// SubscribeToEntityParamsEventType defines parameters for SubscribeToEntity.
type SubscribeToEntityParamsEventType string

// GetEmailMessagesJSONRequestBody defines body for GetEmailMessages for application/json ContentType.
type GetEmailMessagesJSONRequestBody = EmailMessageSearchRequest

// GetInAppMessageJSONRequestBody defines body for GetInAppMessage for application/json ContentType.
type GetInAppMessageJSONRequestBody = InAppMessageSearchRequest

// GetInAppUserMessageJSONRequestBody defines body for GetInAppUserMessage for application/json ContentType.
type GetInAppUserMessageJSONRequestBody = InAppMessageSearchRequest

// GetMessagesJSONRequestBody defines body for GetMessages for application/json ContentType.
type GetMessagesJSONRequestBody = WebhookMessageSearchRequest

// UpsertJSONRequestBody defines body for Upsert for application/json ContentType.
type UpsertJSONRequestBody = UserConfigurationRequest

// UpdateEmailFrequencyJSONRequestBody defines body for UpdateEmailFrequency for application/json ContentType.
type UpdateEmailFrequencyJSONRequestBody = FrequencyConfigRequest

// UnsubscribeEmailJSONRequestBody defines body for UnsubscribeEmail for application/json ContentType.
type UnsubscribeEmailJSONRequestBody = UserEventTypeListRequest

// SubscribeEmailJSONRequestBody defines body for SubscribeEmail for application/json ContentType.
type SubscribeEmailJSONRequestBody = UserEventTypeListRequest

// UnsubscribeInAppJSONRequestBody defines body for UnsubscribeInApp for application/json ContentType.
type UnsubscribeInAppJSONRequestBody = UserEventTypeListRequest

// SubscribeInAppJSONRequestBody defines body for SubscribeInApp for application/json ContentType.
type SubscribeInAppJSONRequestBody = UserEventTypeListRequest

// UnsubscribeFromEntityJSONRequestBody defines body for UnsubscribeFromEntity for application/json ContentType.
type UnsubscribeFromEntityJSONRequestBody = EntityWatchRequest

// SubscribeToEntityJSONRequestBody defines body for SubscribeToEntity for application/json ContentType.
type SubscribeToEntityJSONRequestBody = EntityWatchRequest

// UpdateAppsQueueJSONRequestBody defines body for UpdateAppsQueue for application/json ContentType.
type UpdateAppsQueueJSONRequestBody = WebhookAppsQueueUpdateRequest

// UnsubscribeJSONRequestBody defines body for Unsubscribe for application/json ContentType.
type UnsubscribeJSONRequestBody = WebhookEventTypeListRequest

// SubscribeJSONRequestBody defines body for Subscribe for application/json ContentType.
type SubscribeJSONRequestBody = WebhookEventTypeListRequest

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = WebhookCreateRequest

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = WebhookSearchRequest

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody = WebhookUpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetEmailMessagesWithBody request with any body
	GetEmailMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetEmailMessages(ctx context.Context, body GetEmailMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmailMessage request
	GetEmailMessage(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInAppMessageWithBody request with any body
	GetInAppMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetInAppMessage(ctx context.Context, body GetInAppMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInAppUserMessageWithBody request with any body
	GetInAppUserMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetInAppUserMessage(ctx context.Context, body GetInAppUserMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkAllMessagesAsRead request
	MarkAllMessagesAsRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkMessageAsRead request
	MarkMessageAsRead(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkMessageAsUnread request
	MarkMessageAsUnread(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PingWebhook request
	PingWebhook(ctx context.Context, params *PingWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessagesWithBody request with any body
	GetMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetMessages(ctx context.Context, body GetMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindUserConfig request
	FindUserConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertWithBody request with any body
	UpsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Upsert(ctx context.Context, body UpsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindConfiguration request
	FindConfiguration(ctx context.Context, entityType FindConfigurationParamsEntityType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEmailFrequencyWithBody request with any body
	UpdateEmailFrequencyWithBody(ctx context.Context, entityType UpdateEmailFrequencyParamsEntityType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEmailFrequency(ctx context.Context, entityType UpdateEmailFrequencyParamsEntityType, body UpdateEmailFrequencyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeEmailWithBody request with any body
	UnsubscribeEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnsubscribeEmail(ctx context.Context, body UnsubscribeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindEmail request
	FindEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeEmailWithBody request with any body
	SubscribeEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscribeEmail(ctx context.Context, body SubscribeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeInAppWithBody request with any body
	UnsubscribeInAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnsubscribeInApp(ctx context.Context, body UnsubscribeInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindInApp request
	FindInApp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeInAppWithBody request with any body
	SubscribeInAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscribeInApp(ctx context.Context, body SubscribeInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeFromEntityWithBody request with any body
	UnsubscribeFromEntityWithBody(ctx context.Context, eventType UnsubscribeFromEntityParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnsubscribeFromEntity(ctx context.Context, eventType UnsubscribeFromEntityParamsEventType, body UnsubscribeFromEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindWatchedEntities request
	FindWatchedEntities(ctx context.Context, eventType FindWatchedEntitiesParamsEventType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeToEntityWithBody request with any body
	SubscribeToEntityWithBody(ctx context.Context, eventType SubscribeToEntityParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscribeToEntity(ctx context.Context, eventType SubscribeToEntityParamsEventType, body SubscribeToEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUseAppsQueue request
	GetUseAppsQueue(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAppsQueueWithBody request with any body
	UpdateAppsQueueWithBody(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAppsQueue(ctx context.Context, webhookId string, body UpdateAppsQueueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeWithBody request with any body
	UnsubscribeWithBody(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Unsubscribe(ctx context.Context, webhookId string, body UnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindWebhook request
	FindWebhook(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeWithBody request with any body
	SubscribeWithBody(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Subscribe(ctx context.Context, webhookId string, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWithBody request with any body
	CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchWithBody request with any body
	SearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Search(ctx context.Context, body SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request
	Delete(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get request
	Get(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWithBody request with any body
	UpdateWithBody(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update(ctx context.Context, webhookId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetEmailMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmailMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmailMessages(ctx context.Context, body GetEmailMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmailMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmailMessage(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmailMessageRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInAppMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInAppMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInAppMessage(ctx context.Context, body GetInAppMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInAppMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInAppUserMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInAppUserMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInAppUserMessage(ctx context.Context, body GetInAppUserMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInAppUserMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkAllMessagesAsRead(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkAllMessagesAsReadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkMessageAsRead(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkMessageAsReadRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkMessageAsUnread(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkMessageAsUnreadRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingWebhook(ctx context.Context, params *PingWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingWebhookRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessages(ctx context.Context, body GetMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindUserConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindUserConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Upsert(ctx context.Context, body UpsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindConfiguration(ctx context.Context, entityType FindConfigurationParamsEntityType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindConfigurationRequest(c.Server, entityType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmailFrequencyWithBody(ctx context.Context, entityType UpdateEmailFrequencyParamsEntityType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmailFrequencyRequestWithBody(c.Server, entityType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmailFrequency(ctx context.Context, entityType UpdateEmailFrequencyParamsEntityType, body UpdateEmailFrequencyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmailFrequencyRequest(c.Server, entityType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeEmail(ctx context.Context, body UnsubscribeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindEmailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeEmail(ctx context.Context, body SubscribeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeInAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeInAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeInApp(ctx context.Context, body UnsubscribeInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeInAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindInApp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindInAppRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeInAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeInAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeInApp(ctx context.Context, body SubscribeInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeInAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeFromEntityWithBody(ctx context.Context, eventType UnsubscribeFromEntityParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeFromEntityRequestWithBody(c.Server, eventType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeFromEntity(ctx context.Context, eventType UnsubscribeFromEntityParamsEventType, body UnsubscribeFromEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeFromEntityRequest(c.Server, eventType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindWatchedEntities(ctx context.Context, eventType FindWatchedEntitiesParamsEventType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindWatchedEntitiesRequest(c.Server, eventType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeToEntityWithBody(ctx context.Context, eventType SubscribeToEntityParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeToEntityRequestWithBody(c.Server, eventType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeToEntity(ctx context.Context, eventType SubscribeToEntityParamsEventType, body SubscribeToEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeToEntityRequest(c.Server, eventType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUseAppsQueue(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUseAppsQueueRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppsQueueWithBody(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppsQueueRequestWithBody(c.Server, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppsQueue(ctx context.Context, webhookId string, body UpdateAppsQueueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppsQueueRequest(c.Server, webhookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeWithBody(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeRequestWithBody(c.Server, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unsubscribe(ctx context.Context, webhookId string, body UnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeRequest(c.Server, webhookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindWebhook(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindWebhookRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeWithBody(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeRequestWithBody(c.Server, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Subscribe(ctx context.Context, webhookId string, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeRequest(c.Server, webhookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Search(ctx context.Context, body SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWithBody(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(c.Server, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update(ctx context.Context, webhookId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequest(c.Server, webhookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetEmailMessagesRequest calls the generic GetEmailMessages builder with application/json body
func NewGetEmailMessagesRequest(server string, body GetEmailMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetEmailMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetEmailMessagesRequestWithBody generates requests for GetEmailMessages with any type of body
func NewGetEmailMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/email/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmailMessageRequest generates requests for GetEmailMessage
func NewGetEmailMessageRequest(server string, messageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/email/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInAppMessageRequest calls the generic GetInAppMessage builder with application/json body
func NewGetInAppMessageRequest(server string, body GetInAppMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetInAppMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewGetInAppMessageRequestWithBody generates requests for GetInAppMessage with any type of body
func NewGetInAppMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/in-app/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInAppUserMessageRequest calls the generic GetInAppUserMessage builder with application/json body
func NewGetInAppUserMessageRequest(server string, body GetInAppUserMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetInAppUserMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewGetInAppUserMessageRequestWithBody generates requests for GetInAppUserMessage with any type of body
func NewGetInAppUserMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/user/in-app/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarkAllMessagesAsReadRequest generates requests for MarkAllMessagesAsRead
func NewMarkAllMessagesAsReadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/user/in-app/readall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarkMessageAsReadRequest generates requests for MarkMessageAsRead
func NewMarkMessageAsReadRequest(server string, messageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/user/in-app/%s/read", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarkMessageAsUnreadRequest generates requests for MarkMessageAsUnread
func NewMarkMessageAsUnreadRequest(server string, messageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/user/in-app/%s/unread", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPingWebhookRequest generates requests for PingWebhook
func NewPingWebhookRequest(server string, params *PingWebhookParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, params.Secret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessagesRequest calls the generic GetMessages builder with application/json body
func NewGetMessagesRequest(server string, body GetMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetMessagesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetMessagesRequestWithBody generates requests for GetMessages with any type of body
func NewGetMessagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/webhook/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindUserConfigRequest generates requests for FindUserConfig
func NewFindUserConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertRequest calls the generic Upsert builder with application/json body
func NewUpsertRequest(server string, body UpsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertRequestWithBody(server, "application/json", bodyReader)
}

// NewUpsertRequestWithBody generates requests for Upsert with any type of body
func NewUpsertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindConfigurationRequest generates requests for FindConfiguration
func NewFindConfigurationRequest(server string, entityType FindConfigurationParamsEntityType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entityType", runtime.ParamLocationPath, entityType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/email/aggregation/entity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEmailFrequencyRequest calls the generic UpdateEmailFrequency builder with application/json body
func NewUpdateEmailFrequencyRequest(server string, entityType UpdateEmailFrequencyParamsEntityType, body UpdateEmailFrequencyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEmailFrequencyRequestWithBody(server, entityType, "application/json", bodyReader)
}

// NewUpdateEmailFrequencyRequestWithBody generates requests for UpdateEmailFrequency with any type of body
func NewUpdateEmailFrequencyRequestWithBody(server string, entityType UpdateEmailFrequencyParamsEntityType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entityType", runtime.ParamLocationPath, entityType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/email/aggregation/entity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeEmailRequest calls the generic UnsubscribeEmail builder with application/json body
func NewUnsubscribeEmailRequest(server string, body UnsubscribeEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnsubscribeEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewUnsubscribeEmailRequestWithBody generates requests for UnsubscribeEmail with any type of body
func NewUnsubscribeEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/email/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindEmailRequest generates requests for FindEmail
func NewFindEmailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/email/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscribeEmailRequest calls the generic SubscribeEmail builder with application/json body
func NewSubscribeEmailRequest(server string, body SubscribeEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscribeEmailRequestWithBody generates requests for SubscribeEmail with any type of body
func NewSubscribeEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/email/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeInAppRequest calls the generic UnsubscribeInApp builder with application/json body
func NewUnsubscribeInAppRequest(server string, body UnsubscribeInAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnsubscribeInAppRequestWithBody(server, "application/json", bodyReader)
}

// NewUnsubscribeInAppRequestWithBody generates requests for UnsubscribeInApp with any type of body
func NewUnsubscribeInAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/in-app/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindInAppRequest generates requests for FindInApp
func NewFindInAppRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/in-app/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscribeInAppRequest calls the generic SubscribeInApp builder with application/json body
func NewSubscribeInAppRequest(server string, body SubscribeInAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeInAppRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscribeInAppRequestWithBody generates requests for SubscribeInApp with any type of body
func NewSubscribeInAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/in-app/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeFromEntityRequest calls the generic UnsubscribeFromEntity builder with application/json body
func NewUnsubscribeFromEntityRequest(server string, eventType UnsubscribeFromEntityParamsEventType, body UnsubscribeFromEntityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnsubscribeFromEntityRequestWithBody(server, eventType, "application/json", bodyReader)
}

// NewUnsubscribeFromEntityRequestWithBody generates requests for UnsubscribeFromEntity with any type of body
func NewUnsubscribeFromEntityRequestWithBody(server string, eventType UnsubscribeFromEntityParamsEventType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventType", runtime.ParamLocationPath, eventType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/watch/event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindWatchedEntitiesRequest generates requests for FindWatchedEntities
func NewFindWatchedEntitiesRequest(server string, eventType FindWatchedEntitiesParamsEventType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventType", runtime.ParamLocationPath, eventType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/watch/event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscribeToEntityRequest calls the generic SubscribeToEntity builder with application/json body
func NewSubscribeToEntityRequest(server string, eventType SubscribeToEntityParamsEventType, body SubscribeToEntityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeToEntityRequestWithBody(server, eventType, "application/json", bodyReader)
}

// NewSubscribeToEntityRequestWithBody generates requests for SubscribeToEntity with any type of body
func NewSubscribeToEntityRequestWithBody(server string, eventType SubscribeToEntityParamsEventType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventType", runtime.ParamLocationPath, eventType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/user/watch/event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUseAppsQueueRequest generates requests for GetUseAppsQueue
func NewGetUseAppsQueueRequest(server string, webhookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/webhook/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAppsQueueRequest calls the generic UpdateAppsQueue builder with application/json body
func NewUpdateAppsQueueRequest(server string, webhookId string, body UpdateAppsQueueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAppsQueueRequestWithBody(server, webhookId, "application/json", bodyReader)
}

// NewUpdateAppsQueueRequestWithBody generates requests for UpdateAppsQueue with any type of body
func NewUpdateAppsQueueRequestWithBody(server string, webhookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/webhook/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeRequest calls the generic Unsubscribe builder with application/json body
func NewUnsubscribeRequest(server string, webhookId string, body UnsubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnsubscribeRequestWithBody(server, webhookId, "application/json", bodyReader)
}

// NewUnsubscribeRequestWithBody generates requests for Unsubscribe with any type of body
func NewUnsubscribeRequestWithBody(server string, webhookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/webhook/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindWebhookRequest generates requests for FindWebhook
func NewFindWebhookRequest(server string, webhookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/webhook/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscribeRequest calls the generic Subscribe builder with application/json body
func NewSubscribeRequest(server string, webhookId string, body SubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeRequestWithBody(server, webhookId, "application/json", bodyReader)
}

// NewSubscribeRequestWithBody generates requests for Subscribe with any type of body
func NewSubscribeRequestWithBody(server string, webhookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/webhook/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateRequest calls the generic Create builder with application/json body
func NewCreateRequest(server string, body CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRequestWithBody generates requests for Create with any type of body
func NewCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchRequest calls the generic Search builder with application/json body
func NewSearchRequest(server string, body SearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchRequestWithBody generates requests for Search with any type of body
func NewSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRequest generates requests for Delete
func NewDeleteRequest(server string, webhookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string, webhookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRequest calls the generic Update builder with application/json body
func NewUpdateRequest(server string, webhookId string, body UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(server, webhookId, "application/json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(server string, webhookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetEmailMessagesWithBodyWithResponse request with any body
	GetEmailMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEmailMessagesResponse, error)

	GetEmailMessagesWithResponse(ctx context.Context, body GetEmailMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEmailMessagesResponse, error)

	// GetEmailMessageWithResponse request
	GetEmailMessageWithResponse(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*GetEmailMessageResponse, error)

	// GetInAppMessageWithBodyWithResponse request with any body
	GetInAppMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInAppMessageResponse, error)

	GetInAppMessageWithResponse(ctx context.Context, body GetInAppMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInAppMessageResponse, error)

	// GetInAppUserMessageWithBodyWithResponse request with any body
	GetInAppUserMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInAppUserMessageResponse, error)

	GetInAppUserMessageWithResponse(ctx context.Context, body GetInAppUserMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInAppUserMessageResponse, error)

	// MarkAllMessagesAsReadWithResponse request
	MarkAllMessagesAsReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MarkAllMessagesAsReadResponse, error)

	// MarkMessageAsReadWithResponse request
	MarkMessageAsReadWithResponse(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*MarkMessageAsReadResponse, error)

	// MarkMessageAsUnreadWithResponse request
	MarkMessageAsUnreadWithResponse(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*MarkMessageAsUnreadResponse, error)

	// PingWebhookWithResponse request
	PingWebhookWithResponse(ctx context.Context, params *PingWebhookParams, reqEditors ...RequestEditorFn) (*PingWebhookResponse, error)

	// GetMessagesWithBodyWithResponse request with any body
	GetMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error)

	GetMessagesWithResponse(ctx context.Context, body GetMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error)

	// FindUserConfigWithResponse request
	FindUserConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindUserConfigResponse, error)

	// UpsertWithBodyWithResponse request with any body
	UpsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertResponse, error)

	UpsertWithResponse(ctx context.Context, body UpsertJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertResponse, error)

	// FindConfigurationWithResponse request
	FindConfigurationWithResponse(ctx context.Context, entityType FindConfigurationParamsEntityType, reqEditors ...RequestEditorFn) (*FindConfigurationResponse, error)

	// UpdateEmailFrequencyWithBodyWithResponse request with any body
	UpdateEmailFrequencyWithBodyWithResponse(ctx context.Context, entityType UpdateEmailFrequencyParamsEntityType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmailFrequencyResponse, error)

	UpdateEmailFrequencyWithResponse(ctx context.Context, entityType UpdateEmailFrequencyParamsEntityType, body UpdateEmailFrequencyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmailFrequencyResponse, error)

	// UnsubscribeEmailWithBodyWithResponse request with any body
	UnsubscribeEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeEmailResponse, error)

	UnsubscribeEmailWithResponse(ctx context.Context, body UnsubscribeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeEmailResponse, error)

	// FindEmailWithResponse request
	FindEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindEmailResponse, error)

	// SubscribeEmailWithBodyWithResponse request with any body
	SubscribeEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeEmailResponse, error)

	SubscribeEmailWithResponse(ctx context.Context, body SubscribeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeEmailResponse, error)

	// UnsubscribeInAppWithBodyWithResponse request with any body
	UnsubscribeInAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeInAppResponse, error)

	UnsubscribeInAppWithResponse(ctx context.Context, body UnsubscribeInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeInAppResponse, error)

	// FindInAppWithResponse request
	FindInAppWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindInAppResponse, error)

	// SubscribeInAppWithBodyWithResponse request with any body
	SubscribeInAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeInAppResponse, error)

	SubscribeInAppWithResponse(ctx context.Context, body SubscribeInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeInAppResponse, error)

	// UnsubscribeFromEntityWithBodyWithResponse request with any body
	UnsubscribeFromEntityWithBodyWithResponse(ctx context.Context, eventType UnsubscribeFromEntityParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeFromEntityResponse, error)

	UnsubscribeFromEntityWithResponse(ctx context.Context, eventType UnsubscribeFromEntityParamsEventType, body UnsubscribeFromEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeFromEntityResponse, error)

	// FindWatchedEntitiesWithResponse request
	FindWatchedEntitiesWithResponse(ctx context.Context, eventType FindWatchedEntitiesParamsEventType, reqEditors ...RequestEditorFn) (*FindWatchedEntitiesResponse, error)

	// SubscribeToEntityWithBodyWithResponse request with any body
	SubscribeToEntityWithBodyWithResponse(ctx context.Context, eventType SubscribeToEntityParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeToEntityResponse, error)

	SubscribeToEntityWithResponse(ctx context.Context, eventType SubscribeToEntityParamsEventType, body SubscribeToEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeToEntityResponse, error)

	// GetUseAppsQueueWithResponse request
	GetUseAppsQueueWithResponse(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*GetUseAppsQueueResponse, error)

	// UpdateAppsQueueWithBodyWithResponse request with any body
	UpdateAppsQueueWithBodyWithResponse(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppsQueueResponse, error)

	UpdateAppsQueueWithResponse(ctx context.Context, webhookId string, body UpdateAppsQueueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppsQueueResponse, error)

	// UnsubscribeWithBodyWithResponse request with any body
	UnsubscribeWithBodyWithResponse(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeResponse, error)

	UnsubscribeWithResponse(ctx context.Context, webhookId string, body UnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeResponse, error)

	// FindWebhookWithResponse request
	FindWebhookWithResponse(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*FindWebhookResponse, error)

	// SubscribeWithBodyWithResponse request with any body
	SubscribeWithBodyWithResponse(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeResponse, error)

	SubscribeWithResponse(ctx context.Context, webhookId string, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeResponse, error)

	// CreateWithBodyWithResponse request with any body
	CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	CreateWithResponse(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	// SearchWithBodyWithResponse request with any body
	SearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchResponse, error)

	SearchWithResponse(ctx context.Context, body SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchResponse, error)

	// DeleteWithResponse request
	DeleteWithResponse(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// GetWithResponse request
	GetWithResponse(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// UpdateWithBodyWithResponse request with any body
	UpdateWithBodyWithResponse(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	UpdateWithResponse(ctx context.Context, webhookId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)
}

type GetEmailMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailMessageListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEmailMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmailMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmailMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailMessageResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEmailMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmailMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInAppMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InAppMessageListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetInAppMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInAppMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInAppUserMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InAppUserMessageListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetInAppUserMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInAppUserMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkAllMessagesAsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MarkAllMessagesAsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkAllMessagesAsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkMessageAsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MarkMessageAsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkMessageAsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkMessageAsUnreadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MarkMessageAsUnreadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkMessageAsUnreadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookCall
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PingWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WebhookMessageResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindUserConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserConfigurationResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindUserConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindUserConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FrequencyConfigResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEmailFrequencyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateEmailFrequencyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEmailFrequencyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnsubscribeEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubscribeEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnsubscribeInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeInAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubscribeInAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeInAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeFromEntityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnsubscribeFromEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeFromEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindWatchedEntitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityWatchResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindWatchedEntitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindWatchedEntitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeToEntityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubscribeToEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeToEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUseAppsQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookAppsQueueResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUseAppsQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUseAppsQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAppsQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateAppsQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAppsQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Unit
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Unit
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetEmailMessagesWithBodyWithResponse request with arbitrary body returning *GetEmailMessagesResponse
func (c *ClientWithResponses) GetEmailMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetEmailMessagesResponse, error) {
	rsp, err := c.GetEmailMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmailMessagesResponse(rsp)
}

func (c *ClientWithResponses) GetEmailMessagesWithResponse(ctx context.Context, body GetEmailMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetEmailMessagesResponse, error) {
	rsp, err := c.GetEmailMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmailMessagesResponse(rsp)
}

// GetEmailMessageWithResponse request returning *GetEmailMessageResponse
func (c *ClientWithResponses) GetEmailMessageWithResponse(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*GetEmailMessageResponse, error) {
	rsp, err := c.GetEmailMessage(ctx, messageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmailMessageResponse(rsp)
}

// GetInAppMessageWithBodyWithResponse request with arbitrary body returning *GetInAppMessageResponse
func (c *ClientWithResponses) GetInAppMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInAppMessageResponse, error) {
	rsp, err := c.GetInAppMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInAppMessageResponse(rsp)
}

func (c *ClientWithResponses) GetInAppMessageWithResponse(ctx context.Context, body GetInAppMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInAppMessageResponse, error) {
	rsp, err := c.GetInAppMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInAppMessageResponse(rsp)
}

// GetInAppUserMessageWithBodyWithResponse request with arbitrary body returning *GetInAppUserMessageResponse
func (c *ClientWithResponses) GetInAppUserMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetInAppUserMessageResponse, error) {
	rsp, err := c.GetInAppUserMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInAppUserMessageResponse(rsp)
}

func (c *ClientWithResponses) GetInAppUserMessageWithResponse(ctx context.Context, body GetInAppUserMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetInAppUserMessageResponse, error) {
	rsp, err := c.GetInAppUserMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInAppUserMessageResponse(rsp)
}

// MarkAllMessagesAsReadWithResponse request returning *MarkAllMessagesAsReadResponse
func (c *ClientWithResponses) MarkAllMessagesAsReadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MarkAllMessagesAsReadResponse, error) {
	rsp, err := c.MarkAllMessagesAsRead(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkAllMessagesAsReadResponse(rsp)
}

// MarkMessageAsReadWithResponse request returning *MarkMessageAsReadResponse
func (c *ClientWithResponses) MarkMessageAsReadWithResponse(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*MarkMessageAsReadResponse, error) {
	rsp, err := c.MarkMessageAsRead(ctx, messageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkMessageAsReadResponse(rsp)
}

// MarkMessageAsUnreadWithResponse request returning *MarkMessageAsUnreadResponse
func (c *ClientWithResponses) MarkMessageAsUnreadWithResponse(ctx context.Context, messageId string, reqEditors ...RequestEditorFn) (*MarkMessageAsUnreadResponse, error) {
	rsp, err := c.MarkMessageAsUnread(ctx, messageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkMessageAsUnreadResponse(rsp)
}

// PingWebhookWithResponse request returning *PingWebhookResponse
func (c *ClientWithResponses) PingWebhookWithResponse(ctx context.Context, params *PingWebhookParams, reqEditors ...RequestEditorFn) (*PingWebhookResponse, error) {
	rsp, err := c.PingWebhook(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingWebhookResponse(rsp)
}

// GetMessagesWithBodyWithResponse request with arbitrary body returning *GetMessagesResponse
func (c *ClientWithResponses) GetMessagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error) {
	rsp, err := c.GetMessagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesResponse(rsp)
}

func (c *ClientWithResponses) GetMessagesWithResponse(ctx context.Context, body GetMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetMessagesResponse, error) {
	rsp, err := c.GetMessages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesResponse(rsp)
}

// FindUserConfigWithResponse request returning *FindUserConfigResponse
func (c *ClientWithResponses) FindUserConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindUserConfigResponse, error) {
	rsp, err := c.FindUserConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindUserConfigResponse(rsp)
}

// UpsertWithBodyWithResponse request with arbitrary body returning *UpsertResponse
func (c *ClientWithResponses) UpsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertResponse, error) {
	rsp, err := c.UpsertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertResponse(rsp)
}

func (c *ClientWithResponses) UpsertWithResponse(ctx context.Context, body UpsertJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertResponse, error) {
	rsp, err := c.Upsert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertResponse(rsp)
}

// FindConfigurationWithResponse request returning *FindConfigurationResponse
func (c *ClientWithResponses) FindConfigurationWithResponse(ctx context.Context, entityType FindConfigurationParamsEntityType, reqEditors ...RequestEditorFn) (*FindConfigurationResponse, error) {
	rsp, err := c.FindConfiguration(ctx, entityType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindConfigurationResponse(rsp)
}

// UpdateEmailFrequencyWithBodyWithResponse request with arbitrary body returning *UpdateEmailFrequencyResponse
func (c *ClientWithResponses) UpdateEmailFrequencyWithBodyWithResponse(ctx context.Context, entityType UpdateEmailFrequencyParamsEntityType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmailFrequencyResponse, error) {
	rsp, err := c.UpdateEmailFrequencyWithBody(ctx, entityType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmailFrequencyResponse(rsp)
}

func (c *ClientWithResponses) UpdateEmailFrequencyWithResponse(ctx context.Context, entityType UpdateEmailFrequencyParamsEntityType, body UpdateEmailFrequencyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmailFrequencyResponse, error) {
	rsp, err := c.UpdateEmailFrequency(ctx, entityType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmailFrequencyResponse(rsp)
}

// UnsubscribeEmailWithBodyWithResponse request with arbitrary body returning *UnsubscribeEmailResponse
func (c *ClientWithResponses) UnsubscribeEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeEmailResponse, error) {
	rsp, err := c.UnsubscribeEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeEmailResponse(rsp)
}

func (c *ClientWithResponses) UnsubscribeEmailWithResponse(ctx context.Context, body UnsubscribeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeEmailResponse, error) {
	rsp, err := c.UnsubscribeEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeEmailResponse(rsp)
}

// FindEmailWithResponse request returning *FindEmailResponse
func (c *ClientWithResponses) FindEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindEmailResponse, error) {
	rsp, err := c.FindEmail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindEmailResponse(rsp)
}

// SubscribeEmailWithBodyWithResponse request with arbitrary body returning *SubscribeEmailResponse
func (c *ClientWithResponses) SubscribeEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeEmailResponse, error) {
	rsp, err := c.SubscribeEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeEmailResponse(rsp)
}

func (c *ClientWithResponses) SubscribeEmailWithResponse(ctx context.Context, body SubscribeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeEmailResponse, error) {
	rsp, err := c.SubscribeEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeEmailResponse(rsp)
}

// UnsubscribeInAppWithBodyWithResponse request with arbitrary body returning *UnsubscribeInAppResponse
func (c *ClientWithResponses) UnsubscribeInAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeInAppResponse, error) {
	rsp, err := c.UnsubscribeInAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeInAppResponse(rsp)
}

func (c *ClientWithResponses) UnsubscribeInAppWithResponse(ctx context.Context, body UnsubscribeInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeInAppResponse, error) {
	rsp, err := c.UnsubscribeInApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeInAppResponse(rsp)
}

// FindInAppWithResponse request returning *FindInAppResponse
func (c *ClientWithResponses) FindInAppWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindInAppResponse, error) {
	rsp, err := c.FindInApp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindInAppResponse(rsp)
}

// SubscribeInAppWithBodyWithResponse request with arbitrary body returning *SubscribeInAppResponse
func (c *ClientWithResponses) SubscribeInAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeInAppResponse, error) {
	rsp, err := c.SubscribeInAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeInAppResponse(rsp)
}

func (c *ClientWithResponses) SubscribeInAppWithResponse(ctx context.Context, body SubscribeInAppJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeInAppResponse, error) {
	rsp, err := c.SubscribeInApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeInAppResponse(rsp)
}

// UnsubscribeFromEntityWithBodyWithResponse request with arbitrary body returning *UnsubscribeFromEntityResponse
func (c *ClientWithResponses) UnsubscribeFromEntityWithBodyWithResponse(ctx context.Context, eventType UnsubscribeFromEntityParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeFromEntityResponse, error) {
	rsp, err := c.UnsubscribeFromEntityWithBody(ctx, eventType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeFromEntityResponse(rsp)
}

func (c *ClientWithResponses) UnsubscribeFromEntityWithResponse(ctx context.Context, eventType UnsubscribeFromEntityParamsEventType, body UnsubscribeFromEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeFromEntityResponse, error) {
	rsp, err := c.UnsubscribeFromEntity(ctx, eventType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeFromEntityResponse(rsp)
}

// FindWatchedEntitiesWithResponse request returning *FindWatchedEntitiesResponse
func (c *ClientWithResponses) FindWatchedEntitiesWithResponse(ctx context.Context, eventType FindWatchedEntitiesParamsEventType, reqEditors ...RequestEditorFn) (*FindWatchedEntitiesResponse, error) {
	rsp, err := c.FindWatchedEntities(ctx, eventType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindWatchedEntitiesResponse(rsp)
}

// SubscribeToEntityWithBodyWithResponse request with arbitrary body returning *SubscribeToEntityResponse
func (c *ClientWithResponses) SubscribeToEntityWithBodyWithResponse(ctx context.Context, eventType SubscribeToEntityParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeToEntityResponse, error) {
	rsp, err := c.SubscribeToEntityWithBody(ctx, eventType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeToEntityResponse(rsp)
}

func (c *ClientWithResponses) SubscribeToEntityWithResponse(ctx context.Context, eventType SubscribeToEntityParamsEventType, body SubscribeToEntityJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeToEntityResponse, error) {
	rsp, err := c.SubscribeToEntity(ctx, eventType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeToEntityResponse(rsp)
}

// GetUseAppsQueueWithResponse request returning *GetUseAppsQueueResponse
func (c *ClientWithResponses) GetUseAppsQueueWithResponse(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*GetUseAppsQueueResponse, error) {
	rsp, err := c.GetUseAppsQueue(ctx, webhookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUseAppsQueueResponse(rsp)
}

// UpdateAppsQueueWithBodyWithResponse request with arbitrary body returning *UpdateAppsQueueResponse
func (c *ClientWithResponses) UpdateAppsQueueWithBodyWithResponse(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppsQueueResponse, error) {
	rsp, err := c.UpdateAppsQueueWithBody(ctx, webhookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppsQueueResponse(rsp)
}

func (c *ClientWithResponses) UpdateAppsQueueWithResponse(ctx context.Context, webhookId string, body UpdateAppsQueueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppsQueueResponse, error) {
	rsp, err := c.UpdateAppsQueue(ctx, webhookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppsQueueResponse(rsp)
}

// UnsubscribeWithBodyWithResponse request with arbitrary body returning *UnsubscribeResponse
func (c *ClientWithResponses) UnsubscribeWithBodyWithResponse(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnsubscribeResponse, error) {
	rsp, err := c.UnsubscribeWithBody(ctx, webhookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeResponse(rsp)
}

func (c *ClientWithResponses) UnsubscribeWithResponse(ctx context.Context, webhookId string, body UnsubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*UnsubscribeResponse, error) {
	rsp, err := c.Unsubscribe(ctx, webhookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeResponse(rsp)
}

// FindWebhookWithResponse request returning *FindWebhookResponse
func (c *ClientWithResponses) FindWebhookWithResponse(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*FindWebhookResponse, error) {
	rsp, err := c.FindWebhook(ctx, webhookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindWebhookResponse(rsp)
}

// SubscribeWithBodyWithResponse request with arbitrary body returning *SubscribeResponse
func (c *ClientWithResponses) SubscribeWithBodyWithResponse(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeResponse, error) {
	rsp, err := c.SubscribeWithBody(ctx, webhookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeResponse(rsp)
}

func (c *ClientWithResponses) SubscribeWithResponse(ctx context.Context, webhookId string, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeResponse, error) {
	rsp, err := c.Subscribe(ctx, webhookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeResponse(rsp)
}

// CreateWithBodyWithResponse request with arbitrary body returning *CreateResponse
func (c *ClientWithResponses) CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResponse(rsp)
}

func (c *ClientWithResponses) CreateWithResponse(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResponse(rsp)
}

// SearchWithBodyWithResponse request with arbitrary body returning *SearchResponse
func (c *ClientWithResponses) SearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchResponse, error) {
	rsp, err := c.SearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchResponse(rsp)
}

func (c *ClientWithResponses) SearchWithResponse(ctx context.Context, body SearchJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchResponse, error) {
	rsp, err := c.Search(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchResponse(rsp)
}

// DeleteWithResponse request returning *DeleteResponse
func (c *ClientWithResponses) DeleteWithResponse(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.Delete(ctx, webhookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResponse(rsp)
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, webhookId string, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, webhookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// UpdateWithBodyWithResponse request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses) UpdateWithBodyWithResponse(ctx context.Context, webhookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateWithBody(ctx, webhookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses) UpdateWithResponse(ctx context.Context, webhookId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.Update(ctx, webhookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

// ParseGetEmailMessagesResponse parses an HTTP response from a GetEmailMessagesWithResponse call
func ParseGetEmailMessagesResponse(rsp *http.Response) (*GetEmailMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmailMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailMessageListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetEmailMessageResponse parses an HTTP response from a GetEmailMessageWithResponse call
func ParseGetEmailMessageResponse(rsp *http.Response) (*GetEmailMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmailMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetInAppMessageResponse parses an HTTP response from a GetInAppMessageWithResponse call
func ParseGetInAppMessageResponse(rsp *http.Response) (*GetInAppMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInAppMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InAppMessageListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetInAppUserMessageResponse parses an HTTP response from a GetInAppUserMessageWithResponse call
func ParseGetInAppUserMessageResponse(rsp *http.Response) (*GetInAppUserMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInAppUserMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InAppUserMessageListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMarkAllMessagesAsReadResponse parses an HTTP response from a MarkAllMessagesAsReadWithResponse call
func ParseMarkAllMessagesAsReadResponse(rsp *http.Response) (*MarkAllMessagesAsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkAllMessagesAsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseMarkMessageAsReadResponse parses an HTTP response from a MarkMessageAsReadWithResponse call
func ParseMarkMessageAsReadResponse(rsp *http.Response) (*MarkMessageAsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkMessageAsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMarkMessageAsUnreadResponse parses an HTTP response from a MarkMessageAsUnreadWithResponse call
func ParseMarkMessageAsUnreadResponse(rsp *http.Response) (*MarkMessageAsUnreadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkMessageAsUnreadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePingWebhookResponse parses an HTTP response from a PingWebhookWithResponse call
func ParsePingWebhookResponse(rsp *http.Response) (*PingWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMessagesResponse parses an HTTP response from a GetMessagesWithResponse call
func ParseGetMessagesResponse(rsp *http.Response) (*GetMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WebhookMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindUserConfigResponse parses an HTTP response from a FindUserConfigWithResponse call
func ParseFindUserConfigResponse(rsp *http.Response) (*FindUserConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindUserConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpsertResponse parses an HTTP response from a UpsertWithResponse call
func ParseUpsertResponse(rsp *http.Response) (*UpsertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindConfigurationResponse parses an HTTP response from a FindConfigurationWithResponse call
func ParseFindConfigurationResponse(rsp *http.Response) (*FindConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FrequencyConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateEmailFrequencyResponse parses an HTTP response from a UpdateEmailFrequencyWithResponse call
func ParseUpdateEmailFrequencyResponse(rsp *http.Response) (*UpdateEmailFrequencyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEmailFrequencyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUnsubscribeEmailResponse parses an HTTP response from a UnsubscribeEmailWithResponse call
func ParseUnsubscribeEmailResponse(rsp *http.Response) (*UnsubscribeEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindEmailResponse parses an HTTP response from a FindEmailWithResponse call
func ParseFindEmailResponse(rsp *http.Response) (*FindEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSubscribeEmailResponse parses an HTTP response from a SubscribeEmailWithResponse call
func ParseSubscribeEmailResponse(rsp *http.Response) (*SubscribeEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUnsubscribeInAppResponse parses an HTTP response from a UnsubscribeInAppWithResponse call
func ParseUnsubscribeInAppResponse(rsp *http.Response) (*UnsubscribeInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindInAppResponse parses an HTTP response from a FindInAppWithResponse call
func ParseFindInAppResponse(rsp *http.Response) (*FindInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSubscribeInAppResponse parses an HTTP response from a SubscribeInAppWithResponse call
func ParseSubscribeInAppResponse(rsp *http.Response) (*SubscribeInAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeInAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUnsubscribeFromEntityResponse parses an HTTP response from a UnsubscribeFromEntityWithResponse call
func ParseUnsubscribeFromEntityResponse(rsp *http.Response) (*UnsubscribeFromEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeFromEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindWatchedEntitiesResponse parses an HTTP response from a FindWatchedEntitiesWithResponse call
func ParseFindWatchedEntitiesResponse(rsp *http.Response) (*FindWatchedEntitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindWatchedEntitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityWatchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSubscribeToEntityResponse parses an HTTP response from a SubscribeToEntityWithResponse call
func ParseSubscribeToEntityResponse(rsp *http.Response) (*SubscribeToEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeToEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUseAppsQueueResponse parses an HTTP response from a GetUseAppsQueueWithResponse call
func ParseGetUseAppsQueueResponse(rsp *http.Response) (*GetUseAppsQueueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUseAppsQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookAppsQueueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateAppsQueueResponse parses an HTTP response from a UpdateAppsQueueWithResponse call
func ParseUpdateAppsQueueResponse(rsp *http.Response) (*UpdateAppsQueueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAppsQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUnsubscribeResponse parses an HTTP response from a UnsubscribeWithResponse call
func ParseUnsubscribeResponse(rsp *http.Response) (*UnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindWebhookResponse parses an HTTP response from a FindWebhookWithResponse call
func ParseFindWebhookResponse(rsp *http.Response) (*FindWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSubscribeResponse parses an HTTP response from a SubscribeWithResponse call
func ParseSubscribeResponse(rsp *http.Response) (*SubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateResponse parses an HTTP response from a CreateWithResponse call
func ParseCreateResponse(rsp *http.Response) (*CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseSearchResponse parses an HTTP response from a SearchWithResponse call
func ParseSearchResponse(rsp *http.Response) (*SearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteResponse parses an HTTP response from a DeleteWithResponse call
func ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateResponse parses an HTTP response from a UpdateWithResponse call
func ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Unit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
